
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  0800c4f8  0800c4f8  0001c4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d10c  0800d10c  0001d10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  0800d114  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000098  0800d1a4  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000d0  0800d1d9  000200d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001590  200000e4  0800d1ea  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001674  0800d1ea  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .debug_line   00031c82  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00031221  00000000  00000000  00051d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000069f0  00000000  00000000  00082fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002b18  00000000  00000000  000899a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fab3a  00000000  00000000  0008c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002820  00000000  00000000  00187000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002dd7d  00000000  00000000  00189820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b759d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ba80  00000000  00000000  001b75f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e4 	.word	0x200000e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c4e0 	.word	0x0800c4e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e8 	.word	0x200000e8
 800017c:	0800c4e0 	.word	0x0800c4e0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000260:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000554:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000556:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000558:	3304      	adds	r3, #4

0800055a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800055e:	d3f9      	bcc.n	8000554 <CopyDataInit>
  bx lr
 8000560:	4770      	bx	lr

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000562:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000564:	3004      	adds	r0, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000566:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>
  bx lr
 800056a:	4770      	bx	lr

0800056c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800056e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000570:	f003 f878 	bl	8003664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <LoopForever+0x8>)
 8000576:	490c      	ldr	r1, [pc, #48]	; (80005a8 <LoopForever+0xc>)
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <LoopForever+0x10>)
 800057a:	2300      	movs	r3, #0
 800057c:	f7ff ffed 	bl	800055a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <LoopForever+0x14>)
 8000582:	490c      	ldr	r1, [pc, #48]	; (80005b4 <LoopForever+0x18>)
 8000584:	2300      	movs	r3, #0
 8000586:	f7ff ffee 	bl	8000566 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <LoopForever+0x1c>)
 800058c:	490b      	ldr	r1, [pc, #44]	; (80005bc <LoopForever+0x20>)
 800058e:	2300      	movs	r3, #0
 8000590:	f7ff ffe9 	bl	8000566 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000594:	f00a ff66 	bl	800b464 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000598:	f001 fd00 	bl	8001f9c <main>

0800059c <LoopForever>:

LoopForever:
  b LoopForever
 800059c:	e7fe      	b.n	800059c <LoopForever>
 800059e:	0000      	.short	0x0000
  ldr   r0, =_estack
 80005a0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000098 	.word	0x20000098
 80005ac:	0800d114 	.word	0x0800d114
  INIT_BSS _sbss, _ebss
 80005b0:	200000e4 	.word	0x200000e4
 80005b4:	20001674 	.word	0x20001674
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005b8:	200301e4 	.word	0x200301e4
 80005bc:	20030a67 	.word	0x20030a67

080005c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_IRQHandler>
	...

080005c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005d2:	4905      	ldr	r1, [pc, #20]	; (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	58000800 	.word	0x58000800

080005ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4013      	ands	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000610:	68fb      	ldr	r3, [r7, #12]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800062e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4313      	orrs	r3, r2
 8000636:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800063a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800063e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000648:	68fb      	ldr	r3, [r7, #12]
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800065a:	f003 f90b 	bl	8003874 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800065e:	f003 f90f 	bl	8003880 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000662:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000666:	f7ff ffad 	bl	80005c4 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800066a:	f009 ff0f 	bl	800a48c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800066e:	f000 f821 	bl	80006b4 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000672:	f000 f8c3 	bl	80007fc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000676:	bf00      	nop
}
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <APPD_EnableCPU2+0x34>)
 8000684:	1d3c      	adds	r4, r7, #4
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	c403      	stmia	r4!, {r0, r1}
 8000692:	8022      	strh	r2, [r4, #0]
 8000694:	3402      	adds	r4, #2
 8000696:	0c13      	lsrs	r3, r2, #16
 8000698:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800069a:	f009 fe33 	bl	800a304 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f009 f95a 	bl	800995a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80006a6:	bf00      	nop
}
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bdb0      	pop	{r4, r5, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	0800c4f8 	.word	0x0800c4f8

080006b4 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	77fb      	strb	r3, [r7, #31]
 80006d8:	e038      	b.n	800074c <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80006da:	7ffb      	ldrb	r3, [r7, #31]
 80006dc:	4a44      	ldr	r2, [pc, #272]	; (80007f0 <APPD_SetCPU2GpioConfig+0x13c>)
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	4413      	add	r3, r2
 80006e2:	799b      	ldrb	r3, [r3, #6]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d02b      	beq.n	8000740 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80006e8:	7ffb      	ldrb	r3, [r7, #31]
 80006ea:	4a41      	ldr	r2, [pc, #260]	; (80007f0 <APPD_SetCPU2GpioConfig+0x13c>)
 80006ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006f0:	4a40      	ldr	r2, [pc, #256]	; (80007f4 <APPD_SetCPU2GpioConfig+0x140>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d01b      	beq.n	800072e <APPD_SetCPU2GpioConfig+0x7a>
 80006f6:	4a3f      	ldr	r2, [pc, #252]	; (80007f4 <APPD_SetCPU2GpioConfig+0x140>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d823      	bhi.n	8000744 <APPD_SetCPU2GpioConfig+0x90>
 80006fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000700:	d003      	beq.n	800070a <APPD_SetCPU2GpioConfig+0x56>
 8000702:	4a3d      	ldr	r2, [pc, #244]	; (80007f8 <APPD_SetCPU2GpioConfig+0x144>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d009      	beq.n	800071c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000708:	e01c      	b.n	8000744 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800070a:	7ffb      	ldrb	r3, [r7, #31]
 800070c:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <APPD_SetCPU2GpioConfig+0x13c>)
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4413      	add	r3, r2
 8000712:	889a      	ldrh	r2, [r3, #4]
 8000714:	8bbb      	ldrh	r3, [r7, #28]
 8000716:	4313      	orrs	r3, r2
 8000718:	83bb      	strh	r3, [r7, #28]
          break;
 800071a:	e014      	b.n	8000746 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800071c:	7ffb      	ldrb	r3, [r7, #31]
 800071e:	4a34      	ldr	r2, [pc, #208]	; (80007f0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	4413      	add	r3, r2
 8000724:	889a      	ldrh	r2, [r3, #4]
 8000726:	8b7b      	ldrh	r3, [r7, #26]
 8000728:	4313      	orrs	r3, r2
 800072a:	837b      	strh	r3, [r7, #26]
          break;
 800072c:	e00b      	b.n	8000746 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800072e:	7ffb      	ldrb	r3, [r7, #31]
 8000730:	4a2f      	ldr	r2, [pc, #188]	; (80007f0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	889a      	ldrh	r2, [r3, #4]
 8000738:	8b3b      	ldrh	r3, [r7, #24]
 800073a:	4313      	orrs	r3, r2
 800073c:	833b      	strh	r3, [r7, #24]
          break;
 800073e:	e002      	b.n	8000746 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000740:	bf00      	nop
 8000742:	e000      	b.n	8000746 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000744:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	3301      	adds	r3, #1
 800074a:	77fb      	strb	r3, [r7, #31]
 800074c:	7ffb      	ldrb	r3, [r7, #31]
 800074e:	2b25      	cmp	r3, #37	; 0x25
 8000750:	d9c3      	bls.n	80006da <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800075e:	8bbb      	ldrh	r3, [r7, #28]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d014      	beq.n	800078e <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000764:	8bbb      	ldrh	r3, [r7, #28]
 8000766:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff3f 	bl	80005ec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff ff55 	bl	800061e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f003 ff24 	bl	80045c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000780:	8bbb      	ldrh	r3, [r7, #28]
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f004 f88d 	bl	80048a8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800078e:	8b7b      	ldrh	r3, [r7, #26]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d012      	beq.n	80007ba <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000794:	8b7b      	ldrh	r3, [r7, #26]
 8000796:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	2002      	movs	r0, #2
 800079a:	f7ff ff27 	bl	80005ec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff ff3d 	bl	800061e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <APPD_SetCPU2GpioConfig+0x144>)
 80007aa:	f003 ff0d 	bl	80045c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80007ae:	8b7b      	ldrh	r3, [r7, #26]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	4810      	ldr	r0, [pc, #64]	; (80007f8 <APPD_SetCPU2GpioConfig+0x144>)
 80007b6:	f004 f877 	bl	80048a8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80007ba:	8b3b      	ldrh	r3, [r7, #24]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d013      	beq.n	80007e8 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80007c0:	8b3b      	ldrh	r3, [r7, #24]
 80007c2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	2004      	movs	r0, #4
 80007c6:	f7ff ff11 	bl	80005ec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80007ca:	2004      	movs	r0, #4
 80007cc:	f7ff ff27 	bl	800061e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <APPD_SetCPU2GpioConfig+0x140>)
 80007d6:	f003 fef7 	bl	80045c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80007da:	8b3b      	ldrh	r3, [r7, #24]
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <APPD_SetCPU2GpioConfig+0x140>)
 80007e2:	f004 f861 	bl	80048a8 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
}
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	0800ce28 	.word	0x0800ce28
 80007f4:	48000800 	.word	0x48000800
 80007f8:	48000400 	.word	0x48000400

080007fc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000800:	bf00      	nop
}
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800080e:	f001 fc6f 	bl	80020f0 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000812:	bf00      	nop
}
 8000814:	bd80      	pop	{r7, pc}

08000816 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	460b      	mov	r3, r1
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000824:	897a      	ldrh	r2, [r7, #10]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68f9      	ldr	r1, [r7, #12]
 800082a:	2000      	movs	r0, #0
 800082c:	f001 faec 	bl	8001e08 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000830:	bf00      	nop
}
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <LL_C2_PWR_SetPowerMode+0x28>)
 8000842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000846:	f023 0207 	bic.w	r2, r3, #7
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <LL_C2_PWR_SetPowerMode+0x28>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4313      	orrs	r3, r2
 8000850:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	58000400 	.word	0x58000400

08000864 <LL_EXTI_EnableIT_32_63>:
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <LL_EXTI_EnableIT_32_63+0x24>)
 800086e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000872:	4905      	ldr	r1, [pc, #20]	; (8000888 <LL_EXTI_EnableIT_32_63+0x24>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4313      	orrs	r3, r2
 8000878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	58000800 	.word	0x58000800

0800088c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800089a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800089e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80008a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008b2:	4313      	orrs	r3, r2
 80008b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	cafecafe 	.word	0xcafecafe

080008c8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80008d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	608b      	str	r3, [r1, #8]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000948:	d101      	bne.n	800094e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800095e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800096e:	d101      	bne.n	8000974 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_AHB3_GRP1_EnableClock>:
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800098e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4313      	orrs	r3, r2
 8000996:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a4:	68fb      	ldr	r3, [r7, #12]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <LL_DBGMCU_GetDeviceID+0x18>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e0042000 	.word	0xe0042000

080009d0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <LL_DBGMCU_GetRevisionID+0x18>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	0c1b      	lsrs	r3, r3, #16
 80009da:	b29b      	uxth	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e0042000 	.word	0xe0042000

080009ec <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	041b      	lsls	r3, r3, #16
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	605a      	str	r2, [r3, #4]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	431a      	orrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	605a      	str	r2, [r3, #4]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	615a      	str	r2, [r3, #20]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	615a      	str	r2, [r3, #20]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	609a      	str	r2, [r3, #8]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	619a      	str	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <LL_LPM_EnableSleep+0x1c>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <LL_LPM_EnableSleep+0x1c>)
 8000aba:	f023 0304 	bic.w	r3, r3, #4
 8000abe:	6113      	str	r3, [r2, #16]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	22ca      	movs	r2, #202	; 0xca
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2253      	movs	r2, #83	; 0x53
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f023 0207 	bic.w	r2, r3, #7
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	609a      	str	r2, [r3, #8]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <MX_APPE_Config+0x18>)
 8000b36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b3a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000b3c:	f000 f830 	bl	8000ba0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000b40:	f000 f870 	bl	8000c24 <Config_HSE>

  return;
 8000b44:	bf00      	nop
}
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58004000 	.word	0x58004000

08000b4c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000b50:	f000 f87c 	bl	8000c4c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000b54:	f000 f894 	bl	8000c80 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000b58:	4909      	ldr	r1, [pc, #36]	; (8000b80 <MX_APPE_Init+0x34>)
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 ff3e 	bl	80019dc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000b60:	f7ff fd79 	bl	8000656 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000b64:	2101      	movs	r1, #1
 8000b66:	2001      	movs	r0, #1
 8000b68:	f009 fd48 	bl	800a5fc <UTIL_LPM_SetOffMode>

  Led_Init();
 8000b6c:	f000 f9ea 	bl	8000f44 <Led_Init>

  Button_Init();
 8000b70:	f000 f9f8 	bl	8000f64 <Button_Init>
  
  RxUART_Init();
 8000b74:	f000 fa86 	bl	8001084 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000b78:	f000 f890 	bl	8000c9c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b7c:	bf00      	nop
}
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200004e0 	.word	0x200004e0

08000b84 <Init_Smps>:

void Init_Smps(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000b88:	bf00      	nop
}
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <Init_Exti>:

void Init_Exti(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000b96:	2050      	movs	r0, #80	; 0x50
 8000b98:	f7ff fe64 	bl	8000864 <LL_EXTI_EnableIT_32_63>

  return;
 8000b9c:	bf00      	nop
}
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000ba4:	f000 f804 	bl	8000bb0 <Reset_BackupDomain>

  Reset_IPCC();
 8000ba8:	f000 f81a 	bl	8000be0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000bac:	bf00      	nop
}
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000bb4:	f7ff febe 	bl	8000934 <LL_RCC_IsActiveFlag_PINRST>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00d      	beq.n	8000bda <Reset_BackupDomain+0x2a>
 8000bbe:	f7ff fecc 	bl	800095a <LL_RCC_IsActiveFlag_SFTRST>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d108      	bne.n	8000bda <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000bc8:	f003 ff48 	bl	8004a5c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000bcc:	f003 ff46 	bl	8004a5c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000bd0:	f7ff fe8e 	bl	80008f0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000bd4:	f7ff fe9d 	bl	8000912 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
}
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000be4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000be8:	f7ff feca 	bl	8000980 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000bec:	213f      	movs	r1, #63	; 0x3f
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <Reset_IPCC+0x40>)
 8000bf0:	f7ff ff42 	bl	8000a78 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000bf4:	213f      	movs	r1, #63	; 0x3f
 8000bf6:	480a      	ldr	r0, [pc, #40]	; (8000c20 <Reset_IPCC+0x40>)
 8000bf8:	f7ff ff4c 	bl	8000a94 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000bfc:	213f      	movs	r1, #63	; 0x3f
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <Reset_IPCC+0x40>)
 8000c00:	f7ff fef4 	bl	80009ec <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000c04:	213f      	movs	r1, #63	; 0x3f
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <Reset_IPCC+0x40>)
 8000c08:	f7ff ff13 	bl	8000a32 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000c0c:	213f      	movs	r1, #63	; 0x3f
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <Reset_IPCC+0x40>)
 8000c10:	f7ff fefe 	bl	8000a10 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000c14:	213f      	movs	r1, #63	; 0x3f
 8000c16:	4802      	ldr	r0, [pc, #8]	; (8000c20 <Reset_IPCC+0x40>)
 8000c18:	f7ff ff1d 	bl	8000a56 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000c1c:	bf00      	nop
}
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58000c00 	.word	0x58000c00

08000c24 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f009 fcac 	bl	800a588 <OTP_Read>
 8000c30:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d005      	beq.n	8000c44 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	799b      	ldrb	r3, [r3, #6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe25 	bl	800088c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
}
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <System_Init>:

static void System_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000c50:	f7ff ff98 	bl	8000b84 <Init_Smps>

  Init_Exti();
 8000c54:	f7ff ff9d 	bl	8000b92 <Init_Exti>

  Init_Rtc();
 8000c58:	f000 f802 	bl	8000c60 <Init_Rtc>

  return;
 8000c5c:	bf00      	nop
}
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <Init_Rtc+0x1c>)
 8000c66:	f7ff ff40 	bl	8000aea <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <Init_Rtc+0x1c>)
 8000c6e:	f7ff ff4c 	bl	8000b0a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <Init_Rtc+0x1c>)
 8000c74:	f7ff ff2c 	bl	8000ad0 <LL_RTC_EnableWriteProtection>

  return;
 8000c78:	bf00      	nop
}
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40002800 	.word	0x40002800

08000c80 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c88:	f7ff fe1e 	bl	80008c8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c8c:	f009 fca4 	bl	800a5d8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c90:	2004      	movs	r0, #4
 8000c92:	f7ff fdd1 	bl	8000838 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000c96:	bf00      	nop
}
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000ca2:	f009 f979 	bl	8009f98 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <appe_Tl_Init+0x50>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2020      	movs	r0, #32
 8000cac:	f009 fdd2 	bl	800a854 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <appe_Tl_Init+0x54>)
 8000cb2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <appe_Tl_Init+0x58>)
 8000cb6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <appe_Tl_Init+0x5c>)
 8000cbe:	f008 ff27 	bl	8009b10 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <appe_Tl_Init+0x60>)
 8000cc4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <appe_Tl_Init+0x64>)
 8000cc8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <appe_Tl_Init+0x68>)
 8000ccc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000cce:	f240 533c 	movw	r3, #1340	; 0x53c
 8000cd2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f009 fa9f 	bl	800a21c <TL_MM_Init>

  TL_Enable();
 8000cde:	f009 f955 	bl	8009f8c <TL_Enable>

  return;
 8000ce2:	bf00      	nop
}
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	08009b49 	.word	0x08009b49
 8000cf0:	20030734 	.word	0x20030734
 8000cf4:	08000d09 	.word	0x08000d09
 8000cf8:	08000d21 	.word	0x08000d21
 8000cfc:	2003094c 	.word	0x2003094c
 8000d00:	20030840 	.word	0x20030840
 8000d04:	200301f8 	.word	0x200301f8

08000d08 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000d12:	bf00      	nop
}
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	330b      	adds	r3, #11
 8000d2e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000d3a:	2b07      	cmp	r3, #7
 8000d3c:	d860      	bhi.n	8000e00 <APPE_SysUserEvtRx+0xe0>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <APPE_SysUserEvtRx+0x24>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d65 	.word	0x08000d65
 8000d48:	08000da7 	.word	0x08000da7
 8000d4c:	08000db5 	.word	0x08000db5
 8000d50:	08000e01 	.word	0x08000e01
 8000d54:	08000dd1 	.word	0x08000dd1
 8000d58:	08000de1 	.word	0x08000de1
 8000d5c:	08000de9 	.word	0x08000de9
 8000d60:	08000df9 	.word	0x08000df9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f008 fe23 	bl	80099b4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000d6e:	7b3b      	ldrb	r3, [r7, #12]
 8000d70:	4619      	mov	r1, r3
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	461a      	mov	r2, r3
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	4824      	ldr	r0, [pc, #144]	; (8000e0c <APPE_SysUserEvtRx+0xec>)
 8000d7a:	f00a fbad 	bl	800b4d8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000d7e:	7c3b      	ldrb	r3, [r7, #16]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4823      	ldr	r0, [pc, #140]	; (8000e10 <APPE_SysUserEvtRx+0xf0>)
 8000d84:	f00a fba8 	bl	800b4d8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000d88:	7dbb      	ldrb	r3, [r7, #22]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	7dfb      	ldrb	r3, [r7, #23]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	7e3b      	ldrb	r3, [r7, #24]
 8000d92:	4820      	ldr	r0, [pc, #128]	; (8000e14 <APPE_SysUserEvtRx+0xf4>)
 8000d94:	f00a fba0 	bl	800b4d8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000d98:	481f      	ldr	r0, [pc, #124]	; (8000e18 <APPE_SysUserEvtRx+0xf8>)
 8000d9a:	f00a fb9d 	bl	800b4d8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f870 	bl	8000e84 <APPE_SysEvtReadyProcessing>
    break;
 8000da4:	e02d      	b.n	8000e02 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000da6:	481d      	ldr	r0, [pc, #116]	; (8000e1c <APPE_SysUserEvtRx+0xfc>)
 8000da8:	f00a fb96 	bl	800b4d8 <iprintf>
    APPE_SysEvtError(pPayload);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f843 	bl	8000e38 <APPE_SysEvtError>
    break;
 8000db2:	e026      	b.n	8000e02 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000db4:	481a      	ldr	r0, [pc, #104]	; (8000e20 <APPE_SysUserEvtRx+0x100>)
 8000db6:	f00a fc15 	bl	800b5e4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000dbe:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <APPE_SysUserEvtRx+0x104>)
 8000dca:	f00a fb85 	bl	800b4d8 <iprintf>
    break;
 8000dce:	e018      	b.n	8000e02 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4813      	ldr	r0, [pc, #76]	; (8000e28 <APPE_SysUserEvtRx+0x108>)
 8000dda:	f00a fb7d 	bl	800b4d8 <iprintf>
    break;
 8000dde:	e010      	b.n	8000e02 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000de0:	4812      	ldr	r0, [pc, #72]	; (8000e2c <APPE_SysUserEvtRx+0x10c>)
 8000de2:	f00a fb79 	bl	800b4d8 <iprintf>
    break;
 8000de6:	e00c      	b.n	8000e02 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4619      	mov	r1, r3
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <APPE_SysUserEvtRx+0x110>)
 8000df2:	f00a fb71 	bl	800b4d8 <iprintf>
    break;
 8000df6:	e004      	b.n	8000e02 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <APPE_SysUserEvtRx+0x114>)
 8000dfa:	f00a fb6d 	bl	800b4d8 <iprintf>
    break;
 8000dfe:	e000      	b.n	8000e02 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000e00:	bf00      	nop
  }

  return;
 8000e02:	bf00      	nop
}
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800c514 	.word	0x0800c514
 8000e10:	0800c538 	.word	0x0800c538
 8000e14:	0800c554 	.word	0x0800c554
 8000e18:	0800c56c 	.word	0x0800c56c
 8000e1c:	0800c58c 	.word	0x0800c58c
 8000e20:	0800c5b0 	.word	0x0800c5b0
 8000e24:	0800c600 	.word	0x0800c600
 8000e28:	0800c628 	.word	0x0800c628
 8000e2c:	0800c664 	.word	0x0800c664
 8000e30:	0800c688 	.word	0x0800c688
 8000e34:	0800c6c4 	.word	0x0800c6c4

08000e38 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	330b      	adds	r3, #11
 8000e46:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4619      	mov	r1, r3
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <APPE_SysEvtError+0x40>)
 8000e56:	f00a fb3f 	bl	800b4d8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <APPE_SysEvtError+0x44>)
 8000e64:	f00a fbbe 	bl	800b5e4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000e68:	e003      	b.n	8000e72 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <APPE_SysEvtError+0x48>)
 8000e6c:	f00a fbba 	bl	800b5e4 <puts>
  return;
 8000e70:	bf00      	nop
}
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	0800c6e8 	.word	0x0800c6e8
 8000e7c:	0800c718 	.word	0x0800c718
 8000e80:	0800c754 	.word	0x0800c754

08000e84 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	330b      	adds	r3, #11
 8000ea8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3302      	adds	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d128      	bne.n	8000f0a <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000eb8:	481d      	ldr	r0, [pc, #116]	; (8000f30 <APPE_SysEvtReadyProcessing+0xac>)
 8000eba:	f00a fb93 	bl	800b5e4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000ebe:	f7ff fbdd 	bl	800067c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ec6:	237f      	movs	r3, #127	; 0x7f
 8000ec8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000eca:	f7ff fd81 	bl	80009d0 <LL_DBGMCU_GetRevisionID>
 8000ece:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <APPE_SysEvtReadyProcessing+0xb0>)
 8000ed4:	f00a fb00 	bl	800b4d8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000ede:	f7ff fd69 	bl	80009b4 <LL_DBGMCU_GetDeviceID>
 8000ee2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000ee4:	6a39      	ldr	r1, [r7, #32]
 8000ee6:	4814      	ldr	r0, [pc, #80]	; (8000f38 <APPE_SysEvtReadyProcessing+0xb4>)
 8000ee8:	f00a faf6 	bl	800b4d8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f008 fd46 	bl	8009988 <SHCI_C2_Config>

    APP_BLE_Init();
 8000efc:	f001 fce6 	bl	80028cc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000f00:	2100      	movs	r1, #0
 8000f02:	2001      	movs	r0, #1
 8000f04:	f009 fb7a 	bl	800a5fc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000f08:	e00e      	b.n	8000f28 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d106      	bne.n	8000f20 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <APPE_SysEvtReadyProcessing+0xb8>)
 8000f14:	f00a fae0 	bl	800b4d8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
  return;
 8000f1e:	e003      	b.n	8000f28 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <APPE_SysEvtReadyProcessing+0xbc>)
 8000f22:	f00a fad9 	bl	800b4d8 <iprintf>
  return;
 8000f26:	bf00      	nop
}
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800c78c 	.word	0x0800c78c
 8000f34:	0800c7a8 	.word	0x0800c7a8
 8000f38:	0800c7cc 	.word	0x0800c7cc
 8000f3c:	0800c7ec 	.word	0x0800c7ec
 8000f40:	0800c820 	.word	0x0800c820

08000f44 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f002 fac7 	bl	80034dc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f002 fac4 	bl	80034dc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f002 fac1 	bl	80034dc <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f002 faf8 	bl	8003550 <BSP_LED_On>
#endif

  return;
 8000f60:	bf00      	nop
}
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <Button_Init>:

static void Button_Init( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f68:	2101      	movs	r1, #1
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f002 fb0a 	bl	8003584 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f70:	2101      	movs	r1, #1
 8000f72:	2001      	movs	r0, #1
 8000f74:	f002 fb06 	bl	8003584 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f002 fb02 	bl	8003584 <BSP_PB_Init>
#endif

  return;
 8000f80:	bf00      	nop
}
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f002 fc4e 	bl	800382c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f9c:	d00a      	beq.n	8000fb4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000f9e:	f002 fc5d 	bl	800385c <HAL_GetTickFreq>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fac:	e002      	b.n	8000fb4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000fae:	f7ff fd7f 	bl	8000ab0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000fb2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000fb4:	f002 fc3a 	bl	800382c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f4      	bhi.n	8000fae <HAL_Delay+0x2a>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd6:	f009 fb41 	bl	800a65c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000fe2:	bf00      	nop
}
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ffa:	f009 fb2f 	bl	800a65c <UTIL_SEQ_Run>

  return;
 8000ffe:	bf00      	nop
}
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800100e:	2100      	movs	r1, #0
 8001010:	2020      	movs	r0, #32
 8001012:	f009 fc41 	bl	800a898 <UTIL_SEQ_SetTask>
  return;
 8001016:	bf00      	nop
}
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001026:	2002      	movs	r0, #2
 8001028:	f009 fca2 	bl	800a970 <UTIL_SEQ_SetEvt>
  return;
 800102c:	bf00      	nop
}
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800103c:	2002      	movs	r0, #2
 800103e:	f009 fcb7 	bl	800a9b0 <UTIL_SEQ_WaitEvt>
  return;
 8001042:	bf00      	nop
}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	2b10      	cmp	r3, #16
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_EXTI_Callback+0x1e>
 800105a:	2b10      	cmp	r3, #16
 800105c:	dc0d      	bgt.n	800107a <HAL_GPIO_EXTI_Callback+0x30>
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <HAL_GPIO_EXTI_Callback+0x24>
 8001062:	2b02      	cmp	r3, #2
 8001064:	d006      	beq.n	8001074 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001066:	e008      	b.n	800107a <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8001068:	f001 fcb3 	bl	80029d2 <APP_BLE_Key_Button1_Action>
      break; 
 800106c:	e006      	b.n	800107c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800106e:	f001 fcb7 	bl	80029e0 <APP_BLE_Key_Button2_Action>
      break; 
 8001072:	e003      	b.n	800107c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001074:	f001 fcbb 	bl	80029ee <APP_BLE_Key_Button3_Action>
      break;
 8001078:	e000      	b.n	800107c <HAL_GPIO_EXTI_Callback+0x32>
      break;
 800107a:	bf00      	nop

  }
  return;
 800107c:	bf00      	nop
}
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <RxUART_Init+0x14>)
 800108a:	2201      	movs	r2, #1
 800108c:	4903      	ldr	r1, [pc, #12]	; (800109c <RxUART_Init+0x18>)
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fe96 	bl	8001dc0 <HW_UART_Receive_IT>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	080010a1 	.word	0x080010a1
 800109c:	20000108 	.word	0x20000108

080010a0 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <RxCpltCallback+0x5c>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	2bff      	cmp	r3, #255	; 0xff
 80010aa:	d81e      	bhi.n	80010ea <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <RxCpltCallback+0x60>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b0d      	cmp	r3, #13
 80010b2:	d10f      	bne.n	80010d4 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <RxCpltCallback+0x64>)
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <RxCpltCallback+0x68>)
 80010b8:	f00a fa0e 	bl	800b4d8 <iprintf>

      UartCmdExecute();
 80010bc:	f000 f828 	bl	8001110 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <RxCpltCallback+0x5c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 80010c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ca:	2100      	movs	r1, #0
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <RxCpltCallback+0x64>)
 80010ce:	f00a f9fb 	bl	800b4c8 <memset>
 80010d2:	e00a      	b.n	80010ea <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <RxCpltCallback+0x5c>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	b291      	uxth	r1, r2
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <RxCpltCallback+0x5c>)
 80010de:	8011      	strh	r1, [r2, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <RxCpltCallback+0x60>)
 80010e4:	7819      	ldrb	r1, [r3, #0]
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <RxCpltCallback+0x64>)
 80010e8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <RxCpltCallback+0x6c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	4904      	ldr	r1, [pc, #16]	; (8001100 <RxCpltCallback+0x60>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 fe65 	bl	8001dc0 <HW_UART_Receive_IT>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000210 	.word	0x20000210
 8001100:	20000108 	.word	0x20000108
 8001104:	20000110 	.word	0x20000110
 8001108:	0800c854 	.word	0x0800c854
 800110c:	080010a1 	.word	0x080010a1

08001110 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001114:	491c      	ldr	r1, [pc, #112]	; (8001188 <UartCmdExecute+0x78>)
 8001116:	481d      	ldr	r0, [pc, #116]	; (800118c <UartCmdExecute+0x7c>)
 8001118:	f7ff f832 	bl	8000180 <strcmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <UartCmdExecute+0x80>)
 8001124:	f00a fa5e 	bl	800b5e4 <puts>
    exti_handle.Line = EXTI_LINE_4;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <UartCmdExecute+0x84>)
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <UartCmdExecute+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <UartCmdExecute+0x84>)
 8001130:	f003 f8b8 	bl	80042a4 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001134:	e026      	b.n	8001184 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001136:	4919      	ldr	r1, [pc, #100]	; (800119c <UartCmdExecute+0x8c>)
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <UartCmdExecute+0x7c>)
 800113a:	f7ff f821 	bl	8000180 <strcmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8001144:	4816      	ldr	r0, [pc, #88]	; (80011a0 <UartCmdExecute+0x90>)
 8001146:	f00a fa4d 	bl	800b5e4 <puts>
    exti_handle.Line = EXTI_LINE_0;
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <UartCmdExecute+0x84>)
 800114c:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001150:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <UartCmdExecute+0x84>)
 8001154:	f003 f8a6 	bl	80042a4 <HAL_EXTI_GenerateSWI>
}
 8001158:	e014      	b.n	8001184 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 800115a:	4912      	ldr	r1, [pc, #72]	; (80011a4 <UartCmdExecute+0x94>)
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <UartCmdExecute+0x7c>)
 800115e:	f7ff f80f 	bl	8000180 <strcmp>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001168:	480f      	ldr	r0, [pc, #60]	; (80011a8 <UartCmdExecute+0x98>)
 800116a:	f00a fa3b 	bl	800b5e4 <puts>
    exti_handle.Line = EXTI_LINE_1;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <UartCmdExecute+0x84>)
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <UartCmdExecute+0x9c>)
 8001172:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <UartCmdExecute+0x84>)
 8001176:	f003 f895 	bl	80042a4 <HAL_EXTI_GenerateSWI>
}
 800117a:	e003      	b.n	8001184 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 800117c:	4903      	ldr	r1, [pc, #12]	; (800118c <UartCmdExecute+0x7c>)
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <UartCmdExecute+0xa0>)
 8001180:	f00a f9aa 	bl	800b4d8 <iprintf>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800c864 	.word	0x0800c864
 800118c:	20000110 	.word	0x20000110
 8001190:	0800c868 	.word	0x0800c868
 8001194:	20000100 	.word	0x20000100
 8001198:	16000004 	.word	0x16000004
 800119c:	0800c870 	.word	0x0800c870
 80011a0:	0800c874 	.word	0x0800c874
 80011a4:	0800c87c 	.word	0x0800c87c
 80011a8:	0800c880 	.word	0x0800c880
 80011ac:	16000001 	.word	0x16000001
 80011b0:	0800c888 	.word	0x0800c888

080011b4 <LL_EXTI_EnableIT_0_31>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80011be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80011c2:	4905      	ldr	r1, [pc, #20]	; (80011d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	58000800 	.word	0x58000800

080011dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4904      	ldr	r1, [pc, #16]	; (80011fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]

}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	58000800 	.word	0x58000800

08001200 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <ReadRtcSsrValue+0x3c>)
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	b29b      	uxth	r3, r3
 800120c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <ReadRtcSsrValue+0x3c>)
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	b29b      	uxth	r3, r3
 8001214:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001216:	e005      	b.n	8001224 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <ReadRtcSsrValue+0x3c>)
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	b29b      	uxth	r3, r3
 8001222:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d1f5      	bne.n	8001218 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800122c:	683b      	ldr	r3, [r7, #0]
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40002800 	.word	0x40002800

08001240 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001250:	79ba      	ldrb	r2, [r7, #6]
 8001252:	491d      	ldr	r1, [pc, #116]	; (80012c8 <LinkTimerAfter+0x88>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3315      	adds	r3, #21
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b06      	cmp	r3, #6
 8001268:	d009      	beq.n	800127e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	4916      	ldr	r1, [pc, #88]	; (80012c8 <LinkTimerAfter+0x88>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3314      	adds	r3, #20
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	4911      	ldr	r1, [pc, #68]	; (80012c8 <LinkTimerAfter+0x88>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3315      	adds	r3, #21
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <LinkTimerAfter+0x88>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	440b      	add	r3, r1
 80012a0:	3314      	adds	r3, #20
 80012a2:	79ba      	ldrb	r2, [r7, #6]
 80012a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80012a6:	79ba      	ldrb	r2, [r7, #6]
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <LinkTimerAfter+0x88>)
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	3315      	adds	r3, #21
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	701a      	strb	r2, [r3, #0]

  return;
 80012ba:	bf00      	nop
}
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000214 	.word	0x20000214

080012cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <LinkTimerBefore+0xb8>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	79ba      	ldrb	r2, [r7, #6]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d032      	beq.n	800134e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80012e8:	79ba      	ldrb	r2, [r7, #6]
 80012ea:	4927      	ldr	r1, [pc, #156]	; (8001388 <LinkTimerBefore+0xbc>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	3314      	adds	r3, #20
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	4922      	ldr	r1, [pc, #136]	; (8001388 <LinkTimerBefore+0xbc>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3315      	adds	r3, #21
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	491d      	ldr	r1, [pc, #116]	; (8001388 <LinkTimerBefore+0xbc>)
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	3315      	adds	r3, #21
 8001320:	79ba      	ldrb	r2, [r7, #6]
 8001322:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4918      	ldr	r1, [pc, #96]	; (8001388 <LinkTimerBefore+0xbc>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3314      	adds	r3, #20
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001338:	79ba      	ldrb	r2, [r7, #6]
 800133a:	4913      	ldr	r1, [pc, #76]	; (8001388 <LinkTimerBefore+0xbc>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	3314      	adds	r3, #20
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800134c:	e014      	b.n	8001378 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800134e:	79fa      	ldrb	r2, [r7, #7]
 8001350:	490d      	ldr	r1, [pc, #52]	; (8001388 <LinkTimerBefore+0xbc>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3315      	adds	r3, #21
 800135e:	79ba      	ldrb	r2, [r7, #6]
 8001360:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001362:	79ba      	ldrb	r2, [r7, #6]
 8001364:	4908      	ldr	r1, [pc, #32]	; (8001388 <LinkTimerBefore+0xbc>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3314      	adds	r3, #20
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	701a      	strb	r2, [r3, #0]
  return;
 8001376:	bf00      	nop
}
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200002a4 	.word	0x200002a4
 8001388:	20000214 	.word	0x20000214

0800138c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001396:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <linkTimer+0x144>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b06      	cmp	r3, #6
 800139e:	d118      	bne.n	80013d2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013a0:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <linkTimer+0x144>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <linkTimer+0x148>)
 80013a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80013aa:	4a49      	ldr	r2, [pc, #292]	; (80014d0 <linkTimer+0x144>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	4949      	ldr	r1, [pc, #292]	; (80014d8 <linkTimer+0x14c>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3315      	adds	r3, #21
 80013c0:	2206      	movs	r2, #6
 80013c2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <linkTimer+0x150>)
 80013c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	81fb      	strh	r3, [r7, #14]
 80013d0:	e078      	b.n	80014c4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80013d2:	f000 f909 	bl	80015e8 <ReturnTimeElapsed>
 80013d6:	4603      	mov	r3, r0
 80013d8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80013da:	79fa      	ldrb	r2, [r7, #7]
 80013dc:	493e      	ldr	r1, [pc, #248]	; (80014d8 <linkTimer+0x14c>)
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3308      	adds	r3, #8
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	4419      	add	r1, r3
 80013f2:	4839      	ldr	r0, [pc, #228]	; (80014d8 <linkTimer+0x14c>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4403      	add	r3, r0
 80013fe:	3308      	adds	r3, #8
 8001400:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001402:	79fa      	ldrb	r2, [r7, #7]
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <linkTimer+0x14c>)
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3308      	adds	r3, #8
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <linkTimer+0x144>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	4a2e      	ldr	r2, [pc, #184]	; (80014d8 <linkTimer+0x14c>)
 8001420:	460b      	mov	r3, r1
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	440b      	add	r3, r1
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	3308      	adds	r3, #8
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	429a      	cmp	r2, r3
 8001432:	d337      	bcc.n	80014a4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <linkTimer+0x144>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800143a:	7b7a      	ldrb	r2, [r7, #13]
 800143c:	4926      	ldr	r1, [pc, #152]	; (80014d8 <linkTimer+0x14c>)
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	3315      	adds	r3, #21
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800144e:	e013      	b.n	8001478 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001450:	7b7a      	ldrb	r2, [r7, #13]
 8001452:	4921      	ldr	r1, [pc, #132]	; (80014d8 <linkTimer+0x14c>)
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	3315      	adds	r3, #21
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001464:	7b7a      	ldrb	r2, [r7, #13]
 8001466:	491c      	ldr	r1, [pc, #112]	; (80014d8 <linkTimer+0x14c>)
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	3315      	adds	r3, #21
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001478:	7b3b      	ldrb	r3, [r7, #12]
 800147a:	2b06      	cmp	r3, #6
 800147c:	d00b      	beq.n	8001496 <linkTimer+0x10a>
 800147e:	7b3a      	ldrb	r2, [r7, #12]
 8001480:	4915      	ldr	r1, [pc, #84]	; (80014d8 <linkTimer+0x14c>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	3308      	adds	r3, #8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	429a      	cmp	r2, r3
 8001494:	d2dc      	bcs.n	8001450 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001496:	7b7a      	ldrb	r2, [r7, #13]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fecf 	bl	8001240 <LinkTimerAfter>
 80014a2:	e00f      	b.n	80014c4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <linkTimer+0x144>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff0c 	bl	80012cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <linkTimer+0x144>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <linkTimer+0x148>)
 80014bc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <linkTimer+0x144>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80014c4:	89fb      	ldrh	r3, [r7, #14]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002a4 	.word	0x200002a4
 80014d4:	200002a5 	.word	0x200002a5
 80014d8:	20000214 	.word	0x20000214
 80014dc:	200002a8 	.word	0x200002a8

080014e0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	460a      	mov	r2, r1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <UnlinkTimer+0xf8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d111      	bne.n	8001520 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <UnlinkTimer+0xf8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <UnlinkTimer+0xfc>)
 8001504:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	4935      	ldr	r1, [pc, #212]	; (80015e0 <UnlinkTimer+0x100>)
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	3315      	adds	r3, #21
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <UnlinkTimer+0xf8>)
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e03e      	b.n	800159e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001520:	79fa      	ldrb	r2, [r7, #7]
 8001522:	492f      	ldr	r1, [pc, #188]	; (80015e0 <UnlinkTimer+0x100>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	3314      	adds	r3, #20
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	492a      	ldr	r1, [pc, #168]	; (80015e0 <UnlinkTimer+0x100>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3315      	adds	r3, #21
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001548:	79f9      	ldrb	r1, [r7, #7]
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	4824      	ldr	r0, [pc, #144]	; (80015e0 <UnlinkTimer+0x100>)
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4403      	add	r3, r0
 8001558:	3315      	adds	r3, #21
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2d8      	uxtb	r0, r3
 800155e:	4920      	ldr	r1, [pc, #128]	; (80015e0 <UnlinkTimer+0x100>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3315      	adds	r3, #21
 800156c:	4602      	mov	r2, r0
 800156e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	2b06      	cmp	r3, #6
 8001574:	d013      	beq.n	800159e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001576:	79f9      	ldrb	r1, [r7, #7]
 8001578:	7bba      	ldrb	r2, [r7, #14]
 800157a:	4819      	ldr	r0, [pc, #100]	; (80015e0 <UnlinkTimer+0x100>)
 800157c:	460b      	mov	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	440b      	add	r3, r1
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4403      	add	r3, r0
 8001586:	3314      	adds	r3, #20
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2d8      	uxtb	r0, r3
 800158c:	4914      	ldr	r1, [pc, #80]	; (80015e0 <UnlinkTimer+0x100>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3314      	adds	r3, #20
 800159a:	4602      	mov	r2, r0
 800159c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	490f      	ldr	r1, [pc, #60]	; (80015e0 <UnlinkTimer+0x100>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	330c      	adds	r3, #12
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <UnlinkTimer+0xf8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b06      	cmp	r3, #6
 80015ba:	d107      	bne.n	80015cc <UnlinkTimer+0xec>
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d104      	bne.n	80015cc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <UnlinkTimer+0x104>)
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c8:	601a      	str	r2, [r3, #0]
  }

  return;
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
}
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	200002a4 	.word	0x200002a4
 80015dc:	200002a5 	.word	0x200002a5
 80015e0:	20000214 	.word	0x20000214
 80015e4:	200002a8 	.word	0x200002a8

080015e8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <ReturnTimeElapsed+0x70>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f6:	d026      	beq.n	8001646 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80015f8:	f7ff fe02 	bl	8001200 <ReadRtcSsrValue>
 80015fc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <ReturnTimeElapsed+0x70>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	d805      	bhi.n	8001614 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <ReturnTimeElapsed+0x70>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	e00a      	b.n	800162a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <ReturnTimeElapsed+0x74>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <ReturnTimeElapsed+0x70>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <ReturnTimeElapsed+0x78>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <ReturnTimeElapsed+0x7c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	40d3      	lsrs	r3, r2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	e001      	b.n	800164a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	b29b      	uxth	r3, r3
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200002a8 	.word	0x200002a8
 800165c:	200002b0 	.word	0x200002b0
 8001660:	200002ae 	.word	0x200002ae
 8001664:	200002ad 	.word	0x200002ad

08001668 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d108      	bne.n	800168a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001678:	f7ff fdc2 	bl	8001200 <ReadRtcSsrValue>
 800167c:	4603      	mov	r3, r0
 800167e:	4a21      	ldr	r2, [pc, #132]	; (8001704 <RestartWakeupCounter+0x9c>)
 8001680:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001682:	2003      	movs	r0, #3
 8001684:	f002 fa7f 	bl	8003b86 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001688:	e039      	b.n	80016fe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d803      	bhi.n	8001698 <RestartWakeupCounter+0x30>
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <RestartWakeupCounter+0xa0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d002      	beq.n	800169e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	3b01      	subs	r3, #1
 800169c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800169e:	bf00      	nop
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <RestartWakeupCounter+0xa4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f8      	beq.n	80016a0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <RestartWakeupCounter+0xa4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <RestartWakeupCounter+0xa4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <RestartWakeupCounter+0xa8>)
 80016c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80016c8:	2003      	movs	r0, #3
 80016ca:	f002 fa6a 	bl	8003ba2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <RestartWakeupCounter+0xac>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	0c1b      	lsrs	r3, r3, #16
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	88fa      	ldrh	r2, [r7, #6]
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <RestartWakeupCounter+0xac>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80016de:	f7ff fd8f 	bl	8001200 <ReadRtcSsrValue>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <RestartWakeupCounter+0x9c>)
 80016e6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <RestartWakeupCounter+0xa4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <RestartWakeupCounter+0xa4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016f6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80016f8:	f3af 8000 	nop.w
  return ;
 80016fc:	bf00      	nop
}
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002a8 	.word	0x200002a8
 8001708:	200002ad 	.word	0x200002ad
 800170c:	200004e0 	.word	0x200004e0
 8001710:	58000800 	.word	0x58000800
 8001714:	40002800 	.word	0x40002800

08001718 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <RescheduleTimerList+0x11c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172a:	d107      	bne.n	800173c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800172c:	bf00      	nop
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <RescheduleTimerList+0x120>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f8      	bne.n	800172e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800173c:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <RescheduleTimerList+0x120>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <RescheduleTimerList+0x120>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800174a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <RescheduleTimerList+0x124>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	493a      	ldr	r1, [pc, #232]	; (8001840 <RescheduleTimerList+0x128>)
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3308      	adds	r3, #8
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001766:	f7ff ff3f 	bl	80015e8 <ReturnTimeElapsed>
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	d205      	bcs.n	8001782 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800177a:	4b32      	ldr	r3, [pc, #200]	; (8001844 <RescheduleTimerList+0x12c>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e04d      	b.n	800181e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	4a30      	ldr	r2, [pc, #192]	; (8001848 <RescheduleTimerList+0x130>)
 8001786:	8812      	ldrh	r2, [r2, #0]
 8001788:	b292      	uxth	r2, r2
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4293      	cmp	r3, r2
 8001792:	d906      	bls.n	80017a2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <RescheduleTimerList+0x130>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <RescheduleTimerList+0x12c>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e03d      	b.n	800181e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <RescheduleTimerList+0x12c>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017b2:	e034      	b.n	800181e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	4922      	ldr	r1, [pc, #136]	; (8001840 <RescheduleTimerList+0x128>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3308      	adds	r3, #8
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d20a      	bcs.n	80017e2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	491c      	ldr	r1, [pc, #112]	; (8001840 <RescheduleTimerList+0x128>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3308      	adds	r3, #8
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e013      	b.n	800180a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	4916      	ldr	r1, [pc, #88]	; (8001840 <RescheduleTimerList+0x128>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3308      	adds	r3, #8
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	1ac9      	subs	r1, r1, r3
 80017fa:	4811      	ldr	r0, [pc, #68]	; (8001840 <RescheduleTimerList+0x128>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4403      	add	r3, r0
 8001806:	3308      	adds	r3, #8
 8001808:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <RescheduleTimerList+0x128>)
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3315      	adds	r3, #21
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b06      	cmp	r3, #6
 8001822:	d1c7      	bne.n	80017b4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001824:	89bb      	ldrh	r3, [r7, #12]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff1e 	bl	8001668 <RestartWakeupCounter>

  return ;
 800182c:	bf00      	nop
}
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40002800 	.word	0x40002800
 8001838:	200004e0 	.word	0x200004e0
 800183c:	200002a4 	.word	0x200002a4
 8001840:	20000214 	.word	0x20000214
 8001844:	200002ac 	.word	0x200002ac
 8001848:	200002b2 	.word	0x200002b2

0800184c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001852:	f3ef 8310 	mrs	r3, PRIMASK
 8001856:	617b      	str	r3, [r7, #20]
  return(result);
 8001858:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	22ca      	movs	r2, #202	; 0xca
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2253      	movs	r2, #83	; 0x53
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001870:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001880:	4b52      	ldr	r3, [pc, #328]	; (80019cc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001888:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800188c:	4950      	ldr	r1, [pc, #320]	; (80019d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	330c      	adds	r3, #12
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d16e      	bne.n	8001980 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80018a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018a6:	494a      	ldr	r1, [pc, #296]	; (80019d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80018b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018ba:	4945      	ldr	r1, [pc, #276]	; (80019d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3310      	adds	r3, #16
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80018cc:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d04c      	beq.n	8001970 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80018d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018da:	493d      	ldr	r1, [pc, #244]	; (80019d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	330d      	adds	r3, #13
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d124      	bne.n	800193a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80018f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018f4:	2101      	movs	r1, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fdf2 	bl	80014e0 <UnlinkTimer>
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f383 8810 	msr	PRIMASK, r3
}
 8001906:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001908:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800190c:	4930      	ldr	r1, [pc, #192]	; (80019d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3304      	adds	r3, #4
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f9b8 	bl	8001c98 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	22ca      	movs	r2, #202	; 0xca
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2253      	movs	r2, #83	; 0x53
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
 8001938:	e012      	b.n	8001960 <HW_TS_RTC_Wakeup_Handler+0x114>
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f383 8810 	msr	PRIMASK, r3
}
 8001944:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f920 	bl	8001b90 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	22ca      	movs	r2, #202	; 0xca
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2253      	movs	r2, #83	; 0x53
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	4619      	mov	r1, r3
 8001968:	69b8      	ldr	r0, [r7, #24]
 800196a:	f000 fa1b 	bl	8001da4 <HW_TS_RTC_Int_AppNot>
 800196e:	e022      	b.n	80019b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001970:	f7ff fed2 	bl	8001718 <RescheduleTimerList>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f383 8810 	msr	PRIMASK, r3
}
 800197e:	e01a      	b.n	80019b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001980:	bf00      	nop
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f8      	beq.n	8001982 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f383 8810 	msr	PRIMASK, r3
}
 80019b4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80019be:	bf00      	nop
}
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200004e0 	.word	0x200004e0
 80019cc:	200002a4 	.word	0x200002a4
 80019d0:	20000214 	.word	0x20000214
 80019d4:	200002ac 	.word	0x200002ac
 80019d8:	58000800 	.word	0x58000800

080019dc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80019e8:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HW_TS_Init+0x188>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	22ca      	movs	r2, #202	; 0xca
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
 80019f0:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <HW_TS_Init+0x188>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2253      	movs	r2, #83	; 0x53
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80019f8:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <HW_TS_Init+0x18c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a5a      	ldr	r2, [pc, #360]	; (8001b68 <HW_TS_Init+0x18c>)
 80019fe:	f043 0320 	orr.w	r3, r3, #32
 8001a02:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001a04:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HW_TS_Init+0x18c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f1c3 0304 	rsb	r3, r3, #4
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <HW_TS_Init+0x190>)
 8001a18:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HW_TS_Init+0x18c>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a22:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001a26:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	fa92 f2a2 	rbit	r2, r2
 8001a2e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d101      	bne.n	8001a3e <HW_TS_Init+0x62>
  {
    return 32U;
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	e003      	b.n	8001a46 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	fab2 f282 	clz	r2, r2
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	40d3      	lsrs	r3, r2
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <HW_TS_Init+0x194>)
 8001a50:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001a52:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <HW_TS_Init+0x18c>)
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HW_TS_Init+0x198>)
 8001a64:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HW_TS_Init+0x198>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	4a40      	ldr	r2, [pc, #256]	; (8001b70 <HW_TS_Init+0x194>)
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a78:	4a3c      	ldr	r2, [pc, #240]	; (8001b6c <HW_TS_Init+0x190>)
 8001a7a:	7812      	ldrb	r2, [r2, #0]
 8001a7c:	40d3      	lsrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d904      	bls.n	8001a94 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HW_TS_Init+0x19c>)
 8001a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	e003      	b.n	8001a9c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HW_TS_Init+0x19c>)
 8001a9a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001aa0:	f7ff fb9c 	bl	80011dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001aa4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001aa8:	f7ff fb84 	bl	80011b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d13d      	bne.n	8001b2e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HW_TS_Init+0x1a0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HW_TS_Init+0x1a4>)
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abe:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
 8001ac4:	e00c      	b.n	8001ae0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001ac6:	7ffa      	ldrb	r2, [r7, #31]
 8001ac8:	492e      	ldr	r1, [pc, #184]	; (8001b84 <HW_TS_Init+0x1a8>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	3301      	adds	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]
 8001ae0:	7ffb      	ldrb	r3, [r7, #31]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d9ef      	bls.n	8001ac6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HW_TS_Init+0x1ac>)
 8001ae8:	2206      	movs	r2, #6
 8001aea:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HW_TS_Init+0x188>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HW_TS_Init+0x188>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HW_TS_Init+0x188>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HW_TS_Init+0x188>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b0c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HW_TS_Init+0x1b0>)
 8001b10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b14:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001b16:	2003      	movs	r0, #3
 8001b18:	f002 f843 	bl	8003ba2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HW_TS_Init+0x188>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HW_TS_Init+0x188>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e009      	b.n	8001b42 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HW_TS_Init+0x188>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f002 f822 	bl	8003b86 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HW_TS_Init+0x188>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	22ff      	movs	r2, #255	; 0xff
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	2003      	movs	r0, #3
 8001b50:	f001 ffd7 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b54:	2003      	movs	r0, #3
 8001b56:	f001 ffee 	bl	8003b36 <HAL_NVIC_EnableIRQ>

  return;
 8001b5a:	bf00      	nop
}
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200004e0 	.word	0x200004e0
 8001b68:	40002800 	.word	0x40002800
 8001b6c:	200002ad 	.word	0x200002ad
 8001b70:	200002ae 	.word	0x200002ae
 8001b74:	200002b0 	.word	0x200002b0
 8001b78:	200002b2 	.word	0x200002b2
 8001b7c:	200002ac 	.word	0x200002ac
 8001b80:	200002a8 	.word	0x200002a8
 8001b84:	20000214 	.word	0x20000214
 8001b88:	200002a4 	.word	0x200002a4
 8001b8c:	58000800 	.word	0x58000800

08001b90 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8001b9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ba2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f001 ffd2 	bl	8003b52 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	22ca      	movs	r2, #202	; 0xca
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2253      	movs	r2, #83	; 0x53
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	4930      	ldr	r1, [pc, #192]	; (8001c84 <HW_TS_Stop+0xf4>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	330c      	adds	r3, #12
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d142      	bne.n	8001c5c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fc80 	bl	80014e0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HW_TS_Stop+0xf8>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001be6:	7cfb      	ldrb	r3, [r7, #19]
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d12f      	bne.n	8001c4c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HW_TS_Stop+0xfc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf8:	d107      	bne.n	8001c0a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001bfa:	bf00      	nop
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f8      	bne.n	8001bfc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c18:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c1a:	bf00      	nop
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f8      	beq.n	8001c1c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c3a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HW_TS_Stop+0x100>)
 8001c3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c42:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001c44:	2003      	movs	r0, #3
 8001c46:	f001 ffac 	bl	8003ba2 <HAL_NVIC_ClearPendingIRQ>
 8001c4a:	e007      	b.n	8001c5c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HW_TS_Stop+0x104>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	7cfa      	ldrb	r2, [r7, #19]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001c58:	f7ff fd5e 	bl	8001718 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HW_TS_Stop+0xf0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c64:	2003      	movs	r0, #3
 8001c66:	f001 ff66 	bl	8003b36 <HAL_NVIC_EnableIRQ>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f383 8810 	msr	PRIMASK, r3
}
 8001c74:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c76:	bf00      	nop
}
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200004e0 	.word	0x200004e0
 8001c84:	20000214 	.word	0x20000214
 8001c88:	200002a4 	.word	0x200002a4
 8001c8c:	40002800 	.word	0x40002800
 8001c90:	58000800 	.word	0x58000800
 8001c94:	200002a5 	.word	0x200002a5

08001c98 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	493b      	ldr	r1, [pc, #236]	; (8001d94 <HW_TS_Start+0xfc>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	330c      	adds	r3, #12
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d103      	bne.n	8001cc4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff66 	bl	8001b90 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8001cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cca:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ccc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cce:	b672      	cpsid	i
}
 8001cd0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f001 ff3d 	bl	8003b52 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HW_TS_Start+0x100>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22ca      	movs	r2, #202	; 0xca
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HW_TS_Start+0x100>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2253      	movs	r2, #83	; 0x53
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001ce8:	79fa      	ldrb	r2, [r7, #7]
 8001cea:	492a      	ldr	r1, [pc, #168]	; (8001d94 <HW_TS_Start+0xfc>)
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	4925      	ldr	r1, [pc, #148]	; (8001d94 <HW_TS_Start+0xfc>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001d10:	79fa      	ldrb	r2, [r7, #7]
 8001d12:	4920      	ldr	r1, [pc, #128]	; (8001d94 <HW_TS_Start+0xfc>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3304      	adds	r3, #4
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fb30 	bl	800138c <linkTimer>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HW_TS_Start+0x104>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HW_TS_Start+0x108>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	7c7a      	ldrb	r2, [r7, #17]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d002      	beq.n	8001d48 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001d42:	f7ff fce9 	bl	8001718 <RescheduleTimerList>
 8001d46:	e013      	b.n	8001d70 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	4912      	ldr	r1, [pc, #72]	; (8001d94 <HW_TS_Start+0xfc>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	3308      	adds	r3, #8
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	8a7b      	ldrh	r3, [r7, #18]
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	1ac9      	subs	r1, r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <HW_TS_Start+0xfc>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4403      	add	r3, r0
 8001d6c:	3308      	adds	r3, #8
 8001d6e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HW_TS_Start+0x100>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	22ff      	movs	r2, #255	; 0xff
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f001 fedc 	bl	8003b36 <HAL_NVIC_EnableIRQ>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f383 8810 	msr	PRIMASK, r3
}
 8001d88:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001d8a:	bf00      	nop
}
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000214 	.word	0x20000214
 8001d98:	200004e0 	.word	0x200004e0
 8001d9c:	200002a4 	.word	0x200002a4
 8001da0:	200002a5 	.word	0x200002a5

08001da4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	460b      	mov	r3, r1
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4798      	blx	r3

  return;
 8001db6:	bf00      	nop
}
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10c      	bne.n	8001df2 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HW_UART_Receive_IT+0x3c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HW_UART_Receive_IT+0x40>)
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HW_UART_Receive_IT+0x44>)
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	89bb      	ldrh	r3, [r7, #12]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HW_UART_Receive_IT+0x40>)
 8001dec:	f004 fe64 	bl	8006ab8 <HAL_UART_Receive_IT>
            break;
 8001df0:	e000      	b.n	8001df4 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001df2:	bf00      	nop
    }

    return;
 8001df4:	bf00      	nop
}
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200002b4 	.word	0x200002b4
 8001e00:	2000038c 	.word	0x2000038c
 8001e04:	40013800 	.word	0x40013800

08001e08 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	4613      	mov	r3, r2
 8001e18:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10e      	bne.n	8001e46 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HW_UART_Transmit_DMA+0x80>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HW_UART_Transmit_DMA+0x84>)
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HW_UART_Transmit_DMA+0x88>)
 8001e32:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001e34:	89bb      	ldrh	r3, [r7, #12]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	4814      	ldr	r0, [pc, #80]	; (8001e8c <HW_UART_Transmit_DMA+0x84>)
 8001e3c:	f004 fe88 	bl	8006b50 <HAL_UART_Transmit_DMA>
 8001e40:	4603      	mov	r3, r0
 8001e42:	75fb      	strb	r3, [r7, #23]
            break;
 8001e44:	e000      	b.n	8001e48 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001e46:	bf00      	nop
    }

    switch (hal_status)
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d816      	bhi.n	8001e7c <HW_UART_Transmit_DMA+0x74>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <HW_UART_Transmit_DMA+0x4c>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e6b 	.word	0x08001e6b
 8001e5c:	08001e71 	.word	0x08001e71
 8001e60:	08001e77 	.word	0x08001e77
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75bb      	strb	r3, [r7, #22]
            break;
 8001e68:	e009      	b.n	8001e7e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75bb      	strb	r3, [r7, #22]
            break;
 8001e6e:	e006      	b.n	8001e7e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001e70:	2302      	movs	r3, #2
 8001e72:	75bb      	strb	r3, [r7, #22]
            break;
 8001e74:	e003      	b.n	8001e7e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001e76:	2303      	movs	r3, #3
 8001e78:	75bb      	strb	r3, [r7, #22]
            break;
 8001e7a:	e000      	b.n	8001e7e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001e7c:	bf00      	nop
    }

    return hw_status;
 8001e7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200002b8 	.word	0x200002b8
 8001e8c:	2000038c 	.word	0x2000038c
 8001e90:	40013800 	.word	0x40013800

08001e94 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_UART_RxCpltCallback+0x34>)
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_UART_RxCpltCallback+0x38>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_UART_RxCpltCallback+0x38>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4798      	blx	r3
            }
            break;
 8001eb6:	e001      	b.n	8001ebc <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001eb8:	bf00      	nop
 8001eba:	e000      	b.n	8001ebe <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001ebc:	bf00      	nop
    }

    return;
 8001ebe:	bf00      	nop
}
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	200002b4 	.word	0x200002b4

08001ed0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_UART_TxCpltCallback+0x34>)
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_UART_TxCpltCallback+0x38>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_UART_TxCpltCallback+0x38>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4798      	blx	r3
            }
            break;
 8001ef2:	e001      	b.n	8001ef8 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001ef4:	bf00      	nop
 8001ef6:	e000      	b.n	8001efa <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001ef8:	bf00      	nop
    }

    return;
 8001efa:	bf00      	nop
}
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40013800 	.word	0x40013800
 8001f08:	200002b8 	.word	0x200002b8

08001f0c <LL_RCC_LSE_SetDriveCapability>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	f023 0218 	bic.w	r2, r3, #24
 8001f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_AHB1_GRP1_EnableClock>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_AHB2_GRP1_EnableClock>:
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa0:	f001 fbd6 	bl	8003750 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001fa4:	f7fe fdc4 	bl	8000b30 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa8:	f000 f812 	bl	8001fd0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001fac:	f000 f86c 	bl	8002088 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001fb0:	f000 f88a 	bl	80020c8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb4:	f000 f943 	bl	800223e <MX_GPIO_Init>
  MX_DMA_Init();
 8001fb8:	f000 f924 	bl	8002204 <MX_DMA_Init>
  MX_RTC_Init();
 8001fbc:	f000 f8ee 	bl	800219c <MX_RTC_Init>
  MX_RF_Init();
 8001fc0:	f000 f8e4 	bl	800218c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001fc4:	f7fe fdc2 	bl	8000b4c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001fc8:	f7ff f801 	bl	8000fce <MX_APPE_Process>
 8001fcc:	e7fc      	b.n	8001fc8 <main+0x2c>
	...

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09a      	sub	sp, #104	; 0x68
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0320 	add.w	r3, r7, #32
 8001fda:	2248      	movs	r2, #72	; 0x48
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f009 fa72 	bl	800b4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	615a      	str	r2, [r3, #20]
 8001ff4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ff6:	f002 fd31 	bl	8004a5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff ff86 	bl	8001f0c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <SystemClock_Config+0xb4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <SystemClock_Config+0xb4>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <SystemClock_Config+0xb4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800201c:	2307      	movs	r3, #7
 800201e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002026:	2301      	movs	r3, #1
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800202a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002030:	2340      	movs	r3, #64	; 0x40
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002034:	2300      	movs	r3, #0
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	4618      	mov	r0, r3
 800203e:	f003 f8a1 	bl	8005184 <HAL_RCC_OscConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002048:	f000 f906 	bl	8002258 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800204c:	236f      	movs	r3, #111	; 0x6f
 800204e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002050:	2302      	movs	r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fbfd 	bl	800586c <HAL_RCC_ClockConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002078:	f000 f8ee 	bl	8002258 <Error_Handler>
  }
}
 800207c:	bf00      	nop
 800207e:	3768      	adds	r7, #104	; 0x68
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	58000400 	.word	0x58000400

08002088 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b094      	sub	sp, #80	; 0x50
 800208c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800208e:	463b      	mov	r3, r7
 8002090:	2250      	movs	r2, #80	; 0x50
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f009 fa17 	bl	800b4c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800209a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800209e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80020a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80020a6:	2302      	movs	r3, #2
 80020a8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80020aa:	2310      	movs	r3, #16
 80020ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ae:	463b      	mov	r3, r7
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 f818 	bl	80060e6 <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80020bc:	f000 f8cc 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80020c0:	bf00      	nop
 80020c2:	3750      	adds	r7, #80	; 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_IPCC_Init+0x20>)
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <MX_IPCC_Init+0x24>)
 80020d0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_IPCC_Init+0x20>)
 80020d4:	f002 fc3c 	bl	8004950 <HAL_IPCC_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80020de:	f000 f8bb 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200002bc 	.word	0x200002bc
 80020ec:	58000c00 	.word	0x58000c00

080020f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <MX_USART1_UART_Init+0x94>)
 80020f6:	4a24      	ldr	r2, [pc, #144]	; (8002188 <MX_USART1_UART_Init+0x98>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <MX_USART1_UART_Init+0x94>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_USART1_UART_Init+0x94>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_USART1_UART_Init+0x94>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002122:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002126:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_USART1_UART_Init+0x94>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800213a:	4812      	ldr	r0, [pc, #72]	; (8002184 <MX_USART1_UART_Init+0x94>)
 800213c:	f004 fc6c 	bl	8006a18 <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002146:	f000 f887 	bl	8002258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214a:	2100      	movs	r1, #0
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <MX_USART1_UART_Init+0x94>)
 800214e:	f006 fcb8 	bl	8008ac2 <HAL_UARTEx_SetTxFifoThreshold>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002158:	f000 f87e 	bl	8002258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800215c:	2100      	movs	r1, #0
 800215e:	4809      	ldr	r0, [pc, #36]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002160:	f006 fced 	bl	8008b3e <HAL_UARTEx_SetRxFifoThreshold>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800216a:	f000 f875 	bl	8002258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_USART1_UART_Init+0x94>)
 8002170:	f006 fc6e 	bl	8008a50 <HAL_UARTEx_DisableFifoMode>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800217a:	f000 f86d 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000038c 	.word	0x2000038c
 8002188:	40013800 	.word	0x40013800

0800218c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_RTC_Init+0x60>)
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <MX_RTC_Init+0x64>)
 80021a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_RTC_Init+0x60>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <MX_RTC_Init+0x60>)
 80021ae:	220f      	movs	r2, #15
 80021b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_RTC_Init+0x60>)
 80021b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80021b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <MX_RTC_Init+0x60>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_RTC_Init+0x60>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <MX_RTC_Init+0x60>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <MX_RTC_Init+0x60>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021d2:	480a      	ldr	r0, [pc, #40]	; (80021fc <MX_RTC_Init+0x60>)
 80021d4:	f004 fa0e 	bl	80065f4 <HAL_RTC_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80021de:	f000 f83b 	bl	8002258 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_RTC_Init+0x60>)
 80021e8:	f004 fb04 	bl	80067f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80021f2:	f000 f831 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200004e0 	.word	0x200004e0
 8002200:	40002800 	.word	0x40002800

08002204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002208:	2004      	movs	r0, #4
 800220a:	f7ff fe95 	bl	8001f38 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff fe92 	bl	8001f38 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002214:	2002      	movs	r0, #2
 8002216:	f7ff fe8f 	bl	8001f38 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	210f      	movs	r1, #15
 800221e:	200e      	movs	r0, #14
 8002220:	f001 fc6f 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002224:	200e      	movs	r0, #14
 8002226:	f001 fc86 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	210f      	movs	r1, #15
 800222e:	203a      	movs	r0, #58	; 0x3a
 8002230:	f001 fc67 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002234:	203a      	movs	r0, #58	; 0x3a
 8002236:	f001 fc7e 	bl	8003b36 <HAL_NVIC_EnableIRQ>

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}

0800223e <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	2004      	movs	r0, #4
 8002244:	f7ff fe91 	bl	8001f6a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff fe8e 	bl	8001f6a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2002      	movs	r0, #2
 8002250:	f7ff fe8b 	bl	8001f6a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_RCC_EnableRTC>:
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_AHB2_GRP1_EnableClock>:
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_AHB3_GRP1_EnableClock>:
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_APB1_GRP1_EnableClock>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4313      	orrs	r3, r2
 8002302:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002310:	68fb      	ldr	r3, [r7, #12]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_APB1_GRP2_EnableClock>:
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4313      	orrs	r3, r2
 8002334:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4013      	ands	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_APB2_GRP1_EnableClock>:
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800235e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4313      	orrs	r3, r2
 8002366:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4013      	ands	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002374:	68fb      	ldr	r3, [r7, #12]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002386:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800238a:	f7ff ff96 	bl	80022ba <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	202e      	movs	r0, #46	; 0x2e
 8002394:	f001 fbb5 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002398:	202e      	movs	r0, #46	; 0x2e
 800239a:	f001 fbcc 	bl	8003b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_IPCC_MspInit+0x44>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d113      	bne.n	80023de <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80023b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80023ba:	f7ff ff7e 	bl	80022ba <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	202c      	movs	r0, #44	; 0x2c
 80023c4:	f001 fb9d 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80023c8:	202c      	movs	r0, #44	; 0x2c
 80023ca:	f001 fbb4 	bl	8003b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	202d      	movs	r0, #45	; 0x2d
 80023d4:	f001 fb95 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80023d8:	202d      	movs	r0, #45	; 0x2d
 80023da:	f001 fbac 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	58000c00 	.word	0x58000c00

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0a0      	sub	sp, #128	; 0x80
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2250      	movs	r2, #80	; 0x50
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f009 f85b 	bl	800b4c8 <memset>
  if(huart->Instance==LPUART1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a68      	ldr	r2, [pc, #416]	; (80025b8 <HAL_UART_MspInit+0x1cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d16e      	bne.n	80024fa <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800241c:	2302      	movs	r3, #2
 800241e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002420:	2300      	movs	r3, #0
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4618      	mov	r0, r3
 800242a:	f003 fe5c 	bl	80060e6 <HAL_RCCEx_PeriphCLKConfig>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002434:	f7ff ff10 	bl	8002258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002438:	2001      	movs	r0, #1
 800243a:	f7ff ff70 	bl	800231e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2001      	movs	r0, #1
 8002440:	f7ff ff22 	bl	8002288 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002444:	230c      	movs	r3, #12
 8002446:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002454:	2308      	movs	r3, #8
 8002456:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002462:	f002 f8b1 	bl	80045c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002466:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 8002468:	4a55      	ldr	r2, [pc, #340]	; (80025c0 <HAL_UART_MspInit+0x1d4>)
 800246a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 800246e:	2211      	movs	r2, #17
 8002470:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002472:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 8002474:	2210      	movs	r2, #16
 8002476:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800247e:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248a:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002490:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800249c:	4847      	ldr	r0, [pc, #284]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 800249e:	f001 fb8f 	bl	8003bc0 <HAL_DMA_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80024a8:	f7ff fed6 	bl	8002258 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80024ac:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80024b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80024c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024ca:	4619      	mov	r1, r3
 80024cc:	483b      	ldr	r0, [pc, #236]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 80024ce:	f001 fea9 	bl	8004224 <HAL_DMAEx_ConfigMuxSync>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80024d8:	f7ff febe 	bl	8002258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a37      	ldr	r2, [pc, #220]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 80024e0:	67da      	str	r2, [r3, #124]	; 0x7c
 80024e2:	4a36      	ldr	r2, [pc, #216]	; (80025bc <HAL_UART_MspInit+0x1d0>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	2025      	movs	r0, #37	; 0x25
 80024ee:	f001 fb08 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024f2:	2025      	movs	r0, #37	; 0x25
 80024f4:	f001 fb1f 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024f8:	e05a      	b.n	80025b0 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <HAL_UART_MspInit+0x1d8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d155      	bne.n	80025b0 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002504:	2301      	movs	r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	4618      	mov	r0, r3
 8002512:	f003 fde8 	bl	80060e6 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800251c:	f7ff fe9c 	bl	8002258 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002520:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002524:	f7ff ff14 	bl	8002350 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002528:	2002      	movs	r0, #2
 800252a:	f7ff fead 	bl	8002288 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800252e:	23c0      	movs	r3, #192	; 0xc0
 8002530:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002536:	2301      	movs	r3, #1
 8002538:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253e:	2307      	movs	r3, #7
 8002540:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002546:	4619      	mov	r1, r3
 8002548:	481f      	ldr	r0, [pc, #124]	; (80025c8 <HAL_UART_MspInit+0x1dc>)
 800254a:	f002 f83d 	bl	80045c8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_UART_MspInit+0x1e4>)
 8002552:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002556:	220f      	movs	r2, #15
 8002558:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 800255c:	2210      	movs	r2, #16
 800255e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002584:	4811      	ldr	r0, [pc, #68]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002586:	f001 fb1b 	bl	8003bc0 <HAL_DMA_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002590:	f7ff fe62 	bl	8002258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 8002598:	67da      	str	r2, [r3, #124]	; 0x7c
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <HAL_UART_MspInit+0x1e0>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	2024      	movs	r0, #36	; 0x24
 80025a6:	f001 faac 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025aa:	2024      	movs	r0, #36	; 0x24
 80025ac:	f001 fac3 	bl	8003b36 <HAL_NVIC_EnableIRQ>
}
 80025b0:	bf00      	nop
 80025b2:	3780      	adds	r7, #128	; 0x80
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40008000 	.word	0x40008000
 80025bc:	20000420 	.word	0x20000420
 80025c0:	40020044 	.word	0x40020044
 80025c4:	40013800 	.word	0x40013800
 80025c8:	48000400 	.word	0x48000400
 80025cc:	20000480 	.word	0x20000480
 80025d0:	40020444 	.word	0x40020444

080025d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b096      	sub	sp, #88	; 0x58
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	2250      	movs	r2, #80	; 0x50
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f008 ff6f 	bl	800b4c8 <memset>
  if(hrtc->Instance==RTC)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_RTC_MspInit+0x6c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d120      	bne.n	8002636 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fd6e 	bl	80060e6 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002610:	f7ff fe22 	bl	8002258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002614:	f7ff fe27 	bl	8002266 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002618:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800261c:	f7ff fe66 	bl	80022ec <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2003      	movs	r0, #3
 8002626:	f001 fa6c 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800262a:	2003      	movs	r0, #3
 800262c:	f001 fa83 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f004 f99b 	bl	800696c <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002636:	bf00      	nop
 8002638:	3758      	adds	r7, #88	; 0x58
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40002800 	.word	0x40002800

08002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <MemManage_Handler+0x4>

0800265e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <UsageFault_Handler+0x4>

0800266a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002698:	f001 f8b4 	bl	8003804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80026a4:	f7ff f8d2 	bl	800184c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <DMA1_Channel4_IRQHandler+0x10>)
 80026b2:	f001 fc66 	bl	8003f82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000420 	.word	0x20000420

080026c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <USART1_IRQHandler+0x10>)
 80026c6:	f004 fac3 	bl	8006c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000038c 	.word	0x2000038c

080026d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <LPUART1_IRQHandler+0x10>)
 80026da:	f004 fab9 	bl	8006c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200002f8 	.word	0x200002f8

080026e8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80026ec:	f000 fd98 	bl	8003220 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80026f8:	f000 fdca 	bl	8003290 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002704:	f002 f900 	bl	8004908 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <DMA2_Channel4_IRQHandler+0x10>)
 8002712:	f001 fc36 	bl	8003f82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000480 	.word	0x20000480

08002720 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002724:	2010      	movs	r0, #16
 8002726:	f002 f8d7 	bl	80048d8 <HAL_GPIO_EXTI_IRQHandler>
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}

0800272e <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002732:	2001      	movs	r0, #1
 8002734:	f002 f8d0 	bl	80048d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002740:	2002      	movs	r0, #2
 8002742:	f002 f8c9 	bl	80048d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}

0800274a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e00a      	b.n	8002772 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800275c:	f3af 8000 	nop.w
 8002760:	4601      	mov	r1, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	60ba      	str	r2, [r7, #8]
 8002768:	b2ca      	uxtb	r2, r1
 800276a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	dbf0      	blt.n	800275c <_read+0x12>
  }

  return len;
 800277a:	687b      	ldr	r3, [r7, #4]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ac:	605a      	str	r2, [r3, #4]
  return 0;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_isatty>:

int _isatty(int file)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027c4:	2301      	movs	r3, #1
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <_sbrk+0x5c>)
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <_sbrk+0x60>)
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <_sbrk+0x64>)
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <_sbrk+0x68>)
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d207      	bcs.n	800282c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800281c:	f008 fe1c 	bl	800b458 <__errno>
 8002820:	4603      	mov	r3, r0
 8002822:	220c      	movs	r2, #12
 8002824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282a:	e009      	b.n	8002840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <_sbrk+0x64>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <_sbrk+0x64>)
 800283c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20030000 	.word	0x20030000
 800284c:	00001000 	.word	0x00001000
 8002850:	20000504 	.word	0x20000504
 8002854:	20001678 	.word	0x20001678

08002858 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800285c:	f3bf 8f4f 	dsb	sy
}
 8002860:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <__NVIC_SystemReset+0x24>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800286a:	4904      	ldr	r1, [pc, #16]	; (800287c <__NVIC_SystemReset+0x24>)
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_SystemReset+0x28>)
 800286e:	4313      	orrs	r3, r2
 8002870:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002872:	f3bf 8f4f 	dsb	sy
}
 8002876:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <__NVIC_SystemReset+0x20>
 800287c:	e000ed00 	.word	0xe000ed00
 8002880:	05fa0004 	.word	0x05fa0004

08002884 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <LL_FLASH_GetUDN+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	1fff7580 	.word	0x1fff7580

0800289c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <LL_FLASH_GetDeviceID+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	1fff7584 	.word	0x1fff7584

080028b4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <LL_FLASH_GetSTCompanyID+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0a1b      	lsrs	r3, r3, #8
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	1fff7584 	.word	0x1fff7584

080028cc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b090      	sub	sp, #64	; 0x40
 80028d0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <APP_BLE_Init+0x88>)
 80028d4:	1d3c      	adds	r4, r7, #4
 80028d6:	461d      	mov	r5, r3
 80028d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028e8:	c403      	stmia	r4!, {r0, r1}
 80028ea:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80028ec:	f000 f886 	bl	80029fc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80028f0:	2101      	movs	r1, #1
 80028f2:	2002      	movs	r0, #2
 80028f4:	f007 fe82 	bl	800a5fc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <APP_BLE_Init+0x8c>)
 80028fa:	2100      	movs	r1, #0
 80028fc:	2002      	movs	r0, #2
 80028fe:	f007 ffa9 	bl	800a854 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	4618      	mov	r0, r3
 8002906:	f007 f811 	bl	800992c <SHCI_C2_BLE_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8002910:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <APP_BLE_Init+0x5e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8002918:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800291c:	4619      	mov	r1, r3
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <APP_BLE_Init+0x90>)
 8002920:	f008 fdda 	bl	800b4d8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002924:	f7ff fc98 	bl	8002258 <Error_Handler>
 8002928:	e002      	b.n	8002930 <APP_BLE_Init+0x64>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800292a:	480d      	ldr	r0, [pc, #52]	; (8002960 <APP_BLE_Init+0x94>)
 800292c:	f008 fdd4 	bl	800b4d8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002930:	f000 f87a 	bl	8002a28 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002934:	f007 fa9e 	bl	8009e74 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <APP_BLE_Init+0x98>)
 800293a:	2100      	movs	r1, #0
 800293c:	2001      	movs	r0, #1
 800293e:	f007 ff89 	bl	800a854 <UTIL_SEQ_RegTask>
    APP_DBG_MSG("Eddystone TLM beacon advertise\n\r");
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
 8002942:	4809      	ldr	r0, [pc, #36]	; (8002968 <APP_BLE_Init+0x9c>)
 8002944:	f008 fdc8 	bl	800b4d8 <iprintf>
    IBeacon_Process();
 8002948:	f000 fb38 	bl	8002fbc <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800294c:	bf00      	nop
}
 800294e:	3740      	adds	r7, #64	; 0x40
 8002950:	46bd      	mov	sp, r7
 8002952:	bdb0      	pop	{r4, r5, r7, pc}
 8002954:	0800c91c 	.word	0x0800c91c
 8002958:	080095f9 	.word	0x080095f9
 800295c:	0800c8a8 	.word	0x0800c8a8
 8002960:	0800c8e0 	.word	0x0800c8e0
 8002964:	08002c61 	.word	0x08002c61
 8002968:	0800c908 	.word	0x0800c908

0800296c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2bff      	cmp	r3, #255	; 0xff
 8002980:	d00e      	beq.n	80029a0 <SVCCTL_App_Notification+0x34>
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	dc19      	bgt.n	80029ba <SVCCTL_App_Notification+0x4e>
 8002986:	2b05      	cmp	r3, #5
 8002988:	d019      	beq.n	80029be <SVCCTL_App_Notification+0x52>
 800298a:	2b3e      	cmp	r3, #62	; 0x3e
 800298c:	d000      	beq.n	8002990 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800298e:	e014      	b.n	80029ba <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3302      	adds	r3, #2
 8002994:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
          break;
 800299c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800299e:	e011      	b.n	80029c4 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3302      	adds	r3, #2
 80029a4:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	f240 4307 	movw	r3, #1031	; 0x407
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d105      	bne.n	80029c2 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80029b6:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80029b8:	e003      	b.n	80029c2 <SVCCTL_App_Notification+0x56>
      break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80029c2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80029c4:	2301      	movs	r3, #1
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <APP_BLE_Key_Button1_Action>:

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <Ble_Tl_Init+0x20>)
 8002a04:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <Ble_Tl_Init+0x24>)
 8002a08:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <Ble_Tl_Init+0x28>)
 8002a10:	f006 fdd6 	bl	80095c0 <hci_init>

  return;
 8002a14:	bf00      	nop
}
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20030028 	.word	0x20030028
 8002a20:	08002dc9 	.word	0x08002dc9
 8002a24:	08002d91 	.word	0x08002d91

08002a28 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af04      	add	r7, sp, #16
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8002a2e:	2300      	movs	r3, #0
 8002a30:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002a32:	2392      	movs	r3, #146	; 0x92
 8002a34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8002a36:	4873      	ldr	r0, [pc, #460]	; (8002c04 <Ble_Hci_Gap_Gatt_Init+0x1dc>)
 8002a38:	f008 fdd4 	bl	800b5e4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8002a3c:	f006 fd33 	bl	80094a6 <hci_reset>
 8002a40:	4603      	mov	r3, r0
 8002a42:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	486e      	ldr	r0, [pc, #440]	; (8002c08 <Ble_Hci_Gap_Gatt_Init+0x1e0>)
 8002a50:	f008 fd42 	bl	800b4d8 <iprintf>
 8002a54:	e002      	b.n	8002a5c <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8002a56:	486d      	ldr	r0, [pc, #436]	; (8002c0c <Ble_Hci_Gap_Gatt_Init+0x1e4>)
 8002a58:	f008 fdc4 	bl	800b5e4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8002a5c:	f000 f932 	bl	8002cc4 <BleGetBdAddress>
 8002a60:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	2106      	movs	r1, #6
 8002a66:	2000      	movs	r0, #0
 8002a68:	f006 fc31 	bl	80092ce <aci_hal_write_config_data>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4865      	ldr	r0, [pc, #404]	; (8002c10 <Ble_Hci_Gap_Gatt_Init+0x1e8>)
 8002a7c:	f008 fd2c 	bl	800b4d8 <iprintf>
 8002a80:	e021      	b.n	8002ac6 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8002a82:	4864      	ldr	r0, [pc, #400]	; (8002c14 <Ble_Hci_Gap_Gatt_Init+0x1ec>)
 8002a84:	f008 fdae 	bl	800b5e4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	3305      	adds	r3, #5
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	3304      	adds	r3, #4
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461c      	mov	r4, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	3303      	adds	r3, #3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	9101      	str	r1, [sp, #4]
 8002ab8:	9200      	str	r2, [sp, #0]
 8002aba:	462b      	mov	r3, r5
 8002abc:	4622      	mov	r2, r4
 8002abe:	4601      	mov	r1, r0
 8002ac0:	4855      	ldr	r0, [pc, #340]	; (8002c18 <Ble_Hci_Gap_Gatt_Init+0x1f0>)
 8002ac2:	f008 fd09 	bl	800b4d8 <iprintf>
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8002ac6:	4a55      	ldr	r2, [pc, #340]	; (8002c1c <Ble_Hci_Gap_Gatt_Init+0x1f4>)
 8002ac8:	2110      	movs	r1, #16
 8002aca:	2018      	movs	r0, #24
 8002acc:	f006 fbff 	bl	80092ce <aci_hal_write_config_data>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	4619      	mov	r1, r3
 8002ade:	4850      	ldr	r0, [pc, #320]	; (8002c20 <Ble_Hci_Gap_Gatt_Init+0x1f8>)
 8002ae0:	f008 fcfa 	bl	800b4d8 <iprintf>
 8002ae4:	e002      	b.n	8002aec <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8002ae6:	484f      	ldr	r0, [pc, #316]	; (8002c24 <Ble_Hci_Gap_Gatt_Init+0x1fc>)
 8002ae8:	f008 fd7c 	bl	800b5e4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8002aec:	4a4e      	ldr	r2, [pc, #312]	; (8002c28 <Ble_Hci_Gap_Gatt_Init+0x200>)
 8002aee:	2110      	movs	r1, #16
 8002af0:	2008      	movs	r0, #8
 8002af2:	f006 fbec 	bl	80092ce <aci_hal_write_config_data>
 8002af6:	4603      	mov	r3, r0
 8002af8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4849      	ldr	r0, [pc, #292]	; (8002c2c <Ble_Hci_Gap_Gatt_Init+0x204>)
 8002b06:	f008 fce7 	bl	800b4d8 <iprintf>
 8002b0a:	e002      	b.n	8002b12 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8002b0c:	4848      	ldr	r0, [pc, #288]	; (8002c30 <Ble_Hci_Gap_Gatt_Init+0x208>)
 8002b0e:	f008 fd69 	bl	800b5e4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002b12:	2118      	movs	r1, #24
 8002b14:	2001      	movs	r0, #1
 8002b16:	f006 fc5f 	bl	80093d8 <aci_hal_set_tx_power_level>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	4619      	mov	r1, r3
 8002b28:	4842      	ldr	r0, [pc, #264]	; (8002c34 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8002b2a:	f008 fcd5 	bl	800b4d8 <iprintf>
 8002b2e:	e002      	b.n	8002b36 <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8002b30:	4841      	ldr	r0, [pc, #260]	; (8002c38 <Ble_Hci_Gap_Gatt_Init+0x210>)
 8002b32:	f008 fd57 	bl	800b5e4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8002b36:	f006 fafc 	bl	8009132 <aci_gatt_init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	4619      	mov	r1, r3
 8002b48:	483c      	ldr	r0, [pc, #240]	; (8002c3c <Ble_Hci_Gap_Gatt_Init+0x214>)
 8002b4a:	f008 fcc5 	bl	800b4d8 <iprintf>
 8002b4e:	e002      	b.n	8002b56 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8002b50:	483b      	ldr	r0, [pc, #236]	; (8002c40 <Ble_Hci_Gap_Gatt_Init+0x218>)
 8002b52:	f008 fd47 	bl	800b5e4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d035      	beq.n	8002bd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>
  {
    const char *name = "BEACON";
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <Ble_Hci_Gap_Gatt_Init+0x21c>)
 8002b6a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8002b6c:	1dba      	adds	r2, r7, #6
 8002b6e:	7bf8      	ldrb	r0, [r7, #15]
 8002b70:	1cbb      	adds	r3, r7, #2
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	f006 f965 	bl	8008e4c <aci_gap_init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	482d      	ldr	r0, [pc, #180]	; (8002c48 <Ble_Hci_Gap_Gatt_Init+0x220>)
 8002b92:	f008 fca1 	bl	800b4d8 <iprintf>
 8002b96:	e002      	b.n	8002b9e <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8002b98:	482c      	ldr	r0, [pc, #176]	; (8002c4c <Ble_Hci_Gap_Gatt_Init+0x224>)
 8002b9a:	f008 fd23 	bl	800b5e4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8002b9e:	88fc      	ldrh	r4, [r7, #6]
 8002ba0:	88bd      	ldrh	r5, [r7, #4]
 8002ba2:	68b8      	ldr	r0, [r7, #8]
 8002ba4:	f7fd faf6 	bl	8000194 <strlen>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f006 fae0 	bl	800917c <aci_gatt_update_char_value>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <Ble_Hci_Gap_Gatt_Init+0x1a6>
    {
      BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Device Name\n");
 8002bc6:	4822      	ldr	r0, [pc, #136]	; (8002c50 <Ble_Hci_Gap_Gatt_Init+0x228>)
 8002bc8:	f008 fd0c 	bl	800b5e4 <puts>
 8002bcc:	e002      	b.n	8002bd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>
    }
    else
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
 8002bce:	4821      	ldr	r0, [pc, #132]	; (8002c54 <Ble_Hci_Gap_Gatt_Init+0x22c>)
 8002bd0:	f008 fd08 	bl	800b5e4 <puts>
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8002bd4:	88f8      	ldrh	r0, [r7, #6]
 8002bd6:	8879      	ldrh	r1, [r7, #2]
 8002bd8:	463b      	mov	r3, r7
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	2200      	movs	r2, #0
 8002be0:	f006 facc 	bl	800917c <aci_gatt_update_char_value>
 8002be4:	4603      	mov	r3, r0
 8002be6:	75fb      	strb	r3, [r7, #23]
                                   gap_appearance_char_handle,
                                   0,
                                   2,
                                   (uint8_t *)&a_appearance);
  if (ret != BLE_STATUS_SUCCESS)
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <Ble_Hci_Gap_Gatt_Init+0x1ce>
  {
    BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Appearance\n");
 8002bee:	481a      	ldr	r0, [pc, #104]	; (8002c58 <Ble_Hci_Gap_Gatt_Init+0x230>)
 8002bf0:	f008 fcf8 	bl	800b5e4 <puts>
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8002bf4:	e002      	b.n	8002bfc <Ble_Hci_Gap_Gatt_Init+0x1d4>
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
 8002bf6:	4819      	ldr	r0, [pc, #100]	; (8002c5c <Ble_Hci_Gap_Gatt_Init+0x234>)
 8002bf8:	f008 fcf4 	bl	800b5e4 <puts>
}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bdb0      	pop	{r4, r5, r7, pc}
 8002c04:	0800c958 	.word	0x0800c958
 8002c08:	0800c984 	.word	0x0800c984
 8002c0c:	0800c9b4 	.word	0x0800c9b4
 8002c10:	0800c9d4 	.word	0x0800c9d4
 8002c14:	0800ca30 	.word	0x0800ca30
 8002c18:	0800ca7c 	.word	0x0800ca7c
 8002c1c:	0800cf60 	.word	0x0800cf60
 8002c20:	0800cab8 	.word	0x0800cab8
 8002c24:	0800cb10 	.word	0x0800cb10
 8002c28:	0800cf70 	.word	0x0800cf70
 8002c2c:	0800cb58 	.word	0x0800cb58
 8002c30:	0800cbb0 	.word	0x0800cbb0
 8002c34:	0800cbf8 	.word	0x0800cbf8
 8002c38:	0800cc38 	.word	0x0800cc38
 8002c3c:	0800cc68 	.word	0x0800cc68
 8002c40:	0800cc9c 	.word	0x0800cc9c
 8002c44:	0800ccc0 	.word	0x0800ccc0
 8002c48:	0800ccc8 	.word	0x0800ccc8
 8002c4c:	0800ccf8 	.word	0x0800ccf8
 8002c50:	0800cd18 	.word	0x0800cd18
 8002c54:	0800cd4c 	.word	0x0800cd4c
 8002c58:	0800cd80 	.word	0x0800cd80
 8002c5c:	0800cdb4 	.word	0x0800cdb4

08002c60 <Beacon_Update>:
static void Beacon_Update(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <Beacon_Update+0x58>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01b      	beq.n	8002caa <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002c72:	2302      	movs	r3, #2
 8002c74:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <Beacon_Update+0x58>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <Beacon_Update+0x58>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	d102      	bne.n	8002c8a <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8002c84:	2302      	movs	r3, #2
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e001      	b.n	8002c8e <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8002c8e:	f001 fb2b 	bl	80042e8 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <Beacon_Update+0x5c>)
 8002c94:	f248 0211 	movw	r2, #32785	; 0x8011
 8002c98:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8002c9a:	463a      	mov	r2, r7
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fbcd 	bl	8004440 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8002ca6:	f001 fb41 	bl	800432c <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8002caa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <Beacon_Update+0x60>)
 8002cb0:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 8002cb2:	f7ff fdd1 	bl	8002858 <__NVIC_SystemReset>
 8002cb6:	bf00      	nop
 8002cb8:	2000050e 	.word	0x2000050e
 8002cbc:	58004000 	.word	0x58004000
 8002cc0:	00010601 	.word	0x00010601

08002cc4 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002cca:	f7ff fddb 	bl	8002884 <LL_FLASH_GetUDN>
 8002cce:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd6:	d023      	beq.n	8002d20 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002cd8:	f7ff fdec 	bl	80028b4 <LL_FLASH_GetSTCompanyID>
 8002cdc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002cde:	f7ff fddd 	bl	800289c <LL_FLASH_GetDeviceID>
 8002ce2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <BleGetBdAddress+0x80>)
 8002cea:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <BleGetBdAddress+0x80>)
 8002cf4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <BleGetBdAddress+0x80>)
 8002cfc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <BleGetBdAddress+0x80>)
 8002d04:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <BleGetBdAddress+0x80>)
 8002d0e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <BleGetBdAddress+0x80>)
 8002d18:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <BleGetBdAddress+0x80>)
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e00b      	b.n	8002d38 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f007 fc31 	bl	800a588 <OTP_Read>
 8002d26:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e001      	b.n	8002d38 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <BleGetBdAddress+0x84>)
 8002d36:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8002d38:	697b      	ldr	r3, [r7, #20]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000508 	.word	0x20000508
 8002d48:	0800cf58 	.word	0x0800cf58

08002d4c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002d54:	2100      	movs	r1, #0
 8002d56:	2002      	movs	r0, #2
 8002d58:	f007 fd9e 	bl	800a898 <UTIL_SEQ_SetTask>

  return;
 8002d5c:	bf00      	nop
}
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f007 fdff 	bl	800a970 <UTIL_SEQ_SetEvt>

  return;
 8002d72:	bf00      	nop
}
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f007 fe14 	bl	800a9b0 <UTIL_SEQ_WaitEvt>

  return;
 8002d88:	bf00      	nop
}
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	3308      	adds	r3, #8
 8002da2:	4618      	mov	r0, r3
 8002da4:	f007 f89e 	bl	8009ee4 <SVCCTL_UserEvtRx>
 8002da8:	4603      	mov	r3, r0
 8002daa:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002dac:	7afb      	ldrb	r3, [r7, #11]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8002db8:	e003      	b.n	8002dc2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  return;
 8002dc0:	bf00      	nop
}
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <BLE_StatusNot+0x16>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d006      	beq.n	8002dea <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8002ddc:	e00b      	b.n	8002df6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002dde:	231f      	movs	r3, #31
 8002de0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f007 fd84 	bl	800a8f0 <UTIL_SEQ_PauseTask>
      break;
 8002de8:	e005      	b.n	8002df6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002dea:	231f      	movs	r3, #31
 8002dec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f007 fd9e 	bl	800a930 <UTIL_SEQ_ResumeTask>
      break;
 8002df4:	bf00      	nop
  }

  return;
 8002df6:	bf00      	nop
}
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b094      	sub	sp, #80	; 0x50
 8002e04:	af08      	add	r7, sp, #32
 8002e06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	4a67      	ldr	r2, [pc, #412]	; (8002fb4 <IBeacon_Init+0x1b4>)
 8002e16:	fb82 1203 	smull	r1, r2, r2, r3
 8002e1a:	1092      	asrs	r2, r2, #2
 8002e1c:	17db      	asrs	r3, r3, #31
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8002e22:	2100      	movs	r1, #0
 8002e24:	2000      	movs	r0, #0
 8002e26:	f006 fb62 	bl	80094ee <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8002e2a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002e2c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9306      	str	r3, [sp, #24]
 8002e32:	2300      	movs	r3, #0
 8002e34:	9305      	str	r3, [sp, #20]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9304      	str	r3, [sp, #16]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9303      	str	r3, [sp, #12]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9302      	str	r3, [sp, #8]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f005 ff03 	bl	8008c58 <aci_gap_set_discoverable>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 GAP_PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8002e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <IBeacon_Init+0x66>
  {
    return ret;
 8002e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e64:	e0a1      	b.n	8002faa <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8002e66:	200a      	movs	r0, #10
 8002e68:	f006 f90f 	bl	800908a <aci_gap_delete_ad_type>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8002e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <IBeacon_Init+0x80>
  {
    return ret;
 8002e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e7e:	e094      	b.n	8002faa <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 8002e80:	231a      	movs	r3, #26
 8002e82:	743b      	strb	r3, [r7, #16]
 8002e84:	23ff      	movs	r3, #255	; 0xff
 8002e86:	747b      	strb	r3, [r7, #17]
 8002e88:	234c      	movs	r3, #76	; 0x4c
 8002e8a:	74bb      	strb	r3, [r7, #18]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	74fb      	strb	r3, [r7, #19]
 8002e90:	2302      	movs	r3, #2
 8002e92:	753b      	strb	r3, [r7, #20]
 8002e94:	2315      	movs	r3, #21
 8002e96:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002e9e:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002eb4:	78db      	ldrb	r3, [r3, #3]
 8002eb6:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ebc:	791b      	ldrb	r3, [r3, #4]
 8002ebe:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ec4:	795b      	ldrb	r3, [r3, #5]
 8002ec6:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ecc:	799b      	ldrb	r3, [r3, #6]
 8002ece:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ed4:	79db      	ldrb	r3, [r3, #7]
 8002ed6:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002edc:	7a1b      	ldrb	r3, [r3, #8]
 8002ede:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ee4:	7a5b      	ldrb	r3, [r3, #9]
 8002ee6:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002eec:	7a9b      	ldrb	r3, [r3, #10]
 8002eee:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ef6:	7adb      	ldrb	r3, [r3, #11]
 8002ef8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002f00:	7b1b      	ldrb	r3, [r3, #12]
 8002f02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002f0a:	7b5b      	ldrb	r3, [r3, #13]
 8002f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002f14:	7b9b      	ldrb	r3, [r3, #14]
 8002f16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002f1e:	7bdb      	ldrb	r3, [r3, #15]
 8002f20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002f3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 8002f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <IBeacon_Init+0x1b8>)
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	8019      	strh	r1, [r3, #0]
 8002f60:	3302      	adds	r3, #2
 8002f62:	0c12      	lsrs	r2, r2, #16
 8002f64:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	201b      	movs	r0, #27
 8002f6e:	f006 f81a 	bl	8008fa6 <aci_gap_update_adv_data>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8002f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <IBeacon_Init+0x186>
  {
    return ret;
 8002f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f84:	e011      	b.n	8002faa <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f006 f80a 	bl	8008fa6 <aci_gap_update_adv_data>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8002f98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <IBeacon_Init+0x1a6>
  {
    return ret;
 8002fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fa4:	e001      	b.n	8002faa <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 8002fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3730      	adds	r7, #48	; 0x30
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	66666667 	.word	0x66666667
 8002fb8:	0800cde8 	.word	0x0800cde8

08002fbc <IBeacon_Process>:

void IBeacon_Process(void)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b08d      	sub	sp, #52	; 0x34
 8002fc0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <IBeacon_Process+0x4c>)
 8002fc4:	f107 0420 	add.w	r4, r7, #32
 8002fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8002fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd2:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 8002fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd8:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8002fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fde:	80bb      	strh	r3, [r7, #4]
 8002fe0:	f107 0320 	add.w	r3, r7, #32
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	f107 0318 	add.w	r3, r7, #24
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	23c1      	movs	r3, #193	; 0xc1
 8002ff4:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff01 	bl	8002e00 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 8002ffe:	bf00      	nop
 8003000:	3734      	adds	r7, #52	; 0x34
 8003002:	46bd      	mov	sp, r7
 8003004:	bd90      	pop	{r4, r7, pc}
 8003006:	bf00      	nop
 8003008:	0800cdec 	.word	0x0800cdec

0800300c <LL_PWR_EnableBootC2>:
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <LL_PWR_EnableBootC2+0x1c>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <LL_PWR_EnableBootC2+0x1c>)
 8003016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	58000400 	.word	0x58000400

0800302c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003036:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800303a:	4905      	ldr	r1, [pc, #20]	; (8003050 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	58000800 	.word	0x58000800

08003054 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	4904      	ldr	r1, [pc, #16]	; (8003074 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	620b      	str	r3, [r1, #32]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	58000800 	.word	0x58000800

08003078 <LL_AHB3_GRP1_EnableClock>:
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4313      	orrs	r3, r2
 800308e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800309c:	68fb      	ldr	r3, [r7, #12]
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030d4:	68fb      	ldr	r3, [r7, #12]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_C1_IPCC_EnableIT_TXF>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	601a      	str	r2, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	605a      	str	r2, [r3, #4]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	605a      	str	r2, [r3, #4]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	605a      	str	r2, [r3, #4]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_C1_IPCC_SetFlag_CHx>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	041a      	lsls	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	609a      	str	r2, [r3, #8]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4013      	ands	r3, r2
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d101      	bne.n	80031e6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	4013      	ands	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d101      	bne.n	8003210 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003224:	2102      	movs	r1, #2
 8003226:	4819      	ldr	r0, [pc, #100]	; (800328c <HW_IPCC_Rx_Handler+0x6c>)
 8003228:	f7ff ffe4 	bl	80031f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HW_IPCC_Rx_Handler+0x26>
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HW_IPCC_Rx_Handler+0x6c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	43db      	mvns	r3, r3
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003240:	f000 f8da 	bl	80033f8 <HW_IPCC_SYS_EvtHandler>
 8003244:	e01f      	b.n	8003286 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003246:	2101      	movs	r1, #1
 8003248:	4810      	ldr	r0, [pc, #64]	; (800328c <HW_IPCC_Rx_Handler+0x6c>)
 800324a:	f7ff ffd3 	bl	80031f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HW_IPCC_Rx_Handler+0x46>
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <HW_IPCC_Rx_Handler+0x6c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003260:	f000 f88e 	bl	8003380 <HW_IPCC_BLE_EvtHandler>
 8003264:	e00f      	b.n	8003286 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003266:	2108      	movs	r1, #8
 8003268:	4808      	ldr	r0, [pc, #32]	; (800328c <HW_IPCC_Rx_Handler+0x6c>)
 800326a:	f7ff ffc3 	bl	80031f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HW_IPCC_Rx_Handler+0x68>
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HW_IPCC_Rx_Handler+0x6c>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	43db      	mvns	r3, r3
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003282:	f000 f905 	bl	8003490 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003286:	bf00      	nop
 8003288:	bf00      	nop
}
 800328a:	bd80      	pop	{r7, pc}
 800328c:	58000c00 	.word	0x58000c00

08003290 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003294:	2102      	movs	r1, #2
 8003296:	481a      	ldr	r0, [pc, #104]	; (8003300 <HW_IPCC_Tx_Handler+0x70>)
 8003298:	f7ff ff97 	bl	80031ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HW_IPCC_Tx_Handler+0x26>
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HW_IPCC_Tx_Handler+0x70>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80032b0:	f000 f896 	bl	80033e0 <HW_IPCC_SYS_CmdEvtHandler>
 80032b4:	e020      	b.n	80032f8 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80032b6:	2108      	movs	r1, #8
 80032b8:	4811      	ldr	r0, [pc, #68]	; (8003300 <HW_IPCC_Tx_Handler+0x70>)
 80032ba:	f7ff ff86 	bl	80031ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HW_IPCC_Tx_Handler+0x48>
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <HW_IPCC_Tx_Handler+0x70>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80032d2:	f000 f8bf 	bl	8003454 <HW_IPCC_MM_FreeBufHandler>
 80032d6:	e00f      	b.n	80032f8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80032d8:	2120      	movs	r1, #32
 80032da:	4809      	ldr	r0, [pc, #36]	; (8003300 <HW_IPCC_Tx_Handler+0x70>)
 80032dc:	f7ff ff75 	bl	80031ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HW_IPCC_Tx_Handler+0x6a>
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HW_IPCC_Tx_Handler+0x70>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80032f4:	f000 f850 	bl	8003398 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
}
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	58000c00 	.word	0x58000c00

08003304 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003308:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800330c:	f7ff fecd 	bl	80030aa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003310:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003314:	f7ff fe9e 	bl	8003054 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003318:	f44f 7000 	mov.w	r0, #512	; 0x200
 800331c:	f7ff fe86 	bl	800302c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003320:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003322:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003324:	f7ff fe72 	bl	800300c <LL_PWR_EnableBootC2>

  return;
 8003328:	bf00      	nop
}
 800332a:	bd80      	pop	{r7, pc}

0800332c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003330:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003334:	f7ff fea0 	bl	8003078 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003338:	4806      	ldr	r0, [pc, #24]	; (8003354 <HW_IPCC_Init+0x28>)
 800333a:	f7ff fee2 	bl	8003102 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <HW_IPCC_Init+0x28>)
 8003340:	f7ff fecf 	bl	80030e2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003344:	202c      	movs	r0, #44	; 0x2c
 8003346:	f000 fbf6 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800334a:	202d      	movs	r0, #45	; 0x2d
 800334c:	f000 fbf3 	bl	8003b36 <HAL_NVIC_EnableIRQ>

  return;
 8003350:	bf00      	nop
}
 8003352:	bd80      	pop	{r7, pc}
 8003354:	58000c00 	.word	0x58000c00

08003358 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800335c:	2101      	movs	r1, #1
 800335e:	4802      	ldr	r0, [pc, #8]	; (8003368 <HW_IPCC_BLE_Init+0x10>)
 8003360:	f7ff ff04 	bl	800316c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003364:	bf00      	nop
}
 8003366:	bd80      	pop	{r7, pc}
 8003368:	58000c00 	.word	0x58000c00

0800336c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003370:	2101      	movs	r1, #1
 8003372:	4802      	ldr	r0, [pc, #8]	; (800337c <HW_IPCC_BLE_SendCmd+0x10>)
 8003374:	f7ff ff1a 	bl	80031ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003378:	bf00      	nop
}
 800337a:	bd80      	pop	{r7, pc}
 800337c:	58000c00 	.word	0x58000c00

08003380 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003384:	f006 fe92 	bl	800a0ac <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003388:	2101      	movs	r1, #1
 800338a:	4802      	ldr	r0, [pc, #8]	; (8003394 <HW_IPCC_BLE_EvtHandler+0x14>)
 800338c:	f7ff ff00 	bl	8003190 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003390:	bf00      	nop
}
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58000c00 	.word	0x58000c00

08003398 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800339c:	2120      	movs	r1, #32
 800339e:	4803      	ldr	r0, [pc, #12]	; (80033ac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80033a0:	f7ff fed2 	bl	8003148 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80033a4:	f006 feb2 	bl	800a10c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80033a8:	bf00      	nop
}
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	58000c00 	.word	0x58000c00

080033b0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80033b4:	2102      	movs	r1, #2
 80033b6:	4802      	ldr	r0, [pc, #8]	; (80033c0 <HW_IPCC_SYS_Init+0x10>)
 80033b8:	f7ff fed8 	bl	800316c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80033bc:	bf00      	nop
}
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	58000c00 	.word	0x58000c00

080033c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80033c8:	2102      	movs	r1, #2
 80033ca:	4804      	ldr	r0, [pc, #16]	; (80033dc <HW_IPCC_SYS_SendCmd+0x18>)
 80033cc:	f7ff feee 	bl	80031ac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80033d0:	2102      	movs	r1, #2
 80033d2:	4802      	ldr	r0, [pc, #8]	; (80033dc <HW_IPCC_SYS_SendCmd+0x18>)
 80033d4:	f7ff fea5 	bl	8003122 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80033d8:	bf00      	nop
}
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	58000c00 	.word	0x58000c00

080033e0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80033e4:	2102      	movs	r1, #2
 80033e6:	4803      	ldr	r0, [pc, #12]	; (80033f4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80033e8:	f7ff feae 	bl	8003148 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80033ec:	f006 fede 	bl	800a1ac <HW_IPCC_SYS_CmdEvtNot>

  return;
 80033f0:	bf00      	nop
}
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	58000c00 	.word	0x58000c00

080033f8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80033fc:	f006 feec 	bl	800a1d8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003400:	2102      	movs	r1, #2
 8003402:	4802      	ldr	r0, [pc, #8]	; (800340c <HW_IPCC_SYS_EvtHandler+0x14>)
 8003404:	f7ff fec4 	bl	8003190 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003408:	bf00      	nop
}
 800340a:	bd80      	pop	{r7, pc}
 800340c:	58000c00 	.word	0x58000c00

08003410 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003418:	2108      	movs	r1, #8
 800341a:	480c      	ldr	r0, [pc, #48]	; (800344c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800341c:	f7ff fed5 	bl	80031ca <LL_C1_IPCC_IsActiveFlag_CHx>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800342c:	2108      	movs	r1, #8
 800342e:	4807      	ldr	r0, [pc, #28]	; (800344c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003430:	f7ff fe77 	bl	8003122 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003434:	e006      	b.n	8003444 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800343a:	2108      	movs	r1, #8
 800343c:	4803      	ldr	r0, [pc, #12]	; (800344c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800343e:	f7ff feb5 	bl	80031ac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003442:	bf00      	nop
}
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	58000c00 	.word	0x58000c00
 8003450:	20000510 	.word	0x20000510

08003454 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003458:	2108      	movs	r1, #8
 800345a:	4806      	ldr	r0, [pc, #24]	; (8003474 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800345c:	f7ff fe74 	bl	8003148 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003466:	2108      	movs	r1, #8
 8003468:	4802      	ldr	r0, [pc, #8]	; (8003474 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800346a:	f7ff fe9f 	bl	80031ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800346e:	bf00      	nop
}
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	58000c00 	.word	0x58000c00
 8003478:	20000510 	.word	0x20000510

0800347c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003480:	2108      	movs	r1, #8
 8003482:	4802      	ldr	r0, [pc, #8]	; (800348c <HW_IPCC_TRACES_Init+0x10>)
 8003484:	f7ff fe72 	bl	800316c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003488:	bf00      	nop
}
 800348a:	bd80      	pop	{r7, pc}
 800348c:	58000c00 	.word	0x58000c00

08003490 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003494:	f006 ff48 	bl	800a328 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003498:	2108      	movs	r1, #8
 800349a:	4802      	ldr	r0, [pc, #8]	; (80034a4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800349c:	f7ff fe78 	bl	8003190 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80034a0:	bf00      	nop
}
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	58000c00 	.word	0x58000c00

080034a8 <LL_AHB2_GRP1_EnableClock>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4313      	orrs	r3, r2
 80034be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034cc:	68fb      	ldr	r3, [r7, #12]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80034f6:	2002      	movs	r0, #2
 80034f8:	f7ff ffd6 	bl	80034a8 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <BSP_LED_Init+0x6c>)
 8003500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003504:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350e:	2302      	movs	r3, #2
 8003510:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <BSP_LED_Init+0x70>)
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	f107 020c 	add.w	r2, r7, #12
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f001 f851 	bl	80045c8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4a08      	ldr	r2, [pc, #32]	; (800354c <BSP_LED_Init+0x70>)
 800352a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	4a05      	ldr	r2, [pc, #20]	; (8003548 <BSP_LED_Init+0x6c>)
 8003532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003536:	2200      	movs	r2, #0
 8003538:	4619      	mov	r1, r3
 800353a:	f001 f9b5 	bl	80048a8 <HAL_GPIO_WritePin>
}
 800353e:	bf00      	nop
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	0800cf80 	.word	0x0800cf80
 800354c:	20000008 	.word	0x20000008

08003550 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	4a07      	ldr	r2, [pc, #28]	; (800357c <BSP_LED_On+0x2c>)
 800355e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	4a06      	ldr	r2, [pc, #24]	; (8003580 <BSP_LED_On+0x30>)
 8003566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800356a:	2201      	movs	r2, #1
 800356c:	4619      	mov	r1, r3
 800356e:	f001 f99b 	bl	80048a8 <HAL_GPIO_WritePin>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000008 	.word	0x20000008
 8003580:	0800cf80 	.word	0x0800cf80

08003584 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	460a      	mov	r2, r1
 800358e:	71fb      	strb	r3, [r7, #7]
 8003590:	4613      	mov	r3, r2
 8003592:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <BSP_PB_Init+0x2e>
 80035aa:	2004      	movs	r0, #4
 80035ac:	f7ff ff7c 	bl	80034a8 <LL_AHB2_GRP1_EnableClock>
 80035b0:	e00c      	b.n	80035cc <BSP_PB_Init+0x48>
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d103      	bne.n	80035c0 <BSP_PB_Init+0x3c>
 80035b8:	2008      	movs	r0, #8
 80035ba:	f7ff ff75 	bl	80034a8 <LL_AHB2_GRP1_EnableClock>
 80035be:	e005      	b.n	80035cc <BSP_PB_Init+0x48>
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d102      	bne.n	80035cc <BSP_PB_Init+0x48>
 80035c6:	2008      	movs	r0, #8
 80035c8:	f7ff ff6e 	bl	80034a8 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80035cc:	79bb      	ldrb	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d117      	bne.n	8003602 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	4a20      	ldr	r2, [pc, #128]	; (8003658 <BSP_PB_Init+0xd4>)
 80035d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035da:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80035e0:	2301      	movs	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <BSP_PB_Init+0xd8>)
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	f107 020c 	add.w	r2, r7, #12
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 ffe6 	bl	80045c8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7fd fcc1 	bl	8000f84 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003602:	79bb      	ldrb	r3, [r7, #6]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d123      	bne.n	8003650 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <BSP_PB_Init+0xd4>)
 800360c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003610:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003612:	2301      	movs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003616:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800361a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <BSP_PB_Init+0xd8>)
 8003620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003624:	f107 020c 	add.w	r2, r7, #12
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f000 ffcc 	bl	80045c8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <BSP_PB_Init+0xdc>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	b25b      	sxtb	r3, r3
 8003638:	2200      	movs	r2, #0
 800363a:	210f      	movs	r1, #15
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa60 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	4a06      	ldr	r2, [pc, #24]	; (8003660 <BSP_PB_Init+0xdc>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	b25b      	sxtb	r3, r3
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fa73 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  }
}
 8003650:	bf00      	nop
 8003652:	3720      	adds	r7, #32
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	0800cf88 	.word	0x0800cf88
 800365c:	20000014 	.word	0x20000014
 8003660:	0800cf90 	.word	0x0800cf90

08003664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003668:	4b26      	ldr	r3, [pc, #152]	; (8003704 <SystemInit+0xa0>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <SystemInit+0xa0>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <SystemInit+0xa0>)
 8003676:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800367a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003696:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <SystemInit+0xa4>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b4:	f023 0305 	bic.w	r3, r3, #5
 80036b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80036bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <SystemInit+0xa8>)
 80036d6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	4a0b      	ldr	r2, [pc, #44]	; (800370c <SystemInit+0xa8>)
 80036de:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000ed00 	.word	0xe000ed00
 8003708:	faf6fefb 	.word	0xfaf6fefb
 800370c:	22041000 	.word	0x22041000

08003710 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a04      	ldr	r2, [pc, #16]	; (800372c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6053      	str	r3, [r2, #4]
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e0042000 	.word	0xe0042000

08003730 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a04      	ldr	r2, [pc, #16]	; (800374c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	6053      	str	r3, [r2, #4]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e0042000 	.word	0xe0042000

08003750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_Init+0x3c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_Init+0x3c>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003766:	2003      	movs	r0, #3
 8003768:	f000 f9c0 	bl	8003aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800376c:	2000      	movs	r0, #0
 800376e:	f000 f80f 	bl	8003790 <HAL_InitTick>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	71fb      	strb	r3, [r7, #7]
 800377c:	e001      	b.n	8003782 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800377e:	f7fe fe00 	bl	8002382 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003782:	79fb      	ldrb	r3, [r7, #7]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	58004000 	.word	0x58004000

08003790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_InitTick+0x6c>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d024      	beq.n	80037ee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037a4:	f002 fa0e 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <HAL_InitTick+0x6c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	4619      	mov	r1, r3
 80037b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f9d6 	bl	8003b6e <HAL_SYSTICK_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	d809      	bhi.n	80037e2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ce:	2200      	movs	r2, #0
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d6:	f000 f994 	bl	8003b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_InitTick+0x70>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e007      	b.n	80037f2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e004      	b.n	80037f2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e001      	b.n	80037f2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000028 	.word	0x20000028
 8003800:	20000024 	.word	0x20000024

08003804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_IncTick+0x20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_IncTick+0x24>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4413      	add	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_IncTick+0x24>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000028 	.word	0x20000028
 8003828:	20000514 	.word	0x20000514

0800382c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return uwTick;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_GetTick+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000514 	.word	0x20000514

08003844 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <HAL_GetTickPrio+0x14>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000024 	.word	0x20000024

0800385c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_GetTickFreq+0x14>)
 8003862:	781b      	ldrb	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000028 	.word	0x20000028

08003874 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003878:	f7ff ff4a 	bl	8003710 <LL_DBGMCU_EnableDBGSleepMode>
}
 800387c:	bf00      	nop
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003884:	f7ff ff54 	bl	8003730 <LL_DBGMCU_EnableDBGStopMode>
}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}

0800388c <__NVIC_SetPriorityGrouping>:
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038be:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	60d3      	str	r3, [r2, #12]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_GetPriorityGrouping>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <__NVIC_GetPriorityGrouping+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 0307 	and.w	r3, r3, #7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_EnableIRQ>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db0b      	blt.n	800391a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <__NVIC_EnableIRQ+0x38>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2001      	movs	r0, #1
 8003912:	fa00 f202 	lsl.w	r2, r0, r2
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000e100 	.word	0xe000e100

0800392c <__NVIC_DisableIRQ>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db12      	blt.n	8003964 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	490a      	ldr	r1, [pc, #40]	; (8003970 <__NVIC_DisableIRQ+0x44>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	3320      	adds	r3, #32
 8003954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003958:	f3bf 8f4f 	dsb	sy
}
 800395c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800395e:	f3bf 8f6f 	isb	sy
}
 8003962:	bf00      	nop
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPendingIRQ>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0c      	blt.n	80039a0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <__NVIC_SetPendingIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	3340      	adds	r3, #64	; 0x40
 800399c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_ClearPendingIRQ>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db0c      	blt.n	80039dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	4907      	ldr	r1, [pc, #28]	; (80039e8 <__NVIC_ClearPendingIRQ+0x38>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	3360      	adds	r3, #96	; 0x60
 80039d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100

080039ec <__NVIC_SetPriority>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0a      	blt.n	8003a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	490c      	ldr	r1, [pc, #48]	; (8003a38 <__NVIC_SetPriority+0x4c>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a14:	e00a      	b.n	8003a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4908      	ldr	r1, [pc, #32]	; (8003a3c <__NVIC_SetPriority+0x50>)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3b04      	subs	r3, #4
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	440b      	add	r3, r1
 8003a2a:	761a      	strb	r2, [r3, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <NVIC_EncodePriority>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf28      	it	cs
 8003a5e:	2304      	movcs	r3, #4
 8003a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d902      	bls.n	8003a70 <NVIC_EncodePriority+0x30>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b03      	subs	r3, #3
 8003a6e:	e000      	b.n	8003a72 <NVIC_EncodePriority+0x32>
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	401a      	ands	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	4313      	orrs	r3, r2
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab8:	d301      	bcc.n	8003abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00f      	b.n	8003ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <SysTick_Config+0x40>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac6:	210f      	movs	r1, #15
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003acc:	f7ff ff8e 	bl	80039ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad8:	2207      	movs	r2, #7
 8003ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff fec9 	bl	800388c <__NVIC_SetPriorityGrouping>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b10:	f7ff fee0 	bl	80038d4 <__NVIC_GetPriorityGrouping>
 8003b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff90 	bl	8003a40 <NVIC_EncodePriority>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff5f 	bl	80039ec <__NVIC_SetPriority>
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fed3 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fee3 	bl	800392c <__NVIC_DisableIRQ>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ff96 	bl	8003aa8 <SysTick_Config>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff feed 	bl	8003974 <__NVIC_SetPendingIRQ>
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fefd 	bl	80039b0 <__NVIC_ClearPendingIRQ>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e08e      	b.n	8003cf0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_DMA_Init+0x138>)
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d80f      	bhi.n	8003bfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <HAL_DMA_Init+0x13c>)
 8003be6:	4413      	add	r3, r2
 8003be8:	4a45      	ldr	r2, [pc, #276]	; (8003d00 <HAL_DMA_Init+0x140>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <HAL_DMA_Init+0x144>)
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8003bfc:	e00e      	b.n	8003c1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <HAL_DMA_Init+0x148>)
 8003c06:	4413      	add	r3, r2
 8003c08:	4a3d      	ldr	r2, [pc, #244]	; (8003d00 <HAL_DMA_Init+0x140>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a3c      	ldr	r2, [pc, #240]	; (8003d0c <HAL_DMA_Init+0x14c>)
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa74 	bl	800415c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c7c:	d102      	bne.n	8003c84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003c90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <HAL_DMA_Init+0x106>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d80c      	bhi.n	8003cc6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fa93 	bl	80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	e008      	b.n	8003cd8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40020407 	.word	0x40020407
 8003cfc:	bffdfff8 	.word	0xbffdfff8
 8003d00:	cccccccd 	.word	0xcccccccd
 8003d04:	40020000 	.word	0x40020000
 8003d08:	bffdfbf8 	.word	0xbffdfbf8
 8003d0c:	40020400 	.word	0x40020400

08003d10 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_DMA_Start_IT+0x20>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e066      	b.n	8003dfe <HAL_DMA_Start_IT+0xee>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d155      	bne.n	8003df0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9b9 	bl	80040e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 020e 	orr.w	r2, r2, #14
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e00f      	b.n	8003da8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 020a 	orr.w	r2, r2, #10
 8003da6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e005      	b.n	8003dfc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e04f      	b.n	8003eb8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d008      	beq.n	8003e36 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2204      	movs	r2, #4
 8003e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e040      	b.n	8003eb8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 020e 	bic.w	r2, r2, #14
 8003e44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f003 021c 	and.w	r2, r3, #28
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e82:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d005      	beq.n	8003ee8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	e047      	b.n	8003f78 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 020e 	bic.w	r2, r2, #14
 8003ef6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f003 021c 	and.w	r2, r3, #28
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
    }
  }
  return status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f003 031c 	and.w	r3, r3, #28
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d026      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x7a>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d107      	bne.n	8003fd6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0204 	bic.w	r2, r2, #4
 8003fd4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f003 021c 	and.w	r2, r3, #28
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2104      	movs	r1, #4
 8003fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d071      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ffa:	e06c      	b.n	80040d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	f003 031c 	and.w	r3, r3, #28
 8004004:	2202      	movs	r2, #2
 8004006:	409a      	lsls	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02e      	beq.n	800406e <HAL_DMA_IRQHandler+0xec>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d029      	beq.n	800406e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 020a 	bic.w	r2, r2, #10
 8004036:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f003 021c 	and.w	r2, r3, #28
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	2102      	movs	r1, #2
 800404e:	fa01 f202 	lsl.w	r2, r1, r2
 8004052:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d038      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800406c:	e033      	b.n	80040d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f003 031c 	and.w	r3, r3, #28
 8004076:	2208      	movs	r2, #8
 8004078:	409a      	lsls	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02a      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x156>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d025      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 020e 	bic.w	r2, r2, #14
 800409a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	f003 021c 	and.w	r2, r3, #28
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f202 	lsl.w	r2, r1, r2
 80040ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
}
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004108:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f003 021c 	and.w	r2, r3, #28
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2101      	movs	r1, #1
 8004118:	fa01 f202 	lsl.w	r2, r1, r2
 800411c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b10      	cmp	r3, #16
 800412c:	d108      	bne.n	8004140 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800413e:	e007      	b.n	8004150 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	60da      	str	r2, [r3, #12]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800416c:	429a      	cmp	r2, r3
 800416e:	d80a      	bhi.n	8004186 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800417c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6493      	str	r3, [r2, #72]	; 0x48
 8004184:	e007      	b.n	8004196 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	009a      	lsls	r2, r3, #2
 800418e:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004190:	4413      	add	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3b08      	subs	r3, #8
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80041ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	2201      	movs	r2, #1
 80041b6:	409a      	lsls	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40020407 	.word	0x40020407
 80041cc:	4002081c 	.word	0x4002081c
 80041d0:	cccccccd 	.word	0xcccccccd
 80041d4:	40020880 	.word	0x40020880

080041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	461a      	mov	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80041fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b01      	subs	r3, #1
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2201      	movs	r2, #1
 8004208:	409a      	lsls	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	1000823f 	.word	0x1000823f
 8004220:	40020940 	.word	0x40020940

08004224 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d12b      	bne.n	8004292 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004244:	2302      	movs	r3, #2
 8004246:	e025      	b.n	8004294 <HAL_DMAEx_ConfigMuxSync+0x70>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004258:	4013      	ands	r3, r2
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	68d2      	ldr	r2, [r2, #12]
 8004262:	3a01      	subs	r2, #1
 8004264:	04d2      	lsls	r2, r2, #19
 8004266:	4311      	orrs	r1, r2
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	6852      	ldr	r2, [r2, #4]
 800426c:	4311      	orrs	r1, r2
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	7a12      	ldrb	r2, [r2, #8]
 8004272:	0412      	lsls	r2, r2, #16
 8004274:	4311      	orrs	r1, r2
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	7a52      	ldrb	r2, [r2, #9]
 800427a:	0252      	lsls	r2, r2, #9
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004282:	430b      	orrs	r3, r1
 8004284:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000fdff 	.word	0xe000fdff

080042a4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	015b      	lsls	r3, r3, #5
 80042cc:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80042d0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80042d4:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_FLASH_Unlock+0x38>)
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da0b      	bge.n	8004312 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_FLASH_Unlock+0x38>)
 80042fc:	4a09      	ldr	r2, [pc, #36]	; (8004324 <HAL_FLASH_Unlock+0x3c>)
 80042fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <HAL_FLASH_Unlock+0x38>)
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <HAL_FLASH_Unlock+0x40>)
 8004304:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_FLASH_Unlock+0x38>)
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	da01      	bge.n	8004312 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004312:	79fb      	ldrb	r3, [r7, #7]
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	58004000 	.word	0x58004000
 8004324:	45670123 	.word	0x45670123
 8004328:	cdef89ab 	.word	0xcdef89ab

0800432c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_FLASH_Lock+0x30>)
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <HAL_FLASH_Lock+0x30>)
 800433c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004340:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_FLASH_Lock+0x30>)
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	db01      	blt.n	800434e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800434e:	79fb      	ldrb	r3, [r7, #7]
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	58004000 	.word	0x58004000

08004360 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004368:	f7ff fa60 	bl	800382c <HAL_GetTick>
 800436c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800436e:	e009      	b.n	8004384 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004370:	f7ff fa5c 	bl	800382c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d801      	bhi.n	8004384 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e054      	b.n	800442e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004384:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d0ee      	beq.n	8004370 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8004392:	4b29      	ldr	r3, [pc, #164]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80043a2:	4b25      	ldr	r3, [pc, #148]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 80043b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043b8:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <FLASH_WaitForLastOperation+0x86>
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80043e0:	4915      	ldr	r1, [pc, #84]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	618b      	str	r3, [r1, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <FLASH_WaitForLastOperation+0x9a>
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80043f8:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004400:	4a0e      	ldr	r2, [pc, #56]	; (800443c <FLASH_WaitForLastOperation+0xdc>)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e011      	b.n	800442e <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800440a:	f7ff fa0f 	bl	800382c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d801      	bhi.n	800441e <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e007      	b.n	800442e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <FLASH_WaitForLastOperation+0xd8>)
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442a:	d0ee      	beq.n	800440a <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	58004000 	.word	0x58004000
 800443c:	20000518 	.word	0x20000518

08004440 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <HAL_FLASHEx_Erase+0x9c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_FLASHEx_Erase+0x16>
 8004452:	2302      	movs	r3, #2
 8004454:	e03d      	b.n	80044d2 <HAL_FLASHEx_Erase+0x92>
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_FLASHEx_Erase+0x9c>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800445c:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <HAL_FLASHEx_Erase+0x9c>)
 800445e:	2200      	movs	r2, #0
 8004460:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004466:	f7ff ff7b 	bl	8004360 <FLASH_WaitForLastOperation>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12a      	bne.n	80044ca <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d124      	bne.n	80044c6 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004482:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	e012      	b.n	80044b2 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800448c:	68b8      	ldr	r0, [r7, #8]
 800448e:	f000 f827 	bl	80044e0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004496:	f7ff ff63 	bl	8004360 <FLASH_WaitForLastOperation>
 800449a:	4603      	mov	r3, r0
 800449c:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	601a      	str	r2, [r3, #0]
          break;
 80044aa:	e00a      	b.n	80044c2 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4413      	add	r3, r2
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3e4      	bcc.n	800448c <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80044c2:	f000 f86f 	bl	80045a4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80044c6:	f000 f825 	bl	8004514 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <HAL_FLASHEx_Erase+0x9c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]

  return status;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000518 	.word	0x20000518

080044e0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <FLASH_PageErase+0x30>)
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	4a06      	ldr	r2, [pc, #24]	; (8004510 <FLASH_PageErase+0x30>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	f043 0302 	orr.w	r3, r3, #2
 8004500:	6153      	str	r3, [r2, #20]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	58004000 	.word	0x58004000

08004514 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d117      	bne.n	8004556 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004526:	4b1e      	ldr	r3, [pc, #120]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 800452c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004530:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004548:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004554:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004562:	d117      	bne.n	8004594 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 800456a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 8004582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004586:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <FLASH_FlushCaches+0x8c>)
 800458e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004592:	6013      	str	r3, [r2, #0]
  }
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58004000 	.word	0x58004000

080045a4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <FLASH_AcknowledgePageErase+0x20>)
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	4a05      	ldr	r2, [pc, #20]	; (80045c4 <FLASH_AcknowledgePageErase+0x20>)
 80045ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045b2:	f023 0302 	bic.w	r3, r3, #2
 80045b6:	6153      	str	r3, [r2, #20]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	58004000 	.word	0x58004000

080045c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d6:	e14c      	b.n	8004872 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 813e 	beq.w	800486c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d005      	beq.n	8004608 <HAL_GPIO_Init+0x40>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d130      	bne.n	800466a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2203      	movs	r2, #3
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800463e:	2201      	movs	r2, #1
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0201 	and.w	r2, r3, #1
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d017      	beq.n	80046a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2203      	movs	r2, #3
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d123      	bne.n	80046fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	08da      	lsrs	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3208      	adds	r2, #8
 80046ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	220f      	movs	r2, #15
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4013      	ands	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	08da      	lsrs	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3208      	adds	r2, #8
 80046f4:	6939      	ldr	r1, [r7, #16]
 80046f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0203 	and.w	r2, r3, #3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8098 	beq.w	800486c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800473c:	4a54      	ldr	r2, [pc, #336]	; (8004890 <HAL_GPIO_Init+0x2c8>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220f      	movs	r2, #15
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004766:	d019      	beq.n	800479c <HAL_GPIO_Init+0x1d4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a4a      	ldr	r2, [pc, #296]	; (8004894 <HAL_GPIO_Init+0x2cc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_GPIO_Init+0x1d0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a49      	ldr	r2, [pc, #292]	; (8004898 <HAL_GPIO_Init+0x2d0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00d      	beq.n	8004794 <HAL_GPIO_Init+0x1cc>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a48      	ldr	r2, [pc, #288]	; (800489c <HAL_GPIO_Init+0x2d4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d007      	beq.n	8004790 <HAL_GPIO_Init+0x1c8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a47      	ldr	r2, [pc, #284]	; (80048a0 <HAL_GPIO_Init+0x2d8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_GPIO_Init+0x1c4>
 8004788:	2304      	movs	r3, #4
 800478a:	e008      	b.n	800479e <HAL_GPIO_Init+0x1d6>
 800478c:	2307      	movs	r3, #7
 800478e:	e006      	b.n	800479e <HAL_GPIO_Init+0x1d6>
 8004790:	2303      	movs	r3, #3
 8004792:	e004      	b.n	800479e <HAL_GPIO_Init+0x1d6>
 8004794:	2302      	movs	r3, #2
 8004796:	e002      	b.n	800479e <HAL_GPIO_Init+0x1d6>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_GPIO_Init+0x1d6>
 800479c:	2300      	movs	r3, #0
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	f002 0203 	and.w	r2, r2, #3
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	4093      	lsls	r3, r2
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047ae:	4938      	ldr	r1, [pc, #224]	; (8004890 <HAL_GPIO_Init+0x2c8>)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	3302      	adds	r3, #2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047bc:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4013      	ands	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047e0:	4a30      	ldr	r2, [pc, #192]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800480a:	4a26      	ldr	r2, [pc, #152]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 8004812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	43db      	mvns	r3, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004836:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800483e:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	43db      	mvns	r3, r3
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4013      	ands	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004864:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <HAL_GPIO_Init+0x2dc>)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3301      	adds	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	f47f aeab 	bne.w	80045d8 <HAL_GPIO_Init+0x10>
  }
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40010000 	.word	0x40010000
 8004894:	48000400 	.word	0x48000400
 8004898:	48000800 	.word	0x48000800
 800489c:	48000c00 	.word	0x48000c00
 80048a0:	48001000 	.word	0x48001000
 80048a4:	58000800 	.word	0x58000800

080048a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	807b      	strh	r3, [r7, #2]
 80048b4:	4613      	mov	r3, r2
 80048b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048b8:	787b      	ldrb	r3, [r7, #1]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048c4:	e002      	b.n	80048cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048ee:	4a05      	ldr	r2, [pc, #20]	; (8004904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc fba7 	bl	800104a <HAL_GPIO_EXTI_Callback>
  }
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	58000800 	.word	0x58000800

08004908 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	43db      	mvns	r3, r3
 800491c:	4906      	ldr	r1, [pc, #24]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 800491e:	4013      	ands	r3, r2
 8004920:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004922:	4a05      	ldr	r2, [pc, #20]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f807 	bl	800493c <HAL_HSEM_FreeCallback>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	58001500 	.word	0x58001500

0800493c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01e      	beq.n	80049a0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_IPCC_Init+0x60>)
 8004964:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd fd16 	bl	80023a4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f000 f85b 	bl	8004a34 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f82c 	bl	80049e8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800499e:	e001      	b.n	80049a4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	58000c00 	.word	0x58000c00

080049b4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e00f      	b.n	8004a16 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	4a0b      	ldr	r2, [pc, #44]	; (8004a2c <IPCC_SetDefaultCallbacks+0x44>)
 8004a00:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3306      	adds	r3, #6
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <IPCC_SetDefaultCallbacks+0x48>)
 8004a0e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d9ec      	bls.n	80049f6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	080049b5 	.word	0x080049b5
 8004a30:	080049cf 	.word	0x080049cf

08004a34 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004a48:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	223f      	movs	r2, #63	; 0x3f
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	58000400 	.word	0x58000400

08004a7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004a80:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	58000400 	.word	0x58000400

08004a98 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aaa:	d101      	bne.n	8004ab0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_RCC_HSE_Enable>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <LL_RCC_HSE_Disable>:
{
 8004ada:	b480      	push	{r7}
 8004adc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_RCC_HSE_IsReady>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0a:	d101      	bne.n	8004b10 <LL_RCC_HSE_IsReady+0x18>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <LL_RCC_HSE_IsReady+0x1a>
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_RCC_HSI_Enable>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_RCC_HSI_Disable>:
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <LL_RCC_HSI_IsReady>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d101      	bne.n	8004b70 <LL_RCC_HSI_IsReady+0x18>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <LL_RCC_HSI_IsReady+0x1a>
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <LL_RCC_HSI_SetCalibTrimming>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b96:	4313      	orrs	r3, r2
 8004b98:	604b      	str	r3, [r1, #4]
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_RCC_HSI48_Enable>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_HSI48_Disable>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_HSI48_IsReady>:
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d101      	bne.n	8004c02 <LL_RCC_HSI48_IsReady+0x18>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <LL_RCC_HSI48_IsReady+0x1a>
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_RCC_LSE_Enable>:
{
 8004c0e:	b480      	push	{r7}
 8004c10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c26:	bf00      	nop
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_RCC_LSE_Disable>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_LSE_EnableBypass>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_RCC_LSE_DisableBypass>:
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_RCC_LSE_IsReady>:
{
 8004c96:	b480      	push	{r7}
 8004c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d101      	bne.n	8004cae <LL_RCC_LSE_IsReady+0x18>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <LL_RCC_LSE_IsReady+0x1a>
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_RCC_LSI1_Enable>:
{
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_RCC_LSI1_Disable>:
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <LL_RCC_LSI1_IsReady>:
{
 8004cfe:	b480      	push	{r7}
 8004d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d101      	bne.n	8004d16 <LL_RCC_LSI1_IsReady+0x18>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <LL_RCC_LSI1_IsReady+0x1a>
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_LSI2_Enable>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_LSI2_Disable>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_RCC_LSI2_IsReady>:
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d101      	bne.n	8004d7e <LL_RCC_LSI2_IsReady+0x18>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <LL_RCC_LSI2_IsReady+0x1a>
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_RCC_LSI2_SetTrimming>:
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <LL_RCC_MSI_Enable>:
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6013      	str	r3, [r2, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_RCC_MSI_Disable>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	6013      	str	r3, [r2, #0]
}
 8004dea:	bf00      	nop
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_RCC_MSI_IsReady>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d101      	bne.n	8004e0a <LL_RCC_MSI_IsReady+0x16>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <LL_RCC_MSI_IsReady+0x18>
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <LL_RCC_MSI_SetRange>:
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <LL_RCC_MSI_GetRange>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2bb0      	cmp	r3, #176	; 0xb0
 8004e54:	d901      	bls.n	8004e5a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004e56:	23b0      	movs	r3, #176	; 0xb0
 8004e58:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004e5a:	687b      	ldr	r3, [r7, #4]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_RCC_SetSysClkSource>:
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f023 0203 	bic.w	r2, r3, #3
 8004ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_GetSysClkSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_SetAHBPrescaler>:
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_C2_RCC_SetAHBPrescaler>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <LL_RCC_SetAHB4Prescaler>:
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f36:	f023 020f 	bic.w	r2, r3, #15
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_RCC_SetAPB1Prescaler>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_SetAPB2Prescaler>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_RCC_GetAHBPrescaler>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_RCC_GetAHB4Prescaler>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <LL_RCC_GetAPB1Prescaler>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_RCC_GetAPB2Prescaler>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_RCC_PLL_Enable>:
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_RCC_PLL_Disable>:
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005038:	6013      	str	r3, [r2, #0]
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_RCC_PLL_IsReady>:
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005056:	d101      	bne.n	800505c <LL_RCC_PLL_IsReady+0x18>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <LL_RCC_PLL_IsReady+0x1a>
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_PLL_GetN>:
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <LL_RCC_PLL_GetR>:
{
 8005082:	b480      	push	{r7}
 8005084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_RCC_PLL_GetDivider>:
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <LL_RCC_PLL_GetMainSource>:
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0303 	and.w	r3, r3, #3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <LL_RCC_IsActiveFlag_HPRE>:
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050dc:	d101      	bne.n	80050e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005102:	d101      	bne.n	8005108 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005128:	d101      	bne.n	800512e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800514c:	d101      	bne.n	8005152 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800515e:	b480      	push	{r7}
 8005160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005170:	d101      	bne.n	8005176 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b08d      	sub	sp, #52	; 0x34
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e363      	b.n	800585e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 808d 	beq.w	80052be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a4:	f7ff fe89 	bl	8004eba <LL_RCC_GetSysClkSource>
 80051a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051aa:	f7ff ff82 	bl	80050b2 <LL_RCC_PLL_GetMainSource>
 80051ae:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <HAL_RCC_OscConfig+0x3e>
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d147      	bne.n	800524c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d144      	bne.n	800524c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e347      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80051d2:	f7ff fe34 	bl	8004e3e <LL_RCC_MSI_GetRange>
 80051d6:	4603      	mov	r3, r0
 80051d8:	429c      	cmp	r4, r3
 80051da:	d914      	bls.n	8005206 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fd2f 	bl	8005c44 <RCC_SetFlashLatencyFromMSIRange>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e336      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fe0e 	bl	8004e16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fe32 	bl	8004e68 <LL_RCC_MSI_SetCalibTrimming>
 8005204:	e013      	b.n	800522e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fe03 	bl	8004e16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fe27 	bl	8004e68 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fd10 	bl	8005c44 <RCC_SetFlashLatencyFromMSIRange>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e317      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800522e:	f000 fcc9 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005232:	4603      	mov	r3, r0
 8005234:	4aa4      	ldr	r2, [pc, #656]	; (80054c8 <HAL_RCC_OscConfig+0x344>)
 8005236:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005238:	4ba4      	ldr	r3, [pc, #656]	; (80054cc <HAL_RCC_OscConfig+0x348>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe faa7 	bl	8003790 <HAL_InitTick>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d039      	beq.n	80052bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e308      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01e      	beq.n	8005292 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005254:	f7ff fdb0 	bl	8004db8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005258:	f7fe fae8 	bl	800382c <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005260:	f7fe fae4 	bl	800382c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e2f5      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005272:	f7ff fdbf 	bl	8004df4 <LL_RCC_MSI_IsReady>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f1      	beq.n	8005260 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fdc8 	bl	8004e16 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fdec 	bl	8004e68 <LL_RCC_MSI_SetCalibTrimming>
 8005290:	e015      	b.n	80052be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005292:	f7ff fda0 	bl	8004dd6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005296:	f7fe fac9 	bl	800382c <HAL_GetTick>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800529e:	f7fe fac5 	bl	800382c <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e2d6      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80052b0:	f7ff fda0 	bl	8004df4 <LL_RCC_MSI_IsReady>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f1      	bne.n	800529e <HAL_RCC_OscConfig+0x11a>
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d047      	beq.n	800535a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ca:	f7ff fdf6 	bl	8004eba <LL_RCC_GetSysClkSource>
 80052ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052d0:	f7ff feef 	bl	80050b2 <LL_RCC_PLL_GetMainSource>
 80052d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_OscConfig+0x164>
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	2b0c      	cmp	r3, #12
 80052e0:	d108      	bne.n	80052f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d105      	bne.n	80052f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d134      	bne.n	800535a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e2b4      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d102      	bne.n	8005304 <HAL_RCC_OscConfig+0x180>
 80052fe:	f7ff fbdd 	bl	8004abc <LL_RCC_HSE_Enable>
 8005302:	e001      	b.n	8005308 <HAL_RCC_OscConfig+0x184>
 8005304:	f7ff fbe9 	bl	8004ada <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d012      	beq.n	8005336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fe fa8c 	bl	800382c <HAL_GetTick>
 8005314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005318:	f7fe fa88 	bl	800382c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e299      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800532a:	f7ff fbe5 	bl	8004af8 <LL_RCC_HSE_IsReady>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f1      	beq.n	8005318 <HAL_RCC_OscConfig+0x194>
 8005334:	e011      	b.n	800535a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fe fa79 	bl	800382c <HAL_GetTick>
 800533a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533e:	f7fe fa75 	bl	800382c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b64      	cmp	r3, #100	; 0x64
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e286      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005350:	f7ff fbd2 	bl	8004af8 <LL_RCC_HSE_IsReady>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f1      	bne.n	800533e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d04c      	beq.n	8005400 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005366:	f7ff fda8 	bl	8004eba <LL_RCC_GetSysClkSource>
 800536a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800536c:	f7ff fea1 	bl	80050b2 <LL_RCC_PLL_GetMainSource>
 8005370:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d005      	beq.n	8005384 <HAL_RCC_OscConfig+0x200>
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b0c      	cmp	r3, #12
 800537c:	d10e      	bne.n	800539c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d10b      	bne.n	800539c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e266      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fbf1 	bl	8004b7c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800539a:	e031      	b.n	8005400 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d019      	beq.n	80053d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a4:	f7ff fbba 	bl	8004b1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fe fa40 	bl	800382c <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b0:	f7fe fa3c 	bl	800382c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e24d      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80053c2:	f7ff fbc9 	bl	8004b58 <LL_RCC_HSI_IsReady>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f1      	beq.n	80053b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fbd3 	bl	8004b7c <LL_RCC_HSI_SetCalibTrimming>
 80053d6:	e013      	b.n	8005400 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053d8:	f7ff fbaf 	bl	8004b3a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fe fa26 	bl	800382c <HAL_GetTick>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e4:	f7fe fa22 	bl	800382c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e233      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80053f6:	f7ff fbaf 	bl	8004b58 <LL_RCC_HSI_IsReady>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f1      	bne.n	80053e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80a3 	beq.w	8005560 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d076      	beq.n	8005510 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	d046      	beq.n	80054bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800542e:	f7ff fc66 	bl	8004cfe <LL_RCC_LSI1_IsReady>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d113      	bne.n	8005460 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005438:	f7ff fc3f 	bl	8004cba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800543c:	f7fe f9f6 	bl	800382c <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005444:	f7fe f9f2 	bl	800382c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e203      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005456:	f7ff fc52 	bl	8004cfe <LL_RCC_LSI1_IsReady>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f1      	beq.n	8005444 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005460:	f7ff fc5f 	bl	8004d22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fe f9e2 	bl	800382c <HAL_GetTick>
 8005468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800546c:	f7fe f9de 	bl	800382c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b03      	cmp	r3, #3
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e1ef      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800547e:	f7ff fc72 	bl	8004d66 <LL_RCC_LSI2_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f1      	beq.n	800546c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fc7c 	bl	8004d8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005492:	f7ff fc23 	bl	8004cdc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fe f9c9 	bl	800382c <HAL_GetTick>
 800549a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800549e:	f7fe f9c5 	bl	800382c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1d6      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80054b0:	f7ff fc25 	bl	8004cfe <LL_RCC_LSI1_IsReady>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f1      	bne.n	800549e <HAL_RCC_OscConfig+0x31a>
 80054ba:	e051      	b.n	8005560 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80054bc:	f7ff fbfd 	bl	8004cba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fe f9b4 	bl	800382c <HAL_GetTick>
 80054c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80054c6:	e00c      	b.n	80054e2 <HAL_RCC_OscConfig+0x35e>
 80054c8:	20000020 	.word	0x20000020
 80054cc:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054d0:	f7fe f9ac 	bl	800382c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e1bd      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80054e2:	f7ff fc0c 	bl	8004cfe <LL_RCC_LSI1_IsReady>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f1      	beq.n	80054d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80054ec:	f7ff fc2a 	bl	8004d44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80054f2:	f7fe f99b 	bl	800382c <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e1ac      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005504:	f7ff fc2f 	bl	8004d66 <LL_RCC_LSI2_IsReady>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f1      	bne.n	80054f2 <HAL_RCC_OscConfig+0x36e>
 800550e:	e027      	b.n	8005560 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005510:	f7ff fc18 	bl	8004d44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fe f98a 	bl	800382c <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800551c:	f7fe f986 	bl	800382c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e197      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800552e:	f7ff fc1a 	bl	8004d66 <LL_RCC_LSI2_IsReady>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1f1      	bne.n	800551c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005538:	f7ff fbd0 	bl	8004cdc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fe f976 	bl	800382c <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005544:	f7fe f972 	bl	800382c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e183      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005556:	f7ff fbd2 	bl	8004cfe <LL_RCC_LSI1_IsReady>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f1      	bne.n	8005544 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d05b      	beq.n	8005624 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800556c:	4ba7      	ldr	r3, [pc, #668]	; (800580c <HAL_RCC_OscConfig+0x688>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d114      	bne.n	80055a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005578:	f7ff fa70 	bl	8004a5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557c:	f7fe f956 	bl	800382c <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005584:	f7fe f952 	bl	800382c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e163      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005596:	4b9d      	ldr	r3, [pc, #628]	; (800580c <HAL_RCC_OscConfig+0x688>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d102      	bne.n	80055b0 <HAL_RCC_OscConfig+0x42c>
 80055aa:	f7ff fb30 	bl	8004c0e <LL_RCC_LSE_Enable>
 80055ae:	e00c      	b.n	80055ca <HAL_RCC_OscConfig+0x446>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d104      	bne.n	80055c2 <HAL_RCC_OscConfig+0x43e>
 80055b8:	f7ff fb4b 	bl	8004c52 <LL_RCC_LSE_EnableBypass>
 80055bc:	f7ff fb27 	bl	8004c0e <LL_RCC_LSE_Enable>
 80055c0:	e003      	b.n	80055ca <HAL_RCC_OscConfig+0x446>
 80055c2:	f7ff fb35 	bl	8004c30 <LL_RCC_LSE_Disable>
 80055c6:	f7ff fb55 	bl	8004c74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d014      	beq.n	80055fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fe f92b 	bl	800382c <HAL_GetTick>
 80055d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80055d8:	e00a      	b.n	80055f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055da:	f7fe f927 	bl	800382c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e136      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80055f0:	f7ff fb51 	bl	8004c96 <LL_RCC_LSE_IsReady>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0ef      	beq.n	80055da <HAL_RCC_OscConfig+0x456>
 80055fa:	e013      	b.n	8005624 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fe f916 	bl	800382c <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005602:	e00a      	b.n	800561a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7fe f912 	bl	800382c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e121      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800561a:	f7ff fb3c 	bl	8004c96 <LL_RCC_LSE_IsReady>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ef      	bne.n	8005604 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d02c      	beq.n	800568a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	d014      	beq.n	8005662 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005638:	f7ff fab5 	bl	8004ba6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563c:	f7fe f8f6 	bl	800382c <HAL_GetTick>
 8005640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005644:	f7fe f8f2 	bl	800382c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e103      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005656:	f7ff fac8 	bl	8004bea <LL_RCC_HSI48_IsReady>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f1      	beq.n	8005644 <HAL_RCC_OscConfig+0x4c0>
 8005660:	e013      	b.n	800568a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005662:	f7ff fab1 	bl	8004bc8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fe f8e1 	bl	800382c <HAL_GetTick>
 800566a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800566e:	f7fe f8dd 	bl	800382c <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e0ee      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005680:	f7ff fab3 	bl	8004bea <LL_RCC_HSI48_IsReady>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f1      	bne.n	800566e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80e4 	beq.w	800585c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005694:	f7ff fc11 	bl	8004eba <LL_RCC_GetSysClkSource>
 8005698:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	f040 80b4 	bne.w	8005814 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0203 	and.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d123      	bne.n	8005702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d11c      	bne.n	8005702 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	0a1b      	lsrs	r3, r3, #8
 80056cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d114      	bne.n	8005702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d10d      	bne.n	8005702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d05d      	beq.n	80057be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d058      	beq.n	80057ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e0a1      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800571a:	f7ff fc84 	bl	8005026 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800571e:	f7fe f885 	bl	800382c <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005726:	f7fe f881 	bl	800382c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e092      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ef      	bne.n	8005726 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	4b30      	ldr	r3, [pc, #192]	; (8005810 <HAL_RCC_OscConfig+0x68c>)
 800574e:	4013      	ands	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005758:	4311      	orrs	r1, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800575e:	0212      	lsls	r2, r2, #8
 8005760:	4311      	orrs	r1, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005766:	4311      	orrs	r1, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800576c:	4311      	orrs	r1, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005772:	430a      	orrs	r2, r1
 8005774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005778:	4313      	orrs	r3, r2
 800577a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800577c:	f7ff fc44 	bl	8005008 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005790:	f7fe f84c 	bl	800382c <HAL_GetTick>
 8005794:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005798:	f7fe f848 	bl	800382c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e059      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ef      	beq.n	8005798 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b8:	e050      	b.n	800585c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e04f      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d147      	bne.n	800585c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057cc:	f7ff fc1c 	bl	8005008 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057e0:	f7fe f824 	bl	800382c <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fe f820 	bl	800382c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e031      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ef      	beq.n	80057e8 <HAL_RCC_OscConfig+0x664>
 8005808:	e028      	b.n	800585c <HAL_RCC_OscConfig+0x6d8>
 800580a:	bf00      	nop
 800580c:	58000400 	.word	0x58000400
 8005810:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d01e      	beq.n	8005858 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800581a:	f7ff fc04 	bl	8005026 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581e:	f7fe f805 	bl	800382c <HAL_GetTick>
 8005822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005826:	f7fe f801 	bl	800382c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e012      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ef      	bne.n	8005826 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_OscConfig+0x6e4>)
 8005852:	4013      	ands	r3, r2
 8005854:	60cb      	str	r3, [r1, #12]
 8005856:	e001      	b.n	800585c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3734      	adds	r7, #52	; 0x34
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	bf00      	nop
 8005868:	eefefffc 	.word	0xeefefffc

0800586c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e12d      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005880:	4b98      	ldr	r3, [pc, #608]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d91b      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b95      	ldr	r3, [pc, #596]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 0207 	bic.w	r2, r3, #7
 8005896:	4993      	ldr	r1, [pc, #588]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800589e:	f7fd ffc5 	bl	800382c <HAL_GetTick>
 80058a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058a6:	f7fd ffc1 	bl	800382c <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e111      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b8:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d1ef      	bne.n	80058a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fafb 	bl	8004ed2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058dc:	f7fd ffa6 	bl	800382c <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058e4:	f7fd ffa2 	bl	800382c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e0f2      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80058f6:	f7ff fbe8 	bl	80050ca <LL_RCC_IsActiveFlag_HPRE>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f1      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d016      	beq.n	800593a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff faf2 	bl	8004efa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005916:	f7fd ff89 	bl	800382c <HAL_GetTick>
 800591a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800591e:	f7fd ff85 	bl	800382c <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e0d5      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005930:	f7ff fbdd 	bl	80050ee <LL_RCC_IsActiveFlag_C2HPRE>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f1      	beq.n	800591e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d016      	beq.n	8005974 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff faeb 	bl	8004f26 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005950:	f7fd ff6c 	bl	800382c <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005958:	f7fd ff68 	bl	800382c <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0b8      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800596a:	f7ff fbd3 	bl	8005114 <LL_RCC_IsActiveFlag_SHDHPRE>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f1      	beq.n	8005958 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d016      	beq.n	80059ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fae5 	bl	8004f54 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800598a:	f7fd ff4f 	bl	800382c <HAL_GetTick>
 800598e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005992:	f7fd ff4b 	bl	800382c <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e09b      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80059a4:	f7ff fbc9 	bl	800513a <LL_RCC_IsActiveFlag_PPRE1>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f1      	beq.n	8005992 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d017      	beq.n	80059ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fadb 	bl	8004f7c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c6:	f7fd ff31 	bl	800382c <HAL_GetTick>
 80059ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059ce:	f7fd ff2d 	bl	800382c <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e07d      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80059e0:	f7ff fbbd 	bl	800515e <LL_RCC_IsActiveFlag_PPRE2>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f1      	beq.n	80059ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d043      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d106      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80059fe:	f7ff f87b 	bl	8004af8 <LL_RCC_HSE_IsReady>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11e      	bne.n	8005a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e067      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d106      	bne.n	8005a22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a14:	f7ff fb16 	bl	8005044 <LL_RCC_PLL_IsReady>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d113      	bne.n	8005a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e05c      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005a2a:	f7ff f9e3 	bl	8004df4 <LL_RCC_MSI_IsReady>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d108      	bne.n	8005a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e051      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005a38:	f7ff f88e 	bl	8004b58 <LL_RCC_HSI_IsReady>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e04a      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fa21 	bl	8004e92 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a50:	f7fd feec 	bl	800382c <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a58:	f7fd fee8 	bl	800382c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e036      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6e:	f7ff fa24 	bl	8004eba <LL_RCC_GetSysClkSource>
 8005a72:	4602      	mov	r2, r0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d1ec      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a7e:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d21b      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8c:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f023 0207 	bic.w	r2, r3, #7
 8005a94:	4913      	ldr	r1, [pc, #76]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9c:	f7fd fec6 	bl	800382c <HAL_GetTick>
 8005aa0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005aa4:	f7fd fec2 	bl	800382c <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e012      	b.n	8005adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <HAL_RCC_ClockConfig+0x278>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d1ef      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ac4:	f000 f87e 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <HAL_RCC_ClockConfig+0x27c>)
 8005acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005ace:	f7fd feb9 	bl	8003844 <HAL_GetTickPrio>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fd fe5b 	bl	8003790 <HAL_InitTick>
 8005ada:	4603      	mov	r3, r0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	58004000 	.word	0x58004000
 8005ae8:	20000020 	.word	0x20000020

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af2:	f7ff f9e2 	bl	8004eba <LL_RCC_GetSysClkSource>
 8005af6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005afe:	f7ff f99e 	bl	8004e3e <LL_RCC_MSI_GetRange>
 8005b02:	4603      	mov	r3, r0
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	4a2b      	ldr	r2, [pc, #172]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e04b      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d102      	bne.n	8005b20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b1a:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e045      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d10a      	bne.n	8005b3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b26:	f7fe ffb7 	bl	8004a98 <LL_RCC_HSE_IsEnabledDiv2>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d102      	bne.n	8005b36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005b30:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e03a      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e037      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005b3c:	f7ff fab9 	bl	80050b2 <LL_RCC_PLL_GetMainSource>
 8005b40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d003      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0x64>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d003      	beq.n	8005b56 <HAL_RCC_GetSysClockFreq+0x6a>
 8005b4e:	e00d      	b.n	8005b6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b52:	60bb      	str	r3, [r7, #8]
        break;
 8005b54:	e015      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b56:	f7fe ff9f 	bl	8004a98 <LL_RCC_HSE_IsEnabledDiv2>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005b64:	e00d      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005b68:	60bb      	str	r3, [r7, #8]
        break;
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b6c:	f7ff f967 	bl	8004e3e <LL_RCC_MSI_GetRange>
 8005b70:	4603      	mov	r3, r0
 8005b72:	091b      	lsrs	r3, r3, #4
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	4a0f      	ldr	r2, [pc, #60]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b7e:	60bb      	str	r3, [r7, #8]
        break;
 8005b80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005b82:	f7ff fa71 	bl	8005068 <LL_RCC_PLL_GetN>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	fb03 f402 	mul.w	r4, r3, r2
 8005b8e:	f7ff fa84 	bl	800509a <LL_RCC_PLL_GetDivider>
 8005b92:	4603      	mov	r3, r0
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	3301      	adds	r3, #1
 8005b98:	fbb4 f4f3 	udiv	r4, r4, r3
 8005b9c:	f7ff fa71 	bl	8005082 <LL_RCC_PLL_GetR>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	0f5b      	lsrs	r3, r3, #29
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	fbb4 f3f3 	udiv	r3, r4, r3
 8005baa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd90      	pop	{r4, r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	0800cff4 	.word	0x0800cff4
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	01e84800 	.word	0x01e84800

08005bc4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc4:	b598      	push	{r3, r4, r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005bc8:	f7ff ff90 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005bcc:	4604      	mov	r4, r0
 8005bce:	f7ff f9e9 	bl	8004fa4 <LL_RCC_GetAHBPrescaler>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	4a03      	ldr	r2, [pc, #12]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd98      	pop	{r3, r4, r7, pc}
 8005be8:	0800cf94 	.word	0x0800cf94

08005bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bec:	b598      	push	{r3, r4, r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005bf0:	f7ff ffe8 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	f7ff f9ef 	bl	8004fd8 <LL_RCC_GetAPB1Prescaler>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	4a04      	ldr	r2, [pc, #16]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd98      	pop	{r3, r4, r7, pc}
 8005c14:	0800cfd4 	.word	0x0800cfd4

08005c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c18:	b598      	push	{r3, r4, r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005c1c:	f7ff ffd2 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005c20:	4604      	mov	r4, r0
 8005c22:	f7ff f9e5 	bl	8004ff0 <LL_RCC_GetAPB2Prescaler>
 8005c26:	4603      	mov	r3, r0
 8005c28:	0adb      	lsrs	r3, r3, #11
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd98      	pop	{r3, r4, r7, pc}
 8005c40:	0800cfd4 	.word	0x0800cfd4

08005c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2bb0      	cmp	r3, #176	; 0xb0
 8005c50:	d903      	bls.n	8005c5a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e007      	b.n	8005c6a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	4a11      	ldr	r2, [pc, #68]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005c6a:	f7ff f9a7 	bl	8004fbc <LL_RCC_GetAHB4Prescaler>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c82:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	0c9c      	lsrs	r4, r3, #18
 8005c8e:	f7fe fef5 	bl	8004a7c <HAL_PWREx_GetVoltageRange>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4619      	mov	r1, r3
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 f80c 	bl	8005cb4 <RCC_SetFlashLatency>
 8005c9c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd90      	pop	{r4, r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	0800cff4 	.word	0x0800cff4
 8005cac:	0800cf94 	.word	0x0800cf94
 8005cb0:	431bde83 	.word	0x431bde83

08005cb4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b093      	sub	sp, #76	; 0x4c
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005cbe:	4b37      	ldr	r3, [pc, #220]	; (8005d9c <RCC_SetFlashLatency+0xe8>)
 8005cc0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005cca:	4a35      	ldr	r2, [pc, #212]	; (8005da0 <RCC_SetFlashLatency+0xec>)
 8005ccc:	f107 031c 	add.w	r3, r7, #28
 8005cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005cd6:	4b33      	ldr	r3, [pc, #204]	; (8005da4 <RCC_SetFlashLatency+0xf0>)
 8005cd8:	f107 040c 	add.w	r4, r7, #12
 8005cdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cec:	d11a      	bne.n	8005d24 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf2:	e013      	b.n	8005d1c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	3348      	adds	r3, #72	; 0x48
 8005cfa:	443b      	add	r3, r7
 8005cfc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d807      	bhi.n	8005d16 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	3348      	adds	r3, #72	; 0x48
 8005d0c:	443b      	add	r3, r7
 8005d0e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005d14:	e020      	b.n	8005d58 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d18:	3301      	adds	r3, #1
 8005d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d9e8      	bls.n	8005cf4 <RCC_SetFlashLatency+0x40>
 8005d22:	e019      	b.n	8005d58 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d24:	2300      	movs	r3, #0
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d28:	e013      	b.n	8005d52 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	3348      	adds	r3, #72	; 0x48
 8005d30:	443b      	add	r3, r7
 8005d32:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d807      	bhi.n	8005d4c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	3348      	adds	r3, #72	; 0x48
 8005d42:	443b      	add	r3, r7
 8005d44:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005d48:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005d4a:	e005      	b.n	8005d58 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	3301      	adds	r3, #1
 8005d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d9e8      	bls.n	8005d2a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005d58:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <RCC_SetFlashLatency+0xf4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 0207 	bic.w	r2, r3, #7
 8005d60:	4911      	ldr	r1, [pc, #68]	; (8005da8 <RCC_SetFlashLatency+0xf4>)
 8005d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d68:	f7fd fd60 	bl	800382c <HAL_GetTick>
 8005d6c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005d6e:	e008      	b.n	8005d82 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d70:	f7fd fd5c 	bl	800382c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e007      	b.n	8005d92 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <RCC_SetFlashLatency+0xf4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d1ef      	bne.n	8005d70 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	374c      	adds	r7, #76	; 0x4c
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd90      	pop	{r4, r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	0800cdfc 	.word	0x0800cdfc
 8005da0:	0800ce0c 	.word	0x0800ce0c
 8005da4:	0800ce18 	.word	0x0800ce18
 8005da8:	58004000 	.word	0x58004000

08005dac <LL_RCC_LSE_IsEnabled>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <LL_RCC_LSE_IsEnabled+0x18>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <LL_RCC_LSE_IsEnabled+0x1a>
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <LL_RCC_LSE_IsReady>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d101      	bne.n	8005de8 <LL_RCC_LSE_IsReady+0x18>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <LL_RCC_LSE_IsReady+0x1a>
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_SetRFWKPClockSource>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <LL_RCC_SetSMPSClockSource>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f023 0203 	bic.w	r2, r3, #3
 8005e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_RCC_SetSMPSPrescaler>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <LL_RCC_SetUSARTClockSource>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	f023 0203 	bic.w	r2, r3, #3
 8005e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <LL_RCC_SetLPUARTClockSource>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_RCC_SetI2CClockSource>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <LL_RCC_SetLPTIMClockSource>:
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	041b      	lsls	r3, r3, #16
 8005f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <LL_RCC_SetSAIClockSource>:
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <LL_RCC_SetRNGClockSource>:
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <LL_RCC_SetCLK48ClockSource>:
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_RCC_SetUSBClockSource>:
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff ffe3 	bl	8005f8e <LL_RCC_SetCLK48ClockSource>
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <LL_RCC_SetADCClockSource>:
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_RCC_SetRTCClockSource>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <LL_RCC_GetRTCClockSource>:
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800602c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006034:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <LL_RCC_ForceBackupDomainReset>:
{
 8006042:	b480      	push	{r7}
 8006044:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <LL_RCC_PLLSAI1_Enable>:
{
 8006086:	b480      	push	{r7}
 8006088:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006098:	6013      	str	r3, [r2, #0]
}
 800609a:	bf00      	nop
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LL_RCC_PLLSAI1_Disable>:
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060b6:	6013      	str	r3, [r2, #0]
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <LL_RCC_PLLSAI1_IsReady>:
{
 80060c2:	b480      	push	{r7}
 80060c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80060c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d4:	d101      	bne.n	80060da <LL_RCC_PLLSAI1_IsReady+0x18>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b088      	sub	sp, #32
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80060ee:	2300      	movs	r3, #0
 80060f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80060f2:	2300      	movs	r3, #0
 80060f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d034      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800610a:	d021      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800610c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006110:	d81b      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006112:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006116:	d01d      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800611c:	d815      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006126:	d110      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006136:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006138:	e00d      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f947 	bl	80063d2 <RCCEx_PLLSAI1_ConfigNP>
 8006144:	4603      	mov	r3, r0
 8006146:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006148:	e005      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	77fb      	strb	r3, [r7, #31]
        break;
 800614e:	e002      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006150:	bf00      	nop
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006156:	7ffb      	ldrb	r3, [r7, #31]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d105      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fee8 	bl	8005f36 <LL_RCC_SetSAIClockSource>
 8006166:	e001      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	7ffb      	ldrb	r3, [r7, #31]
 800616a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006174:	2b00      	cmp	r3, #0
 8006176:	d046      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006178:	f7ff ff56 	bl	8006028 <LL_RCC_GetRTCClockSource>
 800617c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d03c      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006188:	f7fe fc68 	bl	8004a5c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d105      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff ff30 	bl	8005ffc <LL_RCC_SetRTCClockSource>
 800619c:	e02e      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80061a8:	f7ff ff4b 	bl	8006042 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80061ac:	f7ff ff5a 	bl	8006064 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80061be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80061c8:	f7ff fdf0 	bl	8005dac <LL_RCC_LSE_IsEnabled>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d114      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061d2:	f7fd fb2b 	bl	800382c <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80061d8:	e00b      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fd fb27 	bl	800382c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d902      	bls.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	77fb      	strb	r3, [r7, #31]
              break;
 80061f0:	e004      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80061f2:	f7ff fded 	bl	8005dd0 <LL_RCC_LSE_IsReady>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d1ee      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80061fc:	7ffb      	ldrb	r3, [r7, #31]
 80061fe:	77bb      	strb	r3, [r7, #30]
 8006200:	e001      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006202:	7ffb      	ldrb	r3, [r7, #31]
 8006204:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fe2a 	bl	8005e70 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fe35 	bl	8005e9c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fe5d 	bl	8005f02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d004      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fe52 	bl	8005f02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fe2a 	bl	8005ec8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fe1f 	bl	8005ec8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d022      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fe8d 	bl	8005fba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a8:	d107      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80062aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062b8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062c2:	d10b      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f8dd 	bl	8006488 <RCCEx_PLLSAI1_ConfigNQ>
 80062ce:	4603      	mov	r3, r0
 80062d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80062d8:	7ffb      	ldrb	r3, [r7, #31]
 80062da:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d02b      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d008      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062fa:	d003      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fe2a 	bl	8005f62 <LL_RCC_SetRNGClockSource>
 800630e:	e00a      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	2000      	movs	r0, #0
 800631c:	f7ff fe21 	bl	8005f62 <LL_RCC_SetRNGClockSource>
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff fe34 	bl	8005f8e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800632e:	d107      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800633a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800633e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006348:	2b00      	cmp	r3, #0
 800634a:	d022      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fe3d 	bl	8005fd0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635e:	d107      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800636a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800636e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006378:	d10b      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f8dd 	bl	800653e <RCCEx_PLLSAI1_ConfigNR>
 8006384:	4603      	mov	r3, r0
 8006386:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006388:	7ffb      	ldrb	r3, [r7, #31]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800638e:	7ffb      	ldrb	r3, [r7, #31]
 8006390:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fd26 	bl	8005df4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fd45 	bl	8005e48 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fd2c 	bl	8005e20 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80063c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80063de:	f7ff fe61 	bl	80060a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063e2:	f7fd fa23 	bl	800382c <HAL_GetTick>
 80063e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063e8:	e009      	b.n	80063fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063ea:	f7fd fa1f 	bl	800382c <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d902      	bls.n	80063fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e004      	b.n	8006408 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063fe:	f7ff fe60 	bl	80060c2 <LL_RCC_PLLSAI1_IsReady>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1f0      	bne.n	80063ea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d137      	bne.n	800647e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800640e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006422:	4313      	orrs	r3, r2
 8006424:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006438:	4313      	orrs	r3, r2
 800643a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800643c:	f7ff fe23 	bl	8006086 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006440:	f7fd f9f4 	bl	800382c <HAL_GetTick>
 8006444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006446:	e009      	b.n	800645c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006448:	f7fd f9f0 	bl	800382c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d902      	bls.n	800645c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	73fb      	strb	r3, [r7, #15]
        break;
 800645a:	e004      	b.n	8006466 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800645c:	f7ff fe31 	bl	80060c2 <LL_RCC_PLLSAI1_IsReady>
 8006460:	4603      	mov	r3, r0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d1f0      	bne.n	8006448 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d108      	bne.n	800647e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006494:	f7ff fe06 	bl	80060a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006498:	f7fd f9c8 	bl	800382c <HAL_GetTick>
 800649c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800649e:	e009      	b.n	80064b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064a0:	f7fd f9c4 	bl	800382c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d902      	bls.n	80064b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	73fb      	strb	r3, [r7, #15]
      break;
 80064b2:	e004      	b.n	80064be <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064b4:	f7ff fe05 	bl	80060c2 <LL_RCC_PLLSAI1_IsReady>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d137      	bne.n	8006534 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80064c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d8:	4313      	orrs	r3, r2
 80064da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80064dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ee:	4313      	orrs	r3, r2
 80064f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064f2:	f7ff fdc8 	bl	8006086 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f6:	f7fd f999 	bl	800382c <HAL_GetTick>
 80064fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064fc:	e009      	b.n	8006512 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064fe:	f7fd f995 	bl	800382c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d902      	bls.n	8006512 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	73fb      	strb	r3, [r7, #15]
        break;
 8006510:	e004      	b.n	800651c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006512:	f7ff fdd6 	bl	80060c2 <LL_RCC_PLLSAI1_IsReady>
 8006516:	4603      	mov	r3, r0
 8006518:	2b01      	cmp	r3, #1
 800651a:	d1f0      	bne.n	80064fe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006530:	4313      	orrs	r3, r2
 8006532:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800654a:	f7ff fdab 	bl	80060a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800654e:	f7fd f96d 	bl	800382c <HAL_GetTick>
 8006552:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006554:	e009      	b.n	800656a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006556:	f7fd f969 	bl	800382c <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d902      	bls.n	800656a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	73fb      	strb	r3, [r7, #15]
      break;
 8006568:	e004      	b.n	8006574 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800656a:	f7ff fdaa 	bl	80060c2 <LL_RCC_PLLSAI1_IsReady>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f0      	bne.n	8006556 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d137      	bne.n	80065ea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800657a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800658e:	4313      	orrs	r3, r2
 8006590:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a4:	4313      	orrs	r3, r2
 80065a6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80065a8:	f7ff fd6d 	bl	8006086 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ac:	f7fd f93e 	bl	800382c <HAL_GetTick>
 80065b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065b2:	e009      	b.n	80065c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065b4:	f7fd f93a 	bl	800382c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d902      	bls.n	80065c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	73fb      	strb	r3, [r7, #15]
        break;
 80065c6:	e004      	b.n	80065d2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065c8:	f7ff fd7b 	bl	80060c2 <LL_RCC_PLLSAI1_IsReady>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d1f0      	bne.n	80065b4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d108      	bne.n	80065ea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065e6:	4313      	orrs	r3, r2
 80065e8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e09f      	b.n	8006746 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb ffda 	bl	80025d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006628:	4b49      	ldr	r3, [pc, #292]	; (8006750 <HAL_RTC_Init+0x15c>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b10      	cmp	r3, #16
 8006632:	d07e      	beq.n	8006732 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	22ca      	movs	r2, #202	; 0xca
 800663a:	625a      	str	r2, [r3, #36]	; 0x24
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2253      	movs	r2, #83	; 0x53
 8006642:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8ab 	bl	80067a0 <RTC_EnterInitMode>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2204      	movs	r2, #4
 800665c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
 8006664:	e067      	b.n	8006736 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006678:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6899      	ldr	r1, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68d2      	ldr	r2, [r2, #12]
 80066a0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6919      	ldr	r1, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	041a      	lsls	r2, r3, #16
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0203 	bic.w	r2, r2, #3
 80066d4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d113      	bne.n	8006724 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f829 	bl	8006754 <HAL_RTC_WaitForSynchro>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00d      	beq.n	8006724 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	22ff      	movs	r2, #255	; 0xff
 800670e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2204      	movs	r2, #4
 8006714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e010      	b.n	8006746 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]
 8006730:	e001      	b.n	8006736 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40002800 	.word	0x40002800

08006754 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800676a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800676c:	f7fd f85e 	bl	800382c <HAL_GetTick>
 8006770:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006772:	e009      	b.n	8006788 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006774:	f7fd f85a 	bl	800382c <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006782:	d901      	bls.n	8006788 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e007      	b.n	8006798 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0ee      	beq.n	8006774 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d119      	bne.n	80067ea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067c0:	f7fd f834 	bl	800382c <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067c6:	e009      	b.n	80067dc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80067c8:	f7fd f830 	bl	800382c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d6:	d901      	bls.n	80067dc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e007      	b.n	80067ec <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0ee      	beq.n	80067c8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800680a:	2302      	movs	r3, #2
 800680c:	e0a8      	b.n	8006960 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	22ca      	movs	r2, #202	; 0xca
 8006824:	625a      	str	r2, [r3, #36]	; 0x24
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2253      	movs	r2, #83	; 0x53
 800682c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006838:	2b00      	cmp	r3, #0
 800683a:	d020      	beq.n	800687e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800683c:	f7fc fff6 	bl	800382c <HAL_GetTick>
 8006840:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006842:	e015      	b.n	8006870 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006844:	f7fc fff2 	bl	800382c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006852:	d90d      	bls.n	8006870 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	22ff      	movs	r2, #255	; 0xff
 800685a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2203      	movs	r2, #3
 8006860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e077      	b.n	8006960 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e2      	bne.n	8006844 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	b2da      	uxtb	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800689e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80068a0:	f7fc ffc4 	bl	800382c <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068a6:	e015      	b.n	80068d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068a8:	f7fc ffc0 	bl	800382c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068b6:	d90d      	bls.n	80068d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	22ff      	movs	r2, #255	; 0xff
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2203      	movs	r2, #3
 80068c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e045      	b.n	8006960 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0e2      	beq.n	80068a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0207 	bic.w	r2, r2, #7
 80068f8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6899      	ldr	r1, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	430a      	orrs	r2, r1
 8006908:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800690a:	4b17      	ldr	r3, [pc, #92]	; (8006968 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800690c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006910:	4a15      	ldr	r2, [pc, #84]	; (8006968 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a12      	ldr	r2, [pc, #72]	; (8006968 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006924:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006934:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006944:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	22ff      	movs	r2, #255	; 0xff
 800694c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	58000800 	.word	0x58000800

0800696c <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_RTCEx_EnableBypassShadow+0x16>
 800697e:	2302      	movs	r3, #2
 8006980:	e024      	b.n	80069cc <HAL_RTCEx_EnableBypassShadow+0x60>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	22ca      	movs	r2, #202	; 0xca
 8006998:	625a      	str	r2, [r3, #36]	; 0x24
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2253      	movs	r2, #83	; 0x53
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0220 	orr.w	r2, r2, #32
 80069b0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	22ff      	movs	r2, #255	; 0xff
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <LL_RCC_GetUSARTClockSource>:
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4013      	ands	r3, r2
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <LL_RCC_GetLPUARTClockSource>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4013      	ands	r3, r2
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e042      	b.n	8006ab0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7fb fcd5 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2224      	movs	r2, #36	; 0x24
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fc3c 	bl	80072d8 <UART_SetConfig>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e022      	b.n	8006ab0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fe58 	bl	8007728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fedf 	bl	800786c <UART_CheckIdleState>
 8006aae:	4603      	mov	r3, r0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d137      	bne.n	8006b40 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_UART_Receive_IT+0x24>
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e030      	b.n	8006b42 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a18      	ldr	r2, [pc, #96]	; (8006b4c <HAL_UART_Receive_IT+0x94>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d01f      	beq.n	8006b30 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d018      	beq.n	8006b30 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	623b      	str	r3, [r7, #32]
 8006b1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	69f9      	ldr	r1, [r7, #28]
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 ffaa 	bl	8007a90 <UART_Start_Receive_IT>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	e000      	b.n	8006b42 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3728      	adds	r7, #40	; 0x28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40008000 	.word	0x40008000

08006b50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	; 0x28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d167      	bne.n	8006c38 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_UART_Transmit_DMA+0x24>
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e060      	b.n	8006c3a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2221      	movs	r2, #33	; 0x21
 8006b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d028      	beq.n	8006bf8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006baa:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <HAL_UART_Transmit_DMA+0xf4>)
 8006bac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bb2:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <HAL_UART_Transmit_DMA+0xf8>)
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bba:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <HAL_UART_Transmit_DMA+0xfc>)
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3328      	adds	r3, #40	; 0x28
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	88fb      	ldrh	r3, [r7, #6]
 8006bda:	f7fd f899 	bl	8003d10 <HAL_DMA_Start_IT>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2210      	movs	r2, #16
 8006be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e020      	b.n	8006c3a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2240      	movs	r2, #64	; 0x40
 8006bfe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c20:	623a      	str	r2, [r7, #32]
 8006c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	69f9      	ldr	r1, [r7, #28]
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e5      	bne.n	8006c00 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e000      	b.n	8006c3a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006c38:	2302      	movs	r3, #2
  }
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3728      	adds	r7, #40	; 0x28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	08007e23 	.word	0x08007e23
 8006c48:	08007ebd 	.word	0x08007ebd
 8006c4c:	08007ed9 	.word	0x08007ed9

08006c50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b0ba      	sub	sp, #232	; 0xe8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c7e:	4013      	ands	r3, r2
 8006c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11b      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d015      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 82e3 	beq.w	8007280 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
      }
      return;
 8006cc2:	e2dd      	b.n	8007280 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8123 	beq.w	8006f14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cd2:	4b8d      	ldr	r3, [pc, #564]	; (8006f08 <HAL_UART_IRQHandler+0x2b8>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cde:	4b8b      	ldr	r3, [pc, #556]	; (8006f0c <HAL_UART_IRQHandler+0x2bc>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8116 	beq.w	8006f14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d011      	beq.n	8006d18 <HAL_UART_IRQHandler+0xc8>
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2201      	movs	r2, #1
 8006d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f043 0201 	orr.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d011      	beq.n	8006d48 <HAL_UART_IRQHandler+0xf8>
 8006d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2202      	movs	r2, #2
 8006d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3e:	f043 0204 	orr.w	r2, r3, #4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d011      	beq.n	8006d78 <HAL_UART_IRQHandler+0x128>
 8006d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2204      	movs	r2, #4
 8006d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f043 0202 	orr.w	r2, r3, #2
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d017      	beq.n	8006db4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d94:	4b5c      	ldr	r3, [pc, #368]	; (8006f08 <HAL_UART_IRQHandler+0x2b8>)
 8006d96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2208      	movs	r2, #8
 8006da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006daa:	f043 0208 	orr.w	r2, r3, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d012      	beq.n	8006de6 <HAL_UART_IRQHandler+0x196>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00c      	beq.n	8006de6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ddc:	f043 0220 	orr.w	r2, r3, #32
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8249 	beq.w	8007284 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d005      	beq.n	8006e4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d054      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 ff83 	bl	8007d56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d146      	bne.n	8006eec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1d9      	bne.n	8006e5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d017      	beq.n	8006ee4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eba:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <HAL_UART_IRQHandler+0x2c0>)
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fc fffd 	bl	8003ec4 <HAL_DMA_Abort_IT>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d019      	beq.n	8006f04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee2:	e00f      	b.n	8006f04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9e1 	bl	80072ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eea:	e00b      	b.n	8006f04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f9dd 	bl	80072ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef2:	e007      	b.n	8006f04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f9d9 	bl	80072ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006f02:	e1bf      	b.n	8007284 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f04:	bf00      	nop
    return;
 8006f06:	e1bd      	b.n	8007284 <HAL_UART_IRQHandler+0x634>
 8006f08:	10000001 	.word	0x10000001
 8006f0c:	04000120 	.word	0x04000120
 8006f10:	08007f59 	.word	0x08007f59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 8153 	bne.w	80071c4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 814c 	beq.w	80071c4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8145 	beq.w	80071c4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2210      	movs	r2, #16
 8006f40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	f040 80bb 	bne.w	80070c8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 818f 	beq.w	8007288 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f74:	429a      	cmp	r2, r3
 8006f76:	f080 8187 	bcs.w	8007288 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 8087 	bne.w	80070a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1da      	bne.n	8006f98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3308      	adds	r3, #8
 8007002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007006:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800700a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800700e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e1      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800702e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007044:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e3      	bne.n	800701e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007074:	f023 0310 	bic.w	r3, r3, #16
 8007078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007086:	65bb      	str	r3, [r7, #88]	; 0x58
 8007088:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800708c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e4      	bne.n	8007064 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fc feb0 	bl	8003e06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2202      	movs	r2, #2
 80070aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	b29b      	uxth	r3, r3
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f8fd 	bl	80072c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070c6:	e0df      	b.n	8007288 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80d1 	beq.w	800728c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80070ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80cc 	beq.w	800728c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007116:	647b      	str	r3, [r7, #68]	; 0x44
 8007118:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800711c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e4      	bne.n	80070f4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3308      	adds	r3, #8
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	623b      	str	r3, [r7, #32]
   return(result);
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007152:	633a      	str	r2, [r7, #48]	; 0x30
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e1      	bne.n	800712a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60fb      	str	r3, [r7, #12]
   return(result);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	69b9      	ldr	r1, [r7, #24]
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	617b      	str	r3, [r7, #20]
   return(result);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e4      	bne.n	800717a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f87f 	bl	80072c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071c2:	e063      	b.n	800728c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00e      	beq.n	80071ee <HAL_UART_IRQHandler+0x59e>
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fc14 	bl	8008a14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071ec:	e051      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d014      	beq.n	8007224 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d008      	beq.n	8007224 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007216:	2b00      	cmp	r3, #0
 8007218:	d03a      	beq.n	8007290 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
    }
    return;
 8007222:	e035      	b.n	8007290 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <HAL_UART_IRQHandler+0x5f4>
 8007230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fea1 	bl	8007f84 <UART_EndTransmit_IT>
    return;
 8007242:	e026      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <HAL_UART_IRQHandler+0x614>
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fbed 	bl	8008a3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007262:	e016      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d010      	beq.n	8007292 <HAL_UART_IRQHandler+0x642>
 8007270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007274:	2b00      	cmp	r3, #0
 8007276:	da0c      	bge.n	8007292 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fbd5 	bl	8008a28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800727e:	e008      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
      return;
 8007280:	bf00      	nop
 8007282:	e006      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
    return;
 8007284:	bf00      	nop
 8007286:	e004      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
      return;
 8007288:	bf00      	nop
 800728a:	e002      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
      return;
 800728c:	bf00      	nop
 800728e:	e000      	b.n	8007292 <HAL_UART_IRQHandler+0x642>
    return;
 8007290:	bf00      	nop
  }
}
 8007292:	37e8      	adds	r7, #232	; 0xe8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b08c      	sub	sp, #48	; 0x30
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	431a      	orrs	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4baf      	ldr	r3, [pc, #700]	; (80075c4 <UART_SetConfig+0x2ec>)
 8007308:	4013      	ands	r3, r2
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007310:	430b      	orrs	r3, r1
 8007312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4aa4      	ldr	r2, [pc, #656]	; (80075c8 <UART_SetConfig+0x2f0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007340:	4313      	orrs	r3, r2
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800734e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007358:	430b      	orrs	r3, r1
 800735a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	f023 010f 	bic.w	r1, r3, #15
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a95      	ldr	r2, [pc, #596]	; (80075cc <UART_SetConfig+0x2f4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d125      	bne.n	80073c8 <UART_SetConfig+0xf0>
 800737c:	2003      	movs	r0, #3
 800737e:	f7ff fb2b 	bl	80069d8 <LL_RCC_GetUSARTClockSource>
 8007382:	4603      	mov	r3, r0
 8007384:	2b03      	cmp	r3, #3
 8007386:	d81b      	bhi.n	80073c0 <UART_SetConfig+0xe8>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0xb8>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073b1 	.word	0x080073b1
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073b9 	.word	0x080073b9
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e042      	b.n	800742e <UART_SetConfig+0x156>
 80073a8:	2302      	movs	r3, #2
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e03e      	b.n	800742e <UART_SetConfig+0x156>
 80073b0:	2304      	movs	r3, #4
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e03a      	b.n	800742e <UART_SetConfig+0x156>
 80073b8:	2308      	movs	r3, #8
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073be:	e036      	b.n	800742e <UART_SetConfig+0x156>
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c6:	e032      	b.n	800742e <UART_SetConfig+0x156>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a7e      	ldr	r2, [pc, #504]	; (80075c8 <UART_SetConfig+0x2f0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d12a      	bne.n	8007428 <UART_SetConfig+0x150>
 80073d2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80073d6:	f7ff fb0f 	bl	80069f8 <LL_RCC_GetLPUARTClockSource>
 80073da:	4603      	mov	r3, r0
 80073dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e0:	d01a      	beq.n	8007418 <UART_SetConfig+0x140>
 80073e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e6:	d81b      	bhi.n	8007420 <UART_SetConfig+0x148>
 80073e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ec:	d00c      	beq.n	8007408 <UART_SetConfig+0x130>
 80073ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f2:	d815      	bhi.n	8007420 <UART_SetConfig+0x148>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <UART_SetConfig+0x128>
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fc:	d008      	beq.n	8007410 <UART_SetConfig+0x138>
 80073fe:	e00f      	b.n	8007420 <UART_SetConfig+0x148>
 8007400:	2300      	movs	r3, #0
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e012      	b.n	800742e <UART_SetConfig+0x156>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e00e      	b.n	800742e <UART_SetConfig+0x156>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007416:	e00a      	b.n	800742e <UART_SetConfig+0x156>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741e:	e006      	b.n	800742e <UART_SetConfig+0x156>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007426:	e002      	b.n	800742e <UART_SetConfig+0x156>
 8007428:	2310      	movs	r3, #16
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a65      	ldr	r2, [pc, #404]	; (80075c8 <UART_SetConfig+0x2f0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	f040 8097 	bne.w	8007568 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800743a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800743e:	2b08      	cmp	r3, #8
 8007440:	d823      	bhi.n	800748a <UART_SetConfig+0x1b2>
 8007442:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <UART_SetConfig+0x170>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	0800746d 	.word	0x0800746d
 800744c:	0800748b 	.word	0x0800748b
 8007450:	08007475 	.word	0x08007475
 8007454:	0800748b 	.word	0x0800748b
 8007458:	0800747b 	.word	0x0800747b
 800745c:	0800748b 	.word	0x0800748b
 8007460:	0800748b 	.word	0x0800748b
 8007464:	0800748b 	.word	0x0800748b
 8007468:	08007483 	.word	0x08007483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800746c:	f7fe fbbe 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 8007470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007472:	e010      	b.n	8007496 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007474:	4b56      	ldr	r3, [pc, #344]	; (80075d0 <UART_SetConfig+0x2f8>)
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007478:	e00d      	b.n	8007496 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800747a:	f7fe fb37 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 800747e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007480:	e009      	b.n	8007496 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007488:	e005      	b.n	8007496 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007494:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 812b 	beq.w	80076f4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	4a4c      	ldr	r2, [pc, #304]	; (80075d4 <UART_SetConfig+0x2fc>)
 80074a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	4413      	add	r3, r2
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d305      	bcc.n	80074ce <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d903      	bls.n	80074d6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074d4:	e10e      	b.n	80076f4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	2200      	movs	r2, #0
 80074da:	60bb      	str	r3, [r7, #8]
 80074dc:	60fa      	str	r2, [r7, #12]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	4a3c      	ldr	r2, [pc, #240]	; (80075d4 <UART_SetConfig+0x2fc>)
 80074e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2200      	movs	r2, #0
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074f8:	f7f8 feaa 	bl	8000250 <__aeabi_uldivmod>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4610      	mov	r0, r2
 8007502:	4619      	mov	r1, r3
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	020b      	lsls	r3, r1, #8
 800750e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007512:	0202      	lsls	r2, r0, #8
 8007514:	6979      	ldr	r1, [r7, #20]
 8007516:	6849      	ldr	r1, [r1, #4]
 8007518:	0849      	lsrs	r1, r1, #1
 800751a:	2000      	movs	r0, #0
 800751c:	460c      	mov	r4, r1
 800751e:	4605      	mov	r5, r0
 8007520:	eb12 0804 	adds.w	r8, r2, r4
 8007524:	eb43 0905 	adc.w	r9, r3, r5
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	469a      	mov	sl, r3
 8007530:	4693      	mov	fp, r2
 8007532:	4652      	mov	r2, sl
 8007534:	465b      	mov	r3, fp
 8007536:	4640      	mov	r0, r8
 8007538:	4649      	mov	r1, r9
 800753a:	f7f8 fe89 	bl	8000250 <__aeabi_uldivmod>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4613      	mov	r3, r2
 8007544:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800754c:	d308      	bcc.n	8007560 <UART_SetConfig+0x288>
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007554:	d204      	bcs.n	8007560 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6a3a      	ldr	r2, [r7, #32]
 800755c:	60da      	str	r2, [r3, #12]
 800755e:	e0c9      	b.n	80076f4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007566:	e0c5      	b.n	80076f4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007570:	d16d      	bne.n	800764e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007572:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007576:	3b01      	subs	r3, #1
 8007578:	2b07      	cmp	r3, #7
 800757a:	d82d      	bhi.n	80075d8 <UART_SetConfig+0x300>
 800757c:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <UART_SetConfig+0x2ac>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	080075a5 	.word	0x080075a5
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075d9 	.word	0x080075d9
 8007590:	080075b3 	.word	0x080075b3
 8007594:	080075d9 	.word	0x080075d9
 8007598:	080075d9 	.word	0x080075d9
 800759c:	080075d9 	.word	0x080075d9
 80075a0:	080075bb 	.word	0x080075bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075a4:	f7fe fb38 	bl	8005c18 <HAL_RCC_GetPCLK2Freq>
 80075a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075aa:	e01b      	b.n	80075e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ac:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <UART_SetConfig+0x2f8>)
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075b0:	e018      	b.n	80075e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fe fa9b 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075b8:	e014      	b.n	80075e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c0:	e010      	b.n	80075e4 <UART_SetConfig+0x30c>
 80075c2:	bf00      	nop
 80075c4:	cfff69f3 	.word	0xcfff69f3
 80075c8:	40008000 	.word	0x40008000
 80075cc:	40013800 	.word	0x40013800
 80075d0:	00f42400 	.word	0x00f42400
 80075d4:	0800d034 	.word	0x0800d034
      default:
        pclk = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8084 	beq.w	80076f4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	4a4b      	ldr	r2, [pc, #300]	; (8007720 <UART_SetConfig+0x448>)
 80075f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80075fe:	005a      	lsls	r2, r3, #1
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	441a      	add	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007610:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	2b0f      	cmp	r3, #15
 8007616:	d916      	bls.n	8007646 <UART_SetConfig+0x36e>
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800761e:	d212      	bcs.n	8007646 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	b29b      	uxth	r3, r3
 8007624:	f023 030f 	bic.w	r3, r3, #15
 8007628:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	b29b      	uxth	r3, r3
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	b29a      	uxth	r2, r3
 8007636:	8bfb      	ldrh	r3, [r7, #30]
 8007638:	4313      	orrs	r3, r2
 800763a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	8bfa      	ldrh	r2, [r7, #30]
 8007642:	60da      	str	r2, [r3, #12]
 8007644:	e056      	b.n	80076f4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800764c:	e052      	b.n	80076f4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800764e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007652:	3b01      	subs	r3, #1
 8007654:	2b07      	cmp	r3, #7
 8007656:	d822      	bhi.n	800769e <UART_SetConfig+0x3c6>
 8007658:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <UART_SetConfig+0x388>)
 800765a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765e:	bf00      	nop
 8007660:	08007681 	.word	0x08007681
 8007664:	08007689 	.word	0x08007689
 8007668:	0800769f 	.word	0x0800769f
 800766c:	0800768f 	.word	0x0800768f
 8007670:	0800769f 	.word	0x0800769f
 8007674:	0800769f 	.word	0x0800769f
 8007678:	0800769f 	.word	0x0800769f
 800767c:	08007697 	.word	0x08007697
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fe faca 	bl	8005c18 <HAL_RCC_GetPCLK2Freq>
 8007684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007686:	e010      	b.n	80076aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007688:	4b26      	ldr	r3, [pc, #152]	; (8007724 <UART_SetConfig+0x44c>)
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800768c:	e00d      	b.n	80076aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768e:	f7fe fa2d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8007692:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007694:	e009      	b.n	80076aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800769c:	e005      	b.n	80076aa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076a8:	bf00      	nop
    }

    if (pclk != 0U)
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d021      	beq.n	80076f4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	4a1a      	ldr	r2, [pc, #104]	; (8007720 <UART_SetConfig+0x448>)
 80076b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ba:	461a      	mov	r2, r3
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	fbb3 f2f2 	udiv	r2, r3, r2
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	441a      	add	r2, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	2b0f      	cmp	r3, #15
 80076d8:	d909      	bls.n	80076ee <UART_SetConfig+0x416>
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e0:	d205      	bcs.n	80076ee <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	e002      	b.n	80076f4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2201      	movs	r2, #1
 8007700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2200      	movs	r2, #0
 8007708:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007710:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007714:	4618      	mov	r0, r3
 8007716:	3730      	adds	r7, #48	; 0x30
 8007718:	46bd      	mov	sp, r7
 800771a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800771e:	bf00      	nop
 8007720:	0800d034 	.word	0x0800d034
 8007724:	00f42400 	.word	0x00f42400

08007728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01a      	beq.n	800783e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007826:	d10a      	bne.n	800783e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b098      	sub	sp, #96	; 0x60
 8007870:	af02      	add	r7, sp, #8
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800787c:	f7fb ffd6 	bl	800382c <HAL_GetTick>
 8007880:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b08      	cmp	r3, #8
 800788e:	d12f      	bne.n	80078f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007898:	2200      	movs	r2, #0
 800789a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f88e 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d022      	beq.n	80078f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078be:	653b      	str	r3, [r7, #80]	; 0x50
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e063      	b.n	80079b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d149      	bne.n	8007992 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007906:	2200      	movs	r2, #0
 8007908:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f857 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d03c      	beq.n	8007992 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	623b      	str	r3, [r7, #32]
   return(result);
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800792c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007936:	633b      	str	r3, [r7, #48]	; 0x30
 8007938:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800793c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e6      	bne.n	8007918 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	60fb      	str	r3, [r7, #12]
   return(result);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	64bb      	str	r3, [r7, #72]	; 0x48
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3308      	adds	r3, #8
 8007968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800796a:	61fa      	str	r2, [r7, #28]
 800796c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	69b9      	ldr	r1, [r7, #24]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	617b      	str	r3, [r7, #20]
   return(result);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e012      	b.n	80079b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3758      	adds	r7, #88	; 0x58
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d0:	e049      	b.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d8:	d045      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079da:	f7fb ff27 	bl	800382c <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d302      	bcc.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e048      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d031      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d110      	bne.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2208      	movs	r2, #8
 8007a16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f99c 	bl	8007d56 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2208      	movs	r2, #8
 8007a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e029      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a40:	d111      	bne.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f982 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e00f      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	bf0c      	ite	eq
 8007a76:	2301      	moveq	r3, #1
 8007a78:	2300      	movne	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d0a6      	beq.n	80079d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b0a3      	sub	sp, #140	; 0x8c
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	88fa      	ldrh	r2, [r7, #6]
 8007aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	88fa      	ldrh	r2, [r7, #6]
 8007ab0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac2:	d10e      	bne.n	8007ae2 <UART_Start_Receive_IT+0x52>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d105      	bne.n	8007ad8 <UART_Start_Receive_IT+0x48>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ad6:	e02d      	b.n	8007b34 <UART_Start_Receive_IT+0xa4>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	22ff      	movs	r2, #255	; 0xff
 8007adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ae0:	e028      	b.n	8007b34 <UART_Start_Receive_IT+0xa4>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10d      	bne.n	8007b06 <UART_Start_Receive_IT+0x76>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d104      	bne.n	8007afc <UART_Start_Receive_IT+0x6c>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	22ff      	movs	r2, #255	; 0xff
 8007af6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007afa:	e01b      	b.n	8007b34 <UART_Start_Receive_IT+0xa4>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	227f      	movs	r2, #127	; 0x7f
 8007b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b04:	e016      	b.n	8007b34 <UART_Start_Receive_IT+0xa4>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b0e:	d10d      	bne.n	8007b2c <UART_Start_Receive_IT+0x9c>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <UART_Start_Receive_IT+0x92>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	227f      	movs	r2, #127	; 0x7f
 8007b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b20:	e008      	b.n	8007b34 <UART_Start_Receive_IT+0xa4>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	223f      	movs	r2, #63	; 0x3f
 8007b26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b2a:	e003      	b.n	8007b34 <UART_Start_Receive_IT+0xa4>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2222      	movs	r2, #34	; 0x22
 8007b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b68:	673a      	str	r2, [r7, #112]	; 0x70
 8007b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007b6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e3      	bne.n	8007b44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b84:	d14f      	bne.n	8007c26 <UART_Start_Receive_IT+0x196>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b8c:	88fa      	ldrh	r2, [r7, #6]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d349      	bcc.n	8007c26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9a:	d107      	bne.n	8007bac <UART_Start_Receive_IT+0x11c>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a47      	ldr	r2, [pc, #284]	; (8007cc4 <UART_Start_Receive_IT+0x234>)
 8007ba8:	675a      	str	r2, [r3, #116]	; 0x74
 8007baa:	e002      	b.n	8007bb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a46      	ldr	r2, [pc, #280]	; (8007cc8 <UART_Start_Receive_IT+0x238>)
 8007bb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01a      	beq.n	8007bf0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bde:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007be2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e4      	bne.n	8007bba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c10:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e5      	bne.n	8007bf0 <UART_Start_Receive_IT+0x160>
 8007c24:	e046      	b.n	8007cb4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2e:	d107      	bne.n	8007c40 <UART_Start_Receive_IT+0x1b0>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d103      	bne.n	8007c40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4a24      	ldr	r2, [pc, #144]	; (8007ccc <UART_Start_Receive_IT+0x23c>)
 8007c3c:	675a      	str	r2, [r3, #116]	; 0x74
 8007c3e:	e002      	b.n	8007c46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4a23      	ldr	r2, [pc, #140]	; (8007cd0 <UART_Start_Receive_IT+0x240>)
 8007c44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d019      	beq.n	8007c82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c62:	677b      	str	r3, [r7, #116]	; 0x74
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_Start_Receive_IT+0x1be>
 8007c80:	e018      	b.n	8007cb4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f043 0320 	orr.w	r3, r3, #32
 8007c96:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca0:	623b      	str	r3, [r7, #32]
 8007ca2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	69f9      	ldr	r1, [r7, #28]
 8007ca6:	6a3a      	ldr	r2, [r7, #32]
 8007ca8:	e841 2300 	strex	r3, r2, [r1]
 8007cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e6      	bne.n	8007c82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	378c      	adds	r7, #140	; 0x8c
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	080086ad 	.word	0x080086ad
 8007cc8:	0800834d 	.word	0x0800834d
 8007ccc:	08008195 	.word	0x08008195
 8007cd0:	08007fdd 	.word	0x08007fdd

08007cd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b08f      	sub	sp, #60	; 0x3c
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cfc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e6      	bne.n	8007cdc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d2e:	61ba      	str	r2, [r7, #24]
 8007d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007d4a:	bf00      	nop
 8007d4c:	373c      	adds	r7, #60	; 0x3c
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b095      	sub	sp, #84	; 0x54
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e3      	bne.n	8007d90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d118      	bne.n	8007e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f023 0310 	bic.w	r3, r3, #16
 8007de4:	647b      	str	r3, [r7, #68]	; 0x44
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6979      	ldr	r1, [r7, #20]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e6      	bne.n	8007dd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e16:	bf00      	nop
 8007e18:	3754      	adds	r7, #84	; 0x54
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b090      	sub	sp, #64	; 0x40
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d137      	bne.n	8007eae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	623b      	str	r3, [r7, #32]
   return(result);
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e66:	633a      	str	r2, [r7, #48]	; 0x30
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	69b9      	ldr	r1, [r7, #24]
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007eac:	e002      	b.n	8007eb4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007eae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007eb0:	f7fa f80e 	bl	8001ed0 <HAL_UART_TxCpltCallback>
}
 8007eb4:	bf00      	nop
 8007eb6:	3740      	adds	r7, #64	; 0x40
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff f9e4 	bl	8007298 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f00:	2b80      	cmp	r3, #128	; 0x80
 8007f02:	d109      	bne.n	8007f18 <UART_DMAError+0x40>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2b21      	cmp	r3, #33	; 0x21
 8007f08:	d106      	bne.n	8007f18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007f12:	6978      	ldr	r0, [r7, #20]
 8007f14:	f7ff fede 	bl	8007cd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d109      	bne.n	8007f3a <UART_DMAError+0x62>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b22      	cmp	r3, #34	; 0x22
 8007f2a:	d106      	bne.n	8007f3a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007f34:	6978      	ldr	r0, [r7, #20]
 8007f36:	f7ff ff0e 	bl	8007d56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f40:	f043 0210 	orr.w	r2, r3, #16
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f4a:	6978      	ldr	r0, [r7, #20]
 8007f4c:	f7ff f9ae 	bl	80072ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f50:	bf00      	nop
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff f998 	bl	80072ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa0:	61fb      	str	r3, [r7, #28]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	61bb      	str	r3, [r7, #24]
 8007fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6979      	ldr	r1, [r7, #20]
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e6      	bne.n	8007f8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7f9 ff7f 	bl	8001ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd2:	bf00      	nop
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b09c      	sub	sp, #112	; 0x70
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff4:	2b22      	cmp	r3, #34	; 0x22
 8007ff6:	f040 80be 	bne.w	8008176 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008004:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008008:	b2d9      	uxtb	r1, r3
 800800a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800800e:	b2da      	uxtb	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008014:	400a      	ands	r2, r1
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800802a:	b29b      	uxth	r3, r3
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	f040 80a1 	bne.w	8008186 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008058:	66bb      	str	r3, [r7, #104]	; 0x68
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008062:	65bb      	str	r3, [r7, #88]	; 0x58
 8008064:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	667b      	str	r3, [r7, #100]	; 0x64
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008096:	647a      	str	r2, [r7, #68]	; 0x44
 8008098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800809c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a33      	ldr	r2, [pc, #204]	; (8008190 <UART_RxISR_8BIT+0x1b4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d01f      	beq.n	8008108 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d018      	beq.n	8008108 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	623b      	str	r3, [r7, #32]
   return(result);
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080ea:	663b      	str	r3, [r7, #96]	; 0x60
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f4:	633b      	str	r3, [r7, #48]	; 0x30
 80080f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810c:	2b01      	cmp	r3, #1
 800810e:	d12e      	bne.n	800816e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	60fb      	str	r3, [r7, #12]
   return(result);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0310 	bic.w	r3, r3, #16
 800812a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	69b9      	ldr	r1, [r7, #24]
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	617b      	str	r3, [r7, #20]
   return(result);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f003 0310 	and.w	r3, r3, #16
 8008152:	2b10      	cmp	r3, #16
 8008154:	d103      	bne.n	800815e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2210      	movs	r2, #16
 800815c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff f8aa 	bl	80072c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800816c:	e00b      	b.n	8008186 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7f9 fe90 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 8008174:	e007      	b.n	8008186 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	699a      	ldr	r2, [r3, #24]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0208 	orr.w	r2, r2, #8
 8008184:	619a      	str	r2, [r3, #24]
}
 8008186:	bf00      	nop
 8008188:	3770      	adds	r7, #112	; 0x70
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	40008000 	.word	0x40008000

08008194 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b09c      	sub	sp, #112	; 0x70
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ac:	2b22      	cmp	r3, #34	; 0x22
 80081ae:	f040 80be 	bne.w	800832e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80081c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80081c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80081ca:	4013      	ands	r3, r2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d6:	1c9a      	adds	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 80a1 	bne.w	800833e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800820a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008210:	667b      	str	r3, [r7, #100]	; 0x64
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800821a:	657b      	str	r3, [r7, #84]	; 0x54
 800821c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e6      	bne.n	80081fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	663b      	str	r3, [r7, #96]	; 0x60
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800824e:	643a      	str	r2, [r7, #64]	; 0x40
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e5      	bne.n	800822e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a33      	ldr	r2, [pc, #204]	; (8008348 <UART_RxISR_16BIT+0x1b4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d01f      	beq.n	80082c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	61fb      	str	r3, [r7, #28]
   return(result);
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e6      	bne.n	800828e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d12e      	bne.n	8008326 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	60bb      	str	r3, [r7, #8]
   return(result);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f023 0310 	bic.w	r3, r3, #16
 80082e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f0:	6979      	ldr	r1, [r7, #20]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	e841 2300 	strex	r3, r2, [r1]
 80082f8:	613b      	str	r3, [r7, #16]
   return(result);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e6      	bne.n	80082ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	2b10      	cmp	r3, #16
 800830c:	d103      	bne.n	8008316 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2210      	movs	r2, #16
 8008314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fe ffce 	bl	80072c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008324:	e00b      	b.n	800833e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7f9 fdb4 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 800832c:	e007      	b.n	800833e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699a      	ldr	r2, [r3, #24]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0208 	orr.w	r2, r2, #8
 800833c:	619a      	str	r2, [r3, #24]
}
 800833e:	bf00      	nop
 8008340:	3770      	adds	r7, #112	; 0x70
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40008000 	.word	0x40008000

0800834c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b0ac      	sub	sp, #176	; 0xb0
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800835a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008382:	2b22      	cmp	r3, #34	; 0x22
 8008384:	f040 8182 	bne.w	800868c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800838e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008392:	e125      	b.n	80085e0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800839e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80083a2:	b2d9      	uxtb	r1, r3
 80083a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	400a      	ands	r2, r1
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d053      	beq.n	800848e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d011      	beq.n	8008416 <UART_RxISR_8BIT_FIFOEN+0xca>
 80083f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2201      	movs	r2, #1
 8008404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840c:	f043 0201 	orr.w	r2, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d011      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00b      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2202      	movs	r2, #2
 8008434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843c:	f043 0204 	orr.w	r2, r3, #4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800844a:	f003 0304 	and.w	r3, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	d011      	beq.n	8008476 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2204      	movs	r2, #4
 8008464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846c:	f043 0202 	orr.w	r2, r3, #2
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800847c:	2b00      	cmp	r3, #0
 800847e:	d006      	beq.n	800848e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7fe ff13 	bl	80072ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 80a2 	bne.w	80085e0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80084aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80084c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80084cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e4      	bne.n	800849c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3308      	adds	r3, #8
 80084d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80084e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084e8:	f023 0301 	bic.w	r3, r3, #1
 80084ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80084fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008500:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e1      	bne.n	80084d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a5f      	ldr	r2, [pc, #380]	; (80086a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d021      	beq.n	8008570 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01a      	beq.n	8008570 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800854e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800855c:	657b      	str	r3, [r7, #84]	; 0x54
 800855e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008562:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008564:	e841 2300 	strex	r3, r2, [r1]
 8008568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1e4      	bne.n	800853a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008574:	2b01      	cmp	r3, #1
 8008576:	d130      	bne.n	80085da <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	f023 0310 	bic.w	r3, r3, #16
 8008592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085a0:	643b      	str	r3, [r7, #64]	; 0x40
 80085a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e4      	bne.n	800857e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f003 0310 	and.w	r3, r3, #16
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d103      	bne.n	80085ca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2210      	movs	r2, #16
 80085c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7fe fe74 	bl	80072c0 <HAL_UARTEx_RxEventCallback>
 80085d8:	e002      	b.n	80085e0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f9 fc5a 	bl	8001e94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80085e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f47f aecf 	bne.w	8008394 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008600:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008604:	2b00      	cmp	r3, #0
 8008606:	d049      	beq.n	800869c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800860e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008612:	429a      	cmp	r2, r3
 8008614:	d242      	bcs.n	800869c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3308      	adds	r3, #8
 800861c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	61fb      	str	r3, [r7, #28]
   return(result);
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800862c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3308      	adds	r3, #8
 8008636:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800863a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800863c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e3      	bne.n	8008616 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a15      	ldr	r2, [pc, #84]	; (80086a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008652:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	60bb      	str	r3, [r7, #8]
   return(result);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f043 0320 	orr.w	r3, r3, #32
 8008668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	613b      	str	r3, [r7, #16]
   return(result);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e4      	bne.n	8008654 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800868a:	e007      	b.n	800869c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	699a      	ldr	r2, [r3, #24]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0208 	orr.w	r2, r2, #8
 800869a:	619a      	str	r2, [r3, #24]
}
 800869c:	bf00      	nop
 800869e:	37b0      	adds	r7, #176	; 0xb0
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	40008000 	.word	0x40008000
 80086a8:	08007fdd 	.word	0x08007fdd

080086ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b0ae      	sub	sp, #184	; 0xb8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086e2:	2b22      	cmp	r3, #34	; 0x22
 80086e4:	f040 8186 	bne.w	80089f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086f2:	e129      	b.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008706:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800870a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800870e:	4013      	ands	r3, r2
 8008710:	b29a      	uxth	r2, r3
 8008712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008716:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871c:	1c9a      	adds	r2, r3, #2
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800873e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d053      	beq.n	80087f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800874a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d011      	beq.n	800877a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00b      	beq.n	800877a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2201      	movs	r2, #1
 8008768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008770:	f043 0201 	orr.w	r2, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800877a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d011      	beq.n	80087aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2202      	movs	r2, #2
 8008798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a0:	f043 0204 	orr.w	r2, r3, #4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80087b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2204      	movs	r2, #4
 80087c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d0:	f043 0202 	orr.w	r2, r3, #2
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d006      	beq.n	80087f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7fe fd61 	bl	80072ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 80a4 	bne.w	8008948 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800880e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008826:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800882a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e2      	bne.n	8008800 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800884a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800884c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e1      	bne.n	800883a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a5f      	ldr	r2, [pc, #380]	; (8008a0c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d021      	beq.n	80088d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01a      	beq.n	80088d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80088c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e4      	bne.n	80088a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d130      	bne.n	8008942 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f6:	f023 0310 	bic.w	r3, r3, #16
 80088fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008908:	647b      	str	r3, [r7, #68]	; 0x44
 800890a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800890e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e4      	bne.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	f003 0310 	and.w	r3, r3, #16
 8008926:	2b10      	cmp	r3, #16
 8008928:	d103      	bne.n	8008932 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2210      	movs	r2, #16
 8008930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7fe fcc0 	bl	80072c0 <HAL_UARTEx_RxEventCallback>
 8008940:	e002      	b.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7f9 faa6 	bl	8001e94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008948:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800894c:	2b00      	cmp	r3, #0
 800894e:	d006      	beq.n	800895e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	f47f aecb 	bne.w	80086f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008964:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008968:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800896c:	2b00      	cmp	r3, #0
 800896e:	d049      	beq.n	8008a04 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008976:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800897a:	429a      	cmp	r2, r3
 800897c:	d242      	bcs.n	8008a04 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3308      	adds	r3, #8
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	623b      	str	r3, [r7, #32]
   return(result);
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80089a2:	633a      	str	r2, [r7, #48]	; 0x30
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e3      	bne.n	800897e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a15      	ldr	r2, [pc, #84]	; (8008a10 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80089ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f043 0320 	orr.w	r3, r3, #32
 80089d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	69b9      	ldr	r1, [r7, #24]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	617b      	str	r3, [r7, #20]
   return(result);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e4      	bne.n	80089bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089f2:	e007      	b.n	8008a04 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0208 	orr.w	r2, r2, #8
 8008a02:	619a      	str	r2, [r3, #24]
}
 8008a04:	bf00      	nop
 8008a06:	37b8      	adds	r7, #184	; 0xb8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	40008000 	.word	0x40008000
 8008a10:	08008195 	.word	0x08008195

08008a14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e027      	b.n	8008ab6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2224      	movs	r2, #36	; 0x24
 8008a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e02d      	b.n	8008b36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2224      	movs	r2, #36	; 0x24
 8008ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f850 	bl	8008bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e02d      	b.n	8008bb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2224      	movs	r2, #36	; 0x24
 8008b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0201 	bic.w	r2, r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f812 	bl	8008bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d108      	bne.n	8008bde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bdc:	e031      	b.n	8008c42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bde:	2308      	movs	r3, #8
 8008be0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008be2:	2308      	movs	r3, #8
 8008be4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	0e5b      	lsrs	r3, r3, #25
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	0f5b      	lsrs	r3, r3, #29
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	7b3a      	ldrb	r2, [r7, #12]
 8008c0a:	4911      	ldr	r1, [pc, #68]	; (8008c50 <UARTEx_SetNbDataToProcess+0x94>)
 8008c0c:	5c8a      	ldrb	r2, [r1, r2]
 8008c0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c12:	7b3a      	ldrb	r2, [r7, #12]
 8008c14:	490f      	ldr	r1, [pc, #60]	; (8008c54 <UARTEx_SetNbDataToProcess+0x98>)
 8008c16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c18:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	7b7a      	ldrb	r2, [r7, #13]
 8008c28:	4909      	ldr	r1, [pc, #36]	; (8008c50 <UARTEx_SetNbDataToProcess+0x94>)
 8008c2a:	5c8a      	ldrb	r2, [r1, r2]
 8008c2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c30:	7b7a      	ldrb	r2, [r7, #13]
 8008c32:	4908      	ldr	r1, [pc, #32]	; (8008c54 <UARTEx_SetNbDataToProcess+0x98>)
 8008c34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c36:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	0800d04c 	.word	0x0800d04c
 8008c54:	0800d054 	.word	0x0800d054

08008c58 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008c58:	b5b0      	push	{r4, r5, r7, lr}
 8008c5a:	b0ce      	sub	sp, #312	; 0x138
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4605      	mov	r5, r0
 8008c60:	460c      	mov	r4, r1
 8008c62:	4610      	mov	r0, r2
 8008c64:	4619      	mov	r1, r3
 8008c66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c6a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008c6e:	462a      	mov	r2, r5
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	801a      	strh	r2, [r3, #0]
 8008c7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c82:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008c86:	4602      	mov	r2, r0
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c8e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008c92:	460a      	mov	r2, r1
 8008c94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008c96:	f107 0310 	add.w	r3, r7, #16
 8008c9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008c9e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	f107 0210 	add.w	r2, r7, #16
 8008ca8:	4413      	add	r3, r2
 8008caa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008cae:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008cb2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3309      	adds	r3, #9
 8008cba:	f107 0210 	add.w	r2, r7, #16
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cc8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ccc:	2200      	movs	r2, #0
 8008cce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008cd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cda:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008cde:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008ce2:	7812      	ldrb	r2, [r2, #0]
 8008ce4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cea:	3301      	adds	r3, #1
 8008cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008cf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cf4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008cf8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008cfc:	8812      	ldrh	r2, [r2, #0]
 8008cfe:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d06:	3302      	adds	r3, #2
 8008d08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008d0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d10:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d14:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008d18:	8812      	ldrh	r2, [r2, #0]
 8008d1a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d22:	3302      	adds	r3, #2
 8008d24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008d28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d2c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d30:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008d34:	7812      	ldrb	r2, [r2, #0]
 8008d36:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d46:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008d4a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d50:	3301      	adds	r3, #1
 8008d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008d56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d5a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008d5e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d64:	3301      	adds	r3, #1
 8008d66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008d6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d6e:	3308      	adds	r3, #8
 8008d70:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008d74:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fdb7 	bl	80098ec <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008d7e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008d82:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d86:	4413      	add	r3, r2
 8008d88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008d8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d90:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008d94:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008da0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008da4:	3301      	adds	r3, #1
 8008da6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008daa:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fd9c 	bl	80098ec <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008db4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008db8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008dca:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dda:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008dde:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008de4:	3302      	adds	r3, #2
 8008de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dee:	2218      	movs	r2, #24
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fd8a 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008df8:	233f      	movs	r3, #63	; 0x3f
 8008dfa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008dfe:	2383      	movs	r3, #131	; 0x83
 8008e00:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e04:	f107 0310 	add.w	r3, r7, #16
 8008e08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e14:	f107 030f 	add.w	r3, r7, #15
 8008e18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e26:	2100      	movs	r1, #0
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 fc33 	bl	8009694 <hci_send_req>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	da01      	bge.n	8008e38 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008e34:	23ff      	movs	r3, #255	; 0xff
 8008e36:	e004      	b.n	8008e42 <aci_gap_set_discoverable+0x1ea>
  return status;
 8008e38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e3c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008e40:	781b      	ldrb	r3, [r3, #0]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bdb0      	pop	{r4, r5, r7, pc}

08008e4c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008e4c:	b590      	push	{r4, r7, lr}
 8008e4e:	b0cd      	sub	sp, #308	; 0x134
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e5c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e66:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	701a      	strb	r2, [r3, #0]
 8008e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e76:	4602      	mov	r2, r0
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008e82:	460a      	mov	r2, r1
 8008e84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008e86:	f107 0310 	add.w	r3, r7, #16
 8008e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008e8e:	f107 0308 	add.w	r3, r7, #8
 8008e92:	2207      	movs	r2, #7
 8008e94:	2100      	movs	r1, #0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fd38 	bl	800990c <Osal_MemSet>
  int index_input = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008eaa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008eae:	7812      	ldrb	r2, [r2, #0]
 8008eb0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ec4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ede:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008ee2:	7812      	ldrb	r2, [r2, #0]
 8008ee4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eea:	3301      	adds	r3, #1
 8008eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ef0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ef4:	2218      	movs	r2, #24
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fd07 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008efe:	233f      	movs	r3, #63	; 0x3f
 8008f00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008f04:	238a      	movs	r3, #138	; 0x8a
 8008f06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f0a:	f107 0310 	add.w	r3, r7, #16
 8008f0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008f1a:	f107 0308 	add.w	r3, r7, #8
 8008f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008f22:	2307      	movs	r3, #7
 8008f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fbb0 	bl	8009694 <hci_send_req>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da01      	bge.n	8008f3e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008f3a:	23ff      	movs	r3, #255	; 0xff
 8008f3c:	e02e      	b.n	8008f9c <aci_gap_init+0x150>
  if ( resp.Status )
 8008f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <aci_gap_init+0x10c>
    return resp.Status;
 8008f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	e021      	b.n	8008f9c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f7a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008f84:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f8e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008f98:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd90      	pop	{r4, r7, pc}

08008fa6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b0cc      	sub	sp, #304	; 0x130
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	4602      	mov	r2, r0
 8008fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb6:	6019      	str	r1, [r3, #0]
 8008fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008fc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008fc2:	f107 0310 	add.w	r3, r7, #16
 8008fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fe4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008fe8:	7812      	ldrb	r2, [r2, #0]
 8008fea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffa:	1c58      	adds	r0, r3, #1
 8008ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009000:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800900e:	6819      	ldr	r1, [r3, #0]
 8009010:	f000 fc6c 	bl	80098ec <Osal_MemCpy>
  index_input += AdvDataLen;
 8009014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009018:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009022:	4413      	add	r3, r2
 8009024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800902c:	2218      	movs	r2, #24
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fc6b 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009036:	233f      	movs	r3, #63	; 0x3f
 8009038:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800903c:	238e      	movs	r3, #142	; 0x8e
 800903e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009042:	f107 0310 	add.w	r3, r7, #16
 8009046:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800904a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800904e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009052:	f107 030f 	add.w	r3, r7, #15
 8009056:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800905a:	2301      	movs	r3, #1
 800905c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009060:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f000 fb14 	bl	8009694 <hci_send_req>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	da01      	bge.n	8009076 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009072:	23ff      	movs	r3, #255	; 0xff
 8009074:	e004      	b.n	8009080 <aci_gap_update_adv_data+0xda>
  return status;
 8009076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800907e:	781b      	ldrb	r3, [r3, #0]
}
 8009080:	4618      	mov	r0, r3
 8009082:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b0cc      	sub	sp, #304	; 0x130
 800908e:	af00      	add	r7, sp, #0
 8009090:	4602      	mov	r2, r0
 8009092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009096:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800909a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 800909c:	f107 0310 	add.w	r3, r7, #16
 80090a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80090ac:	2200      	movs	r2, #0
 80090ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 80090b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090be:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80090c2:	7812      	ldrb	r2, [r2, #0]
 80090c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80090c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ca:	3301      	adds	r3, #1
 80090cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090d4:	2218      	movs	r2, #24
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fc17 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 80090de:	233f      	movs	r3, #63	; 0x3f
 80090e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 80090e4:	238f      	movs	r3, #143	; 0x8f
 80090e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090ea:	f107 0310 	add.w	r3, r7, #16
 80090ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090fa:	f107 030f 	add.w	r3, r7, #15
 80090fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009102:	2301      	movs	r3, #1
 8009104:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009108:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fac0 	bl	8009694 <hci_send_req>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	da01      	bge.n	800911e <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 800911a:	23ff      	movs	r3, #255	; 0xff
 800911c:	e004      	b.n	8009128 <aci_gap_delete_ad_type+0x9e>
  return status;
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009126:	781b      	ldrb	r3, [r3, #0]
}
 8009128:	4618      	mov	r0, r3
 800912a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b088      	sub	sp, #32
 8009136:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800913c:	f107 0308 	add.w	r3, r7, #8
 8009140:	2218      	movs	r2, #24
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fbe1 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 800914a:	233f      	movs	r3, #63	; 0x3f
 800914c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800914e:	f240 1301 	movw	r3, #257	; 0x101
 8009152:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009154:	1dfb      	adds	r3, r7, #7
 8009156:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009158:	2301      	movs	r3, #1
 800915a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	2100      	movs	r1, #0
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fa96 	bl	8009694 <hci_send_req>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	da01      	bge.n	8009172 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800916e:	23ff      	movs	r3, #255	; 0xff
 8009170:	e000      	b.n	8009174 <aci_gatt_init+0x42>
  return status;
 8009172:	79fb      	ldrb	r3, [r7, #7]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800917c:	b5b0      	push	{r4, r5, r7, lr}
 800917e:	b0cc      	sub	sp, #304	; 0x130
 8009180:	af00      	add	r7, sp, #0
 8009182:	4605      	mov	r5, r0
 8009184:	460c      	mov	r4, r1
 8009186:	4610      	mov	r0, r2
 8009188:	4619      	mov	r1, r3
 800918a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800918e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009192:	462a      	mov	r2, r5
 8009194:	801a      	strh	r2, [r3, #0]
 8009196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800919a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800919e:	4622      	mov	r2, r4
 80091a0:	801a      	strh	r2, [r3, #0]
 80091a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80091aa:	4602      	mov	r2, r0
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80091b6:	460a      	mov	r2, r1
 80091b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80091ba:	f107 0310 	add.w	r3, r7, #16
 80091be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80091c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80091d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091dc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80091e0:	8812      	ldrh	r2, [r2, #0]
 80091e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80091e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091e8:	3302      	adds	r3, #2
 80091ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80091ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80091fa:	8812      	ldrh	r2, [r2, #0]
 80091fc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80091fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009202:	3302      	adds	r3, #2
 8009204:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009210:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009214:	7812      	ldrb	r2, [r2, #0]
 8009216:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009218:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800921c:	3301      	adds	r3, #1
 800921e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009226:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800922a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800922e:	7812      	ldrb	r2, [r2, #0]
 8009230:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009236:	3301      	adds	r3, #1
 8009238:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800923c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009240:	1d98      	adds	r0, r3, #6
 8009242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009246:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009252:	f000 fb4b 	bl	80098ec <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009264:	4413      	add	r3, r2
 8009266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800926a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800926e:	2218      	movs	r2, #24
 8009270:	2100      	movs	r1, #0
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fb4a 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009278:	233f      	movs	r3, #63	; 0x3f
 800927a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800927e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009282:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009286:	f107 0310 	add.w	r3, r7, #16
 800928a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800928e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009292:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009296:	f107 030f 	add.w	r3, r7, #15
 800929a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800929e:	2301      	movs	r3, #1
 80092a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f9f2 	bl	8009694 <hci_send_req>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da01      	bge.n	80092ba <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80092b6:	23ff      	movs	r3, #255	; 0xff
 80092b8:	e004      	b.n	80092c4 <aci_gatt_update_char_value+0x148>
  return status;
 80092ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092c2:	781b      	ldrb	r3, [r3, #0]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bdb0      	pop	{r4, r5, r7, pc}

080092ce <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b0cc      	sub	sp, #304	; 0x130
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80092e6:	4602      	mov	r2, r0
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80092f2:	460a      	mov	r2, r1
 80092f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80092f6:	f107 0310 	add.w	r3, r7, #16
 80092fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009302:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009314:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009318:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009324:	3301      	adds	r3, #1
 8009326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800932a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800932e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009332:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800933a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800933e:	3301      	adds	r3, #1
 8009340:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009348:	1c98      	adds	r0, r3, #2
 800934a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800935c:	6819      	ldr	r1, [r3, #0]
 800935e:	f000 fac5 	bl	80098ec <Osal_MemCpy>
  index_input += Length;
 8009362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009366:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009370:	4413      	add	r3, r2
 8009372:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009376:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800937a:	2218      	movs	r2, #24
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fac4 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009384:	233f      	movs	r3, #63	; 0x3f
 8009386:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800938a:	230c      	movs	r3, #12
 800938c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80093a0:	f107 030f 	add.w	r3, r7, #15
 80093a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093b2:	2100      	movs	r1, #0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f96d 	bl	8009694 <hci_send_req>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da01      	bge.n	80093c4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80093c0:	23ff      	movs	r3, #255	; 0xff
 80093c2:	e004      	b.n	80093ce <aci_hal_write_config_data+0x100>
  return status;
 80093c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093cc:	781b      	ldrb	r3, [r3, #0]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b0cc      	sub	sp, #304	; 0x130
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4602      	mov	r2, r0
 80093e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80093e8:	701a      	strb	r2, [r3, #0]
 80093ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093f2:	460a      	mov	r2, r1
 80093f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80093f6:	f107 0310 	add.w	r3, r7, #16
 80093fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009402:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009414:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009418:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009424:	3301      	adds	r3, #1
 8009426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800942a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009432:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800943a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800943e:	3301      	adds	r3, #1
 8009440:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009448:	2218      	movs	r2, #24
 800944a:	2100      	movs	r1, #0
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fa5d 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009452:	233f      	movs	r3, #63	; 0x3f
 8009454:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009458:	230f      	movs	r3, #15
 800945a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800945e:	f107 0310 	add.w	r3, r7, #16
 8009462:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800946a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800946e:	f107 030f 	add.w	r3, r7, #15
 8009472:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800947c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f906 	bl	8009694 <hci_send_req>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	da01      	bge.n	8009492 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800948e:	23ff      	movs	r3, #255	; 0xff
 8009490:	e004      	b.n	800949c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009496:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800949a:	781b      	ldrb	r3, [r3, #0]
}
 800949c:	4618      	mov	r0, r3
 800949e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b088      	sub	sp, #32
 80094aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	2218      	movs	r2, #24
 80094b6:	2100      	movs	r1, #0
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 fa27 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x03;
 80094be:	2303      	movs	r3, #3
 80094c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80094c2:	2303      	movs	r3, #3
 80094c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80094c6:	1dfb      	adds	r3, r7, #7
 80094c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80094ca:	2301      	movs	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094ce:	f107 0308 	add.w	r3, r7, #8
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f8dd 	bl	8009694 <hci_send_req>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da01      	bge.n	80094e4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80094e0:	23ff      	movs	r3, #255	; 0xff
 80094e2:	e000      	b.n	80094e6 <hci_reset+0x40>
  return status;
 80094e4:	79fb      	ldrb	r3, [r7, #7]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3720      	adds	r7, #32
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b0cc      	sub	sp, #304	; 0x130
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	4602      	mov	r2, r0
 80094f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094fe:	6019      	str	r1, [r3, #0]
 8009500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009504:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009508:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800950a:	f107 0310 	add.w	r3, r7, #16
 800950e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009516:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800951a:	2200      	movs	r2, #0
 800951c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8009524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009528:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800952c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009530:	7812      	ldrb	r2, [r2, #0]
 8009532:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009538:	3301      	adds	r3, #1
 800953a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 800953e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009542:	1c58      	adds	r0, r3, #1
 8009544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800954c:	221f      	movs	r2, #31
 800954e:	6819      	ldr	r1, [r3, #0]
 8009550:	f000 f9cc 	bl	80098ec <Osal_MemCpy>
  index_input += 31;
 8009554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009558:	331f      	adds	r3, #31
 800955a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800955e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009562:	2218      	movs	r2, #24
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f000 f9d0 	bl	800990c <Osal_MemSet>
  rq.ogf = 0x08;
 800956c:	2308      	movs	r3, #8
 800956e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8009572:	2309      	movs	r3, #9
 8009574:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009578:	f107 0310 	add.w	r3, r7, #16
 800957c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009580:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009584:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009588:	f107 030f 	add.w	r3, r7, #15
 800958c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009590:	2301      	movs	r3, #1
 8009592:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009596:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f879 	bl	8009694 <hci_send_req>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	da01      	bge.n	80095ac <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 80095a8:	23ff      	movs	r3, #255	; 0xff
 80095aa:	e004      	b.n	80095b6 <hci_le_set_scan_response_data+0xc8>
  return status;
 80095ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095b4:	781b      	ldrb	r3, [r3, #0]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	4a08      	ldr	r2, [pc, #32]	; (80095f0 <hci_init+0x30>)
 80095d0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80095d2:	4a08      	ldr	r2, [pc, #32]	; (80095f4 <hci_init+0x34>)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80095d8:	4806      	ldr	r0, [pc, #24]	; (80095f4 <hci_init+0x34>)
 80095da:	f000 f973 	bl	80098c4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f8d4 	bl	8009790 <TlInit>

  return;
 80095e8:	bf00      	nop
}
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20000558 	.word	0x20000558
 80095f4:	20000530 	.word	0x20000530

080095f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80095fe:	4822      	ldr	r0, [pc, #136]	; (8009688 <hci_user_evt_proc+0x90>)
 8009600:	f001 fa7a 	bl	800aaf8 <LST_is_empty>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d12b      	bne.n	8009662 <hci_user_evt_proc+0x6a>
 800960a:	4b20      	ldr	r3, [pc, #128]	; (800968c <hci_user_evt_proc+0x94>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d027      	beq.n	8009662 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009612:	f107 030c 	add.w	r3, r7, #12
 8009616:	4619      	mov	r1, r3
 8009618:	481b      	ldr	r0, [pc, #108]	; (8009688 <hci_user_evt_proc+0x90>)
 800961a:	f001 fafc 	bl	800ac16 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800961e:	4b1c      	ldr	r3, [pc, #112]	; (8009690 <hci_user_evt_proc+0x98>)
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00c      	beq.n	8009640 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800962a:	2301      	movs	r3, #1
 800962c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800962e:	4b18      	ldr	r3, [pc, #96]	; (8009690 <hci_user_evt_proc+0x98>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	1d3a      	adds	r2, r7, #4
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009638:	793a      	ldrb	r2, [r7, #4]
 800963a:	4b14      	ldr	r3, [pc, #80]	; (800968c <hci_user_evt_proc+0x94>)
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	e002      	b.n	8009646 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009640:	4b12      	ldr	r3, [pc, #72]	; (800968c <hci_user_evt_proc+0x94>)
 8009642:	2201      	movs	r2, #1
 8009644:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009646:	4b11      	ldr	r3, [pc, #68]	; (800968c <hci_user_evt_proc+0x94>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d004      	beq.n	8009658 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4618      	mov	r0, r3
 8009652:	f000 fe1f 	bl	800a294 <TL_MM_EvtDone>
 8009656:	e004      	b.n	8009662 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4619      	mov	r1, r3
 800965c:	480a      	ldr	r0, [pc, #40]	; (8009688 <hci_user_evt_proc+0x90>)
 800965e:	f001 fa6d 	bl	800ab3c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009662:	4809      	ldr	r0, [pc, #36]	; (8009688 <hci_user_evt_proc+0x90>)
 8009664:	f001 fa48 	bl	800aaf8 <LST_is_empty>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d107      	bne.n	800967e <hci_user_evt_proc+0x86>
 800966e:	4b07      	ldr	r3, [pc, #28]	; (800968c <hci_user_evt_proc+0x94>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009676:	4804      	ldr	r0, [pc, #16]	; (8009688 <hci_user_evt_proc+0x90>)
 8009678:	f7f9 fb68 	bl	8002d4c <hci_notify_asynch_evt>
  }


  return;
 800967c:	bf00      	nop
 800967e:	bf00      	nop
}
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	2000009c 	.word	0x2000009c
 800968c:	200000a8 	.word	0x200000a8
 8009690:	20000530 	.word	0x20000530

08009694 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80096a0:	2000      	movs	r0, #0
 80096a2:	f000 f8cb 	bl	800983c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80096a6:	2300      	movs	r3, #0
 80096a8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	885b      	ldrh	r3, [r3, #2]
 80096ae:	b21b      	sxth	r3, r3
 80096b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096b4:	b21a      	sxth	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	029b      	lsls	r3, r3, #10
 80096bc:	b21b      	sxth	r3, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	b21b      	sxth	r3, r3
 80096c2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	b2d9      	uxtb	r1, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	8bbb      	ldrh	r3, [r7, #28]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f88d 	bl	80097f0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80096d6:	e04e      	b.n	8009776 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80096d8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80096dc:	f7f9 fb4d 	bl	8002d7a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80096e0:	e043      	b.n	800976a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80096e2:	f107 030c 	add.w	r3, r7, #12
 80096e6:	4619      	mov	r1, r3
 80096e8:	4828      	ldr	r0, [pc, #160]	; (800978c <hci_send_req+0xf8>)
 80096ea:	f001 fa94 	bl	800ac16 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	7a5b      	ldrb	r3, [r3, #9]
 80096f2:	2b0f      	cmp	r3, #15
 80096f4:	d114      	bne.n	8009720 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	330b      	adds	r3, #11
 80096fa:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	885b      	ldrh	r3, [r3, #2]
 8009700:	b29b      	uxth	r3, r3
 8009702:	8bba      	ldrh	r2, [r7, #28]
 8009704:	429a      	cmp	r2, r3
 8009706:	d104      	bne.n	8009712 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d027      	beq.n	800976a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800971a:	2301      	movs	r3, #1
 800971c:	77fb      	strb	r3, [r7, #31]
 800971e:	e024      	b.n	800976a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	330b      	adds	r3, #11
 8009724:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800972c:	b29b      	uxth	r3, r3
 800972e:	8bba      	ldrh	r2, [r7, #28]
 8009730:	429a      	cmp	r2, r3
 8009732:	d114      	bne.n	800975e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	7a9b      	ldrb	r3, [r3, #10]
 8009738:	3b03      	subs	r3, #3
 800973a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	695a      	ldr	r2, [r3, #20]
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	429a      	cmp	r2, r3
 8009744:	bfa8      	it	ge
 8009746:	461a      	movge	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6918      	ldr	r0, [r3, #16]
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	1cd9      	adds	r1, r3, #3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	461a      	mov	r2, r3
 800975a:	f001 fea7 	bl	800b4ac <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009766:	2301      	movs	r3, #1
 8009768:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800976a:	4808      	ldr	r0, [pc, #32]	; (800978c <hci_send_req+0xf8>)
 800976c:	f001 f9c4 	bl	800aaf8 <LST_is_empty>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0b5      	beq.n	80096e2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009776:	7ffb      	ldrb	r3, [r7, #31]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0ad      	beq.n	80096d8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800977c:	2001      	movs	r0, #1
 800977e:	f000 f85d 	bl	800983c <NotifyCmdStatus>

  return 0;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3720      	adds	r7, #32
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000550 	.word	0x20000550

08009790 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009798:	480f      	ldr	r0, [pc, #60]	; (80097d8 <TlInit+0x48>)
 800979a:	f001 f99d 	bl	800aad8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800979e:	4a0f      	ldr	r2, [pc, #60]	; (80097dc <TlInit+0x4c>)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80097a4:	480e      	ldr	r0, [pc, #56]	; (80097e0 <TlInit+0x50>)
 80097a6:	f001 f997 	bl	800aad8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80097aa:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <TlInit+0x54>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80097b0:	4b0d      	ldr	r3, [pc, #52]	; (80097e8 <TlInit+0x58>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00a      	beq.n	80097ce <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80097bc:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <TlInit+0x5c>)
 80097be:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80097c0:	4b09      	ldr	r3, [pc, #36]	; (80097e8 <TlInit+0x58>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f107 0208 	add.w	r2, r7, #8
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
  }

  return;
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
}
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000550 	.word	0x20000550
 80097dc:	200000a4 	.word	0x200000a4
 80097e0:	2000009c 	.word	0x2000009c
 80097e4:	200000a8 	.word	0x200000a8
 80097e8:	20000530 	.word	0x20000530
 80097ec:	0800987d 	.word	0x0800987d

080097f0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	603a      	str	r2, [r7, #0]
 80097fa:	80fb      	strh	r3, [r7, #6]
 80097fc:	460b      	mov	r3, r1
 80097fe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009800:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <SendCmd+0x44>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	88fa      	ldrh	r2, [r7, #6]
 8009806:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800980a:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <SendCmd+0x44>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	797a      	ldrb	r2, [r7, #5]
 8009810:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009812:	4b08      	ldr	r3, [pc, #32]	; (8009834 <SendCmd+0x44>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	330c      	adds	r3, #12
 8009818:	797a      	ldrb	r2, [r7, #5]
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	4618      	mov	r0, r3
 800981e:	f001 fe45 	bl	800b4ac <memcpy>

  hciContext.io.Send(0,0);
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <SendCmd+0x48>)
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2100      	movs	r1, #0
 8009828:	2000      	movs	r0, #0
 800982a:	4798      	blx	r3

  return;
 800982c:	bf00      	nop
}
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	200000a4 	.word	0x200000a4
 8009838:	20000530 	.word	0x20000530

0800983c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d108      	bne.n	800985e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <NotifyCmdStatus+0x3c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00d      	beq.n	8009870 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009854:	4b08      	ldr	r3, [pc, #32]	; (8009878 <NotifyCmdStatus+0x3c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2000      	movs	r0, #0
 800985a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800985c:	e008      	b.n	8009870 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800985e:	4b06      	ldr	r3, [pc, #24]	; (8009878 <NotifyCmdStatus+0x3c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d004      	beq.n	8009870 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009866:	4b04      	ldr	r3, [pc, #16]	; (8009878 <NotifyCmdStatus+0x3c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2001      	movs	r0, #1
 800986c:	4798      	blx	r3
  return;
 800986e:	bf00      	nop
 8009870:	bf00      	nop
}
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000558 	.word	0x20000558

0800987c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7a5b      	ldrb	r3, [r3, #9]
 8009888:	2b0f      	cmp	r3, #15
 800988a:	d003      	beq.n	8009894 <TlEvtReceived+0x18>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7a5b      	ldrb	r3, [r3, #9]
 8009890:	2b0e      	cmp	r3, #14
 8009892:	d107      	bne.n	80098a4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4809      	ldr	r0, [pc, #36]	; (80098bc <TlEvtReceived+0x40>)
 8009898:	f001 f976 	bl	800ab88 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800989c:	2000      	movs	r0, #0
 800989e:	f7f9 fa61 	bl	8002d64 <hci_cmd_resp_release>
 80098a2:	e006      	b.n	80098b2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	4806      	ldr	r0, [pc, #24]	; (80098c0 <TlEvtReceived+0x44>)
 80098a8:	f001 f96e 	bl	800ab88 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80098ac:	4804      	ldr	r0, [pc, #16]	; (80098c0 <TlEvtReceived+0x44>)
 80098ae:	f7f9 fa4d 	bl	8002d4c <hci_notify_asynch_evt>
  }

  return;
 80098b2:	bf00      	nop
}
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000550 	.word	0x20000550
 80098c0:	2000009c 	.word	0x2000009c

080098c4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a05      	ldr	r2, [pc, #20]	; (80098e4 <hci_register_io_bus+0x20>)
 80098d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a04      	ldr	r2, [pc, #16]	; (80098e8 <hci_register_io_bus+0x24>)
 80098d6:	611a      	str	r2, [r3, #16]

  return;
 80098d8:	bf00      	nop
}
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	0800a00d 	.word	0x0800a00d
 80098e8:	0800a075 	.word	0x0800a075

080098ec <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f001 fdd5 	bl	800b4ac <memcpy>
 8009902:	4603      	mov	r3, r0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	68b9      	ldr	r1, [r7, #8]
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f001 fdd3 	bl	800b4c8 <memset>
 8009922:	4603      	mov	r3, r0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009934:	f107 030c 	add.w	r3, r7, #12
 8009938:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	212e      	movs	r1, #46	; 0x2e
 8009944:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009948:	f000 f94c 	bl	8009be4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	330b      	adds	r3, #11
 8009950:	78db      	ldrb	r3, [r3, #3]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b088      	sub	sp, #32
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009962:	f107 030c 	add.w	r3, r7, #12
 8009966:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	210f      	movs	r1, #15
 8009972:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009976:	f000 f935 	bl	8009be4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	330b      	adds	r3, #11
 800997e:	78db      	ldrb	r3, [r3, #3]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3720      	adds	r7, #32
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009990:	f107 030c 	add.w	r3, r7, #12
 8009994:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	2110      	movs	r1, #16
 800999c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80099a0:	f000 f920 	bl	8009be4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	330b      	adds	r3, #11
 80099a8:	78db      	ldrb	r3, [r3, #3]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80099b4:	b480      	push	{r7}
 80099b6:	b08b      	sub	sp, #44	; 0x2c
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80099dc:	4b4a      	ldr	r3, [pc, #296]	; (8009b08 <SHCI_GetWirelessFwInfo+0x154>)
 80099de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80099e4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80099ee:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a44      	ldr	r2, [pc, #272]	; (8009b0c <SHCI_GetWirelessFwInfo+0x158>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d10f      	bne.n	8009a20 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	e01a      	b.n	8009a56 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009a28:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009a2c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	0e1b      	lsrs	r3, r3, #24
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	0a1b      	lsrs	r3, r3, #8
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	091b      	lsrs	r3, r3, #4
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	f003 030f 	and.w	r3, r3, #15
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	0e1b      	lsrs	r3, r3, #24
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	0c1b      	lsrs	r3, r3, #16
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	0a1b      	lsrs	r3, r3, #8
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	0e1b      	lsrs	r3, r3, #24
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	0c1b      	lsrs	r3, r3, #16
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	0a1b      	lsrs	r3, r3, #8
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	0e1b      	lsrs	r3, r3, #24
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	0c1b      	lsrs	r3, r3, #16
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	372c      	adds	r7, #44	; 0x2c
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	58004000 	.word	0x58004000
 8009b0c:	a94656b9 	.word	0xa94656b9

08009b10 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	4a08      	ldr	r2, [pc, #32]	; (8009b40 <shci_init+0x30>)
 8009b20:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009b22:	4a08      	ldr	r2, [pc, #32]	; (8009b44 <shci_init+0x34>)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009b28:	4806      	ldr	r0, [pc, #24]	; (8009b44 <shci_init+0x34>)
 8009b2a:	f000 f911 	bl	8009d50 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f894 	bl	8009c60 <TlInit>

  return;
 8009b38:	bf00      	nop
}
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	2000057c 	.word	0x2000057c
 8009b44:	2000055c 	.word	0x2000055c

08009b48 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009b4e:	4822      	ldr	r0, [pc, #136]	; (8009bd8 <shci_user_evt_proc+0x90>)
 8009b50:	f000 ffd2 	bl	800aaf8 <LST_is_empty>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d12b      	bne.n	8009bb2 <shci_user_evt_proc+0x6a>
 8009b5a:	4b20      	ldr	r3, [pc, #128]	; (8009bdc <shci_user_evt_proc+0x94>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d027      	beq.n	8009bb2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009b62:	f107 030c 	add.w	r3, r7, #12
 8009b66:	4619      	mov	r1, r3
 8009b68:	481b      	ldr	r0, [pc, #108]	; (8009bd8 <shci_user_evt_proc+0x90>)
 8009b6a:	f001 f854 	bl	800ac16 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009b6e:	4b1c      	ldr	r3, [pc, #112]	; (8009be0 <shci_user_evt_proc+0x98>)
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009b7e:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <shci_user_evt_proc+0x98>)
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	1d3a      	adds	r2, r7, #4
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009b88:	793a      	ldrb	r2, [r7, #4]
 8009b8a:	4b14      	ldr	r3, [pc, #80]	; (8009bdc <shci_user_evt_proc+0x94>)
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e002      	b.n	8009b96 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009b90:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <shci_user_evt_proc+0x94>)
 8009b92:	2201      	movs	r2, #1
 8009b94:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009b96:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <shci_user_evt_proc+0x94>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fb77 	bl	800a294 <TL_MM_EvtDone>
 8009ba6:	e004      	b.n	8009bb2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4619      	mov	r1, r3
 8009bac:	480a      	ldr	r0, [pc, #40]	; (8009bd8 <shci_user_evt_proc+0x90>)
 8009bae:	f000 ffc5 	bl	800ab3c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009bb2:	4809      	ldr	r0, [pc, #36]	; (8009bd8 <shci_user_evt_proc+0x90>)
 8009bb4:	f000 ffa0 	bl	800aaf8 <LST_is_empty>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d107      	bne.n	8009bce <shci_user_evt_proc+0x86>
 8009bbe:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <shci_user_evt_proc+0x94>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009bc6:	4804      	ldr	r0, [pc, #16]	; (8009bd8 <shci_user_evt_proc+0x90>)
 8009bc8:	f7f7 fa1d 	bl	8001006 <shci_notify_asynch_evt>
  }


  return;
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
}
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	200000d0 	.word	0x200000d0
 8009bdc:	200000e0 	.word	0x200000e0
 8009be0:	2000055c 	.word	0x2000055c

08009be4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60ba      	str	r2, [r7, #8]
 8009bec:	607b      	str	r3, [r7, #4]
 8009bee:	4603      	mov	r3, r0
 8009bf0:	81fb      	strh	r3, [r7, #14]
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	f000 f864 	bl	8009cc4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009bfc:	4b16      	ldr	r3, [pc, #88]	; (8009c58 <shci_send+0x74>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	89fa      	ldrh	r2, [r7, #14]
 8009c02:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <shci_send+0x74>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	7b7a      	ldrb	r2, [r7, #13]
 8009c0c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009c0e:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <shci_send+0x74>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	7b7a      	ldrb	r2, [r7, #13]
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 fc47 	bl	800b4ac <memcpy>

  shciContext.io.Send(0,0);
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <shci_send+0x78>)
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2100      	movs	r1, #0
 8009c24:	2000      	movs	r0, #0
 8009c26:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009c28:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009c2c:	f7f7 fa02 	bl	8001034 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f103 0008 	add.w	r0, r3, #8
 8009c36:	4b08      	ldr	r3, [pc, #32]	; (8009c58 <shci_send+0x74>)
 8009c38:	6819      	ldr	r1, [r3, #0]
 8009c3a:	4b07      	ldr	r3, [pc, #28]	; (8009c58 <shci_send+0x74>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	789b      	ldrb	r3, [r3, #2]
 8009c40:	3303      	adds	r3, #3
 8009c42:	461a      	mov	r2, r3
 8009c44:	f001 fc32 	bl	800b4ac <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009c48:	2001      	movs	r0, #1
 8009c4a:	f000 f83b 	bl	8009cc4 <Cmd_SetStatus>

  return;
 8009c4e:	bf00      	nop
}
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	200000dc 	.word	0x200000dc
 8009c5c:	2000055c 	.word	0x2000055c

08009c60 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009c68:	4a10      	ldr	r2, [pc, #64]	; (8009cac <TlInit+0x4c>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009c6e:	4810      	ldr	r0, [pc, #64]	; (8009cb0 <TlInit+0x50>)
 8009c70:	f000 ff32 	bl	800aad8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009c74:	2001      	movs	r0, #1
 8009c76:	f000 f825 	bl	8009cc4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009c7a:	4b0e      	ldr	r3, [pc, #56]	; (8009cb4 <TlInit+0x54>)
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009c80:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <TlInit+0x58>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00c      	beq.n	8009ca2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009c8c:	4b0b      	ldr	r3, [pc, #44]	; (8009cbc <TlInit+0x5c>)
 8009c8e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009c90:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <TlInit+0x60>)
 8009c92:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009c94:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <TlInit+0x58>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f107 020c 	add.w	r2, r7, #12
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4798      	blx	r3
  }

  return;
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
}
 8009ca4:	3718      	adds	r7, #24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	200000dc 	.word	0x200000dc
 8009cb0:	200000d0 	.word	0x200000d0
 8009cb4:	200000e0 	.word	0x200000e0
 8009cb8:	2000055c 	.word	0x2000055c
 8009cbc:	08009d15 	.word	0x08009d15
 8009cc0:	08009d2d 	.word	0x08009d2d

08009cc4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10b      	bne.n	8009cec <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <Cmd_SetStatus+0x48>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <Cmd_SetStatus+0x48>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <Cmd_SetStatus+0x4c>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009cea:	e00b      	b.n	8009d04 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009cec:	4b08      	ldr	r3, [pc, #32]	; (8009d10 <Cmd_SetStatus+0x4c>)
 8009cee:	2201      	movs	r2, #1
 8009cf0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009cf2:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <Cmd_SetStatus+0x48>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d004      	beq.n	8009d04 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009cfa:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <Cmd_SetStatus+0x48>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2001      	movs	r0, #1
 8009d00:	4798      	blx	r3
  return;
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
}
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	2000057c 	.word	0x2000057c
 8009d10:	200000d8 	.word	0x200000d8

08009d14 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	f7f7 f97e 	bl	800101e <shci_cmd_resp_release>

  return;
 8009d22:	bf00      	nop
}
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	4805      	ldr	r0, [pc, #20]	; (8009d4c <TlUserEvtReceived+0x20>)
 8009d38:	f000 ff26 	bl	800ab88 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009d3c:	4803      	ldr	r0, [pc, #12]	; (8009d4c <TlUserEvtReceived+0x20>)
 8009d3e:	f7f7 f962 	bl	8001006 <shci_notify_asynch_evt>

  return;
 8009d42:	bf00      	nop
}
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200000d0 	.word	0x200000d0

08009d50 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a05      	ldr	r2, [pc, #20]	; (8009d70 <shci_register_io_bus+0x20>)
 8009d5c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a04      	ldr	r2, [pc, #16]	; (8009d74 <shci_register_io_bus+0x24>)
 8009d62:	611a      	str	r2, [r3, #16]

  return;
 8009d64:	bf00      	nop
}
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	0800a121 	.word	0x0800a121
 8009d74:	0800a175 	.word	0x0800a175

08009d78 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
  return;
 8009d7c:	bf00      	nop
}
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009d86:	b480      	push	{r7}
 8009d88:	af00      	add	r7, sp, #0
  return;
 8009d8a:	bf00      	nop
}
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0
  return;
 8009d98:	bf00      	nop
}
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009da2:	b480      	push	{r7}
 8009da4:	af00      	add	r7, sp, #0
  return;
 8009da6:	bf00      	nop
}
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0
  return;
 8009db4:	bf00      	nop
}
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	af00      	add	r7, sp, #0
  return;
 8009dc2:	bf00      	nop
}
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
  return;
 8009dd0:	bf00      	nop
}
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009dda:	b480      	push	{r7}
 8009ddc:	af00      	add	r7, sp, #0
  return;
 8009dde:	bf00      	nop
}
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009de8:	b480      	push	{r7}
 8009dea:	af00      	add	r7, sp, #0
  return;
 8009dec:	bf00      	nop
}
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009df6:	b480      	push	{r7}
 8009df8:	af00      	add	r7, sp, #0
  return;
 8009dfa:	bf00      	nop
}
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
  return;
 8009e08:	bf00      	nop
}
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009e12:	b480      	push	{r7}
 8009e14:	af00      	add	r7, sp, #0
  return;
 8009e16:	bf00      	nop
}
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
  return;
 8009e24:	bf00      	nop
}
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009e2e:	b480      	push	{r7}
 8009e30:	af00      	add	r7, sp, #0
  return;
 8009e32:	bf00      	nop
}
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
  return;
 8009e40:	bf00      	nop
}
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	af00      	add	r7, sp, #0
  return;
 8009e4e:	bf00      	nop
}
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009e58:	b480      	push	{r7}
 8009e5a:	af00      	add	r7, sp, #0
  return;
 8009e5c:	bf00      	nop
}
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8009e66:	b480      	push	{r7}
 8009e68:	af00      	add	r7, sp, #0
  return;
 8009e6a:	bf00      	nop
}
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009e78:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <SVCCTL_Init+0x18>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009e7e:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <SVCCTL_Init+0x1c>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009e84:	f000 f806 	bl	8009e94 <SVCCTL_SvcInit>

  return;
 8009e88:	bf00      	nop
}
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	200000ac 	.word	0x200000ac
 8009e90:	200000cc 	.word	0x200000cc

08009e94 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
  BAS_Init();
 8009e98:	f7ff ff6e 	bl	8009d78 <BAS_Init>

  BLS_Init();
 8009e9c:	f7ff ff73 	bl	8009d86 <BLS_Init>

  CRS_STM_Init();
 8009ea0:	f7ff ff78 	bl	8009d94 <CRS_STM_Init>

  DIS_Init();
 8009ea4:	f7ff ff7d 	bl	8009da2 <DIS_Init>

  EDS_STM_Init();
 8009ea8:	f7ff ff82 	bl	8009db0 <EDS_STM_Init>

  HIDS_Init();
 8009eac:	f7ff ff87 	bl	8009dbe <HIDS_Init>

  HRS_Init();
 8009eb0:	f7ff ff8c 	bl	8009dcc <HRS_Init>

  HTS_Init();
 8009eb4:	f7ff ff91 	bl	8009dda <HTS_Init>

  IAS_Init();
 8009eb8:	f7ff ff96 	bl	8009de8 <IAS_Init>

  LLS_Init();
 8009ebc:	f7ff ff9b 	bl	8009df6 <LLS_Init>

  TPS_Init();
 8009ec0:	f7ff ffa0 	bl	8009e04 <TPS_Init>

  MOTENV_STM_Init();
 8009ec4:	f7ff ffa5 	bl	8009e12 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009ec8:	f7ff ffaa 	bl	8009e20 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009ecc:	f7ff ffaf 	bl	8009e2e <ZDD_STM_Init>

  OTAS_STM_Init();
 8009ed0:	f7ff ffb4 	bl	8009e3c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009ed4:	f7ff ffc0 	bl	8009e58 <BVOPUS_STM_Init>

  MESH_Init();
 8009ed8:	f7ff ffb7 	bl	8009e4a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009edc:	f7ff ffc3 	bl	8009e66 <SVCCTL_InitCustomSvc>
  
  return;
 8009ee0:	bf00      	nop
}
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2bff      	cmp	r3, #255	; 0xff
 8009efc:	d125      	bne.n	8009f4a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	3302      	adds	r3, #2
 8009f02:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f12:	d118      	bne.n	8009f46 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009f14:	2300      	movs	r3, #0
 8009f16:	757b      	strb	r3, [r7, #21]
 8009f18:	e00d      	b.n	8009f36 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009f1a:	7d7b      	ldrb	r3, [r7, #21]
 8009f1c:	4a1a      	ldr	r2, [pc, #104]	; (8009f88 <SVCCTL_UserEvtRx+0xa4>)
 8009f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4798      	blx	r3
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d108      	bne.n	8009f42 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009f30:	7d7b      	ldrb	r3, [r7, #21]
 8009f32:	3301      	adds	r3, #1
 8009f34:	757b      	strb	r3, [r7, #21]
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <SVCCTL_UserEvtRx+0xa4>)
 8009f38:	7f1b      	ldrb	r3, [r3, #28]
 8009f3a:	7d7a      	ldrb	r2, [r7, #21]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d3ec      	bcc.n	8009f1a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009f40:	e002      	b.n	8009f48 <SVCCTL_UserEvtRx+0x64>
              break;
 8009f42:	bf00      	nop
          break;
 8009f44:	e000      	b.n	8009f48 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009f46:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009f48:	e000      	b.n	8009f4c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009f4a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d00f      	beq.n	8009f72 <SVCCTL_UserEvtRx+0x8e>
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	dc10      	bgt.n	8009f78 <SVCCTL_UserEvtRx+0x94>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <SVCCTL_UserEvtRx+0x7c>
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d006      	beq.n	8009f6c <SVCCTL_UserEvtRx+0x88>
 8009f5e:	e00b      	b.n	8009f78 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7f8 fd03 	bl	800296c <SVCCTL_App_Notification>
 8009f66:	4603      	mov	r3, r0
 8009f68:	75bb      	strb	r3, [r7, #22]
      break;
 8009f6a:	e008      	b.n	8009f7e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	75bb      	strb	r3, [r7, #22]
      break;
 8009f70:	e005      	b.n	8009f7e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009f72:	2300      	movs	r3, #0
 8009f74:	75bb      	strb	r3, [r7, #22]
      break;
 8009f76:	e002      	b.n	8009f7e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	75bb      	strb	r3, [r7, #22]
      break;
 8009f7c:	bf00      	nop
  }

  return (return_status);
 8009f7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	200000ac 	.word	0x200000ac

08009f8c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009f90:	f7f9 f9b8 	bl	8003304 <HW_IPCC_Enable>

  return;
 8009f94:	bf00      	nop
}
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <TL_Init>:


void TL_Init( void )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009f9c:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <TL_Init+0x48>)
 8009f9e:	4a11      	ldr	r2, [pc, #68]	; (8009fe4 <TL_Init+0x4c>)
 8009fa0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009fa2:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <TL_Init+0x48>)
 8009fa4:	4a10      	ldr	r2, [pc, #64]	; (8009fe8 <TL_Init+0x50>)
 8009fa6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009fa8:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <TL_Init+0x48>)
 8009faa:	4a10      	ldr	r2, [pc, #64]	; (8009fec <TL_Init+0x54>)
 8009fac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <TL_Init+0x48>)
 8009fb0:	4a0f      	ldr	r2, [pc, #60]	; (8009ff0 <TL_Init+0x58>)
 8009fb2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <TL_Init+0x48>)
 8009fb6:	4a0f      	ldr	r2, [pc, #60]	; (8009ff4 <TL_Init+0x5c>)
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <TL_Init+0x48>)
 8009fbc:	4a0e      	ldr	r2, [pc, #56]	; (8009ff8 <TL_Init+0x60>)
 8009fbe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <TL_Init+0x48>)
 8009fc2:	4a0e      	ldr	r2, [pc, #56]	; (8009ffc <TL_Init+0x64>)
 8009fc4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009fc6:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <TL_Init+0x48>)
 8009fc8:	4a0d      	ldr	r2, [pc, #52]	; (800a000 <TL_Init+0x68>)
 8009fca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009fcc:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <TL_Init+0x48>)
 8009fce:	4a0d      	ldr	r2, [pc, #52]	; (800a004 <TL_Init+0x6c>)
 8009fd0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009fd2:	4b03      	ldr	r3, [pc, #12]	; (8009fe0 <TL_Init+0x48>)
 8009fd4:	4a0c      	ldr	r2, [pc, #48]	; (800a008 <TL_Init+0x70>)
 8009fd6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009fd8:	f7f9 f9a8 	bl	800332c <HW_IPCC_Init>

  return;
 8009fdc:	bf00      	nop
}
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20030000 	.word	0x20030000
 8009fe4:	20030134 	.word	0x20030134
 8009fe8:	20030154 	.word	0x20030154
 8009fec:	20030164 	.word	0x20030164
 8009ff0:	20030174 	.word	0x20030174
 8009ff4:	2003017c 	.word	0x2003017c
 8009ff8:	20030184 	.word	0x20030184
 8009ffc:	2003018c 	.word	0x2003018c
 800a000:	200301a8 	.word	0x200301a8
 800a004:	200301ac 	.word	0x200301ac
 800a008:	200301b8 	.word	0x200301b8

0800a00c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a018:	4811      	ldr	r0, [pc, #68]	; (800a060 <TL_BLE_Init+0x54>)
 800a01a:	f000 fd5d 	bl	800aad8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a01e:	4b11      	ldr	r3, [pc, #68]	; (800a064 <TL_BLE_Init+0x58>)
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	4a0c      	ldr	r2, [pc, #48]	; (800a068 <TL_BLE_Init+0x5c>)
 800a038:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4a08      	ldr	r2, [pc, #32]	; (800a060 <TL_BLE_Init+0x54>)
 800a03e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a040:	f7f9 f98a 	bl	8003358 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a08      	ldr	r2, [pc, #32]	; (800a06c <TL_BLE_Init+0x60>)
 800a04a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	4a07      	ldr	r2, [pc, #28]	; (800a070 <TL_BLE_Init+0x64>)
 800a052:	6013      	str	r3, [r2, #0]

  return 0;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200301d4 	.word	0x200301d4
 800a064:	20030000 	.word	0x20030000
 800a068:	20030a58 	.word	0x20030a58
 800a06c:	20000588 	.word	0x20000588
 800a070:	2000058c 	.word	0x2000058c

0800a074 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <TL_BLE_SendCmd+0x34>)
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2201      	movs	r2, #1
 800a088:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a08a:	4b07      	ldr	r3, [pc, #28]	; (800a0a8 <TL_BLE_SendCmd+0x34>)
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4619      	mov	r1, r3
 800a092:	2001      	movs	r0, #1
 800a094:	f000 f96c 	bl	800a370 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a098:	f7f9 f968 	bl	800336c <HW_IPCC_BLE_SendCmd>

  return 0;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20030000 	.word	0x20030000

0800a0ac <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a0b2:	e01c      	b.n	800a0ee <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a0b4:	1d3b      	adds	r3, r7, #4
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4812      	ldr	r0, [pc, #72]	; (800a104 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a0ba:	f000 fdac 	bl	800ac16 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	7a5b      	ldrb	r3, [r3, #9]
 800a0c2:	2b0f      	cmp	r3, #15
 800a0c4:	d003      	beq.n	800a0ce <HW_IPCC_BLE_RxEvtNot+0x22>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	7a5b      	ldrb	r3, [r3, #9]
 800a0ca:	2b0e      	cmp	r3, #14
 800a0cc:	d105      	bne.n	800a0da <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	2002      	movs	r0, #2
 800a0d4:	f000 f94c 	bl	800a370 <OutputDbgTrace>
 800a0d8:	e004      	b.n	800a0e4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	2003      	movs	r0, #3
 800a0e0:	f000 f946 	bl	800a370 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a0e4:	4b08      	ldr	r3, [pc, #32]	; (800a108 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a0ee:	4805      	ldr	r0, [pc, #20]	; (800a104 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a0f0:	f000 fd02 	bl	800aaf8 <LST_is_empty>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0dc      	beq.n	800a0b4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a0fa:	bf00      	nop
}
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	200301d4 	.word	0x200301d4
 800a108:	20000588 	.word	0x20000588

0800a10c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a110:	4b02      	ldr	r3, [pc, #8]	; (800a11c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4798      	blx	r3

  return;
 800a116:	bf00      	nop
}
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	2000058c 	.word	0x2000058c

0800a120 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a12c:	480d      	ldr	r0, [pc, #52]	; (800a164 <TL_SYS_Init+0x44>)
 800a12e:	f000 fcd3 	bl	800aad8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a132:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <TL_SYS_Init+0x48>)
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	4a08      	ldr	r2, [pc, #32]	; (800a164 <TL_SYS_Init+0x44>)
 800a144:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a146:	f7f9 f933 	bl	80033b0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a07      	ldr	r2, [pc, #28]	; (800a16c <TL_SYS_Init+0x4c>)
 800a150:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4a06      	ldr	r2, [pc, #24]	; (800a170 <TL_SYS_Init+0x50>)
 800a158:	6013      	str	r3, [r2, #0]

  return 0;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200301dc 	.word	0x200301dc
 800a168:	20030000 	.word	0x20030000
 800a16c:	20000590 	.word	0x20000590
 800a170:	20000594 	.word	0x20000594

0800a174 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a180:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <TL_SYS_SendCmd+0x34>)
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2210      	movs	r2, #16
 800a188:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a18a:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <TL_SYS_SendCmd+0x34>)
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4619      	mov	r1, r3
 800a192:	2004      	movs	r0, #4
 800a194:	f000 f8ec 	bl	800a370 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a198:	f7f9 f914 	bl	80033c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20030000 	.word	0x20030000

0800a1ac <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a1b0:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	2005      	movs	r0, #5
 800a1ba:	f000 f8d9 	bl	800a370 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a1be:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a03      	ldr	r2, [pc, #12]	; (800a1d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a1c4:	68d2      	ldr	r2, [r2, #12]
 800a1c6:	6812      	ldr	r2, [r2, #0]
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3

  return;
 800a1cc:	bf00      	nop
}
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20030000 	.word	0x20030000
 800a1d4:	20000590 	.word	0x20000590

0800a1d8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a1de:	e00e      	b.n	800a1fe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a1e0:	1d3b      	adds	r3, r7, #4
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	480b      	ldr	r0, [pc, #44]	; (800a214 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a1e6:	f000 fd16 	bl	800ac16 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	2006      	movs	r0, #6
 800a1f0:	f000 f8be 	bl	800a370 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a1f4:	4b08      	ldr	r3, [pc, #32]	; (800a218 <HW_IPCC_SYS_EvtNot+0x40>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a1fe:	4805      	ldr	r0, [pc, #20]	; (800a214 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a200:	f000 fc7a 	bl	800aaf8 <LST_is_empty>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0ea      	beq.n	800a1e0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a20a:	bf00      	nop
}
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	200301dc 	.word	0x200301dc
 800a218:	20000594 	.word	0x20000594

0800a21c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a224:	4817      	ldr	r0, [pc, #92]	; (800a284 <TL_MM_Init+0x68>)
 800a226:	f000 fc57 	bl	800aad8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a22a:	4817      	ldr	r0, [pc, #92]	; (800a288 <TL_MM_Init+0x6c>)
 800a22c:	f000 fc54 	bl	800aad8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a230:	4b16      	ldr	r3, [pc, #88]	; (800a28c <TL_MM_Init+0x70>)
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	4a16      	ldr	r2, [pc, #88]	; (800a290 <TL_MM_Init+0x74>)
 800a236:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a238:	4b15      	ldr	r3, [pc, #84]	; (800a290 <TL_MM_Init+0x74>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6892      	ldr	r2, [r2, #8]
 800a240:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <TL_MM_Init+0x74>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	68d2      	ldr	r2, [r2, #12]
 800a24a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a24c:	4b10      	ldr	r3, [pc, #64]	; (800a290 <TL_MM_Init+0x74>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a0c      	ldr	r2, [pc, #48]	; (800a284 <TL_MM_Init+0x68>)
 800a252:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a254:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <TL_MM_Init+0x74>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6812      	ldr	r2, [r2, #0]
 800a25c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <TL_MM_Init+0x74>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	6852      	ldr	r2, [r2, #4]
 800a266:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a268:	4b09      	ldr	r3, [pc, #36]	; (800a290 <TL_MM_Init+0x74>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	6912      	ldr	r2, [r2, #16]
 800a270:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <TL_MM_Init+0x74>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	6952      	ldr	r2, [r2, #20]
 800a27a:	619a      	str	r2, [r3, #24]

  return;
 800a27c:	bf00      	nop
}
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	200301c4 	.word	0x200301c4
 800a288:	20000580 	.word	0x20000580
 800a28c:	20030000 	.word	0x20030000
 800a290:	20000598 	.word	0x20000598

0800a294 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4807      	ldr	r0, [pc, #28]	; (800a2bc <TL_MM_EvtDone+0x28>)
 800a2a0:	f000 fc72 	bl	800ab88 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f000 f862 	bl	800a370 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a2ac:	4804      	ldr	r0, [pc, #16]	; (800a2c0 <TL_MM_EvtDone+0x2c>)
 800a2ae:	f7f9 f8af 	bl	8003410 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a2b2:	bf00      	nop
}
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000580 	.word	0x20000580
 800a2c0:	0800a2c5 	.word	0x0800a2c5

0800a2c4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a2ca:	e00c      	b.n	800a2e6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	480a      	ldr	r0, [pc, #40]	; (800a2fc <SendFreeBuf+0x38>)
 800a2d2:	f000 fca0 	bl	800ac16 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <SendFreeBuf+0x3c>)
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fc51 	bl	800ab88 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a2e6:	4805      	ldr	r0, [pc, #20]	; (800a2fc <SendFreeBuf+0x38>)
 800a2e8:	f000 fc06 	bl	800aaf8 <LST_is_empty>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0ec      	beq.n	800a2cc <SendFreeBuf+0x8>
  }

  return;
 800a2f2:	bf00      	nop
}
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000580 	.word	0x20000580
 800a300:	20030000 	.word	0x20030000

0800a304 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a308:	4805      	ldr	r0, [pc, #20]	; (800a320 <TL_TRACES_Init+0x1c>)
 800a30a:	f000 fbe5 	bl	800aad8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a30e:	4b05      	ldr	r3, [pc, #20]	; (800a324 <TL_TRACES_Init+0x20>)
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	4a03      	ldr	r2, [pc, #12]	; (800a320 <TL_TRACES_Init+0x1c>)
 800a314:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a316:	f7f9 f8b1 	bl	800347c <HW_IPCC_TRACES_Init>

  return;
 800a31a:	bf00      	nop
}
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	200301cc 	.word	0x200301cc
 800a324:	20030000 	.word	0x20030000

0800a328 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a32e:	e008      	b.n	800a342 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a330:	1d3b      	adds	r3, r7, #4
 800a332:	4619      	mov	r1, r3
 800a334:	4808      	ldr	r0, [pc, #32]	; (800a358 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a336:	f000 fc6e 	bl	800ac16 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f80d 	bl	800a35c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a342:	4805      	ldr	r0, [pc, #20]	; (800a358 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a344:	f000 fbd8 	bl	800aaf8 <LST_is_empty>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0f0      	beq.n	800a330 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a34e:	bf00      	nop
}
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	200301cc 	.word	0x200301cc

0800a35c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	6039      	str	r1, [r7, #0]
 800a37a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a37c:	79fb      	ldrb	r3, [r7, #7]
 800a37e:	2b06      	cmp	r3, #6
 800a380:	d845      	bhi.n	800a40e <OutputDbgTrace+0x9e>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <OutputDbgTrace+0x18>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3a5 	.word	0x0800a3a5
 800a38c:	0800a3c9 	.word	0x0800a3c9
 800a390:	0800a3cf 	.word	0x0800a3cf
 800a394:	0800a3e3 	.word	0x0800a3e3
 800a398:	0800a3ef 	.word	0x0800a3ef
 800a39c:	0800a3f5 	.word	0x0800a3f5
 800a3a0:	0800a403 	.word	0x0800a403
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	7a5b      	ldrb	r3, [r3, #9]
 800a3ac:	2bff      	cmp	r3, #255	; 0xff
 800a3ae:	d005      	beq.n	800a3bc <OutputDbgTrace+0x4c>
 800a3b0:	2bff      	cmp	r3, #255	; 0xff
 800a3b2:	dc05      	bgt.n	800a3c0 <OutputDbgTrace+0x50>
 800a3b4:	2b0e      	cmp	r3, #14
 800a3b6:	d005      	beq.n	800a3c4 <OutputDbgTrace+0x54>
 800a3b8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a3ba:	e001      	b.n	800a3c0 <OutputDbgTrace+0x50>
          break;
 800a3bc:	bf00      	nop
 800a3be:	e027      	b.n	800a410 <OutputDbgTrace+0xa0>
          break;
 800a3c0:	bf00      	nop
 800a3c2:	e025      	b.n	800a410 <OutputDbgTrace+0xa0>
          break;
 800a3c4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a3c6:	e023      	b.n	800a410 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a3cc:	e020      	b.n	800a410 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	7a5b      	ldrb	r3, [r3, #9]
 800a3d6:	2b0e      	cmp	r3, #14
 800a3d8:	d001      	beq.n	800a3de <OutputDbgTrace+0x6e>
 800a3da:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a3dc:	e000      	b.n	800a3e0 <OutputDbgTrace+0x70>
          break;
 800a3de:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a3e0:	e016      	b.n	800a410 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	7a5b      	ldrb	r3, [r3, #9]
 800a3ea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a3ec:	e010      	b.n	800a410 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a3f2:	e00d      	b.n	800a410 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	7a5b      	ldrb	r3, [r3, #9]
 800a3fc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a3fe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a400:	e006      	b.n	800a410 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	7a5b      	ldrb	r3, [r3, #9]
 800a40a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a40c:	e000      	b.n	800a410 <OutputDbgTrace+0xa0>

    default:
      break;
 800a40e:	bf00      	nop
  }

  return;
 800a410:	bf00      	nop
}
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a422:	f3ef 8310 	mrs	r3, PRIMASK
 800a426:	60fb      	str	r3, [r7, #12]
  return(result);
 800a428:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a42a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a42c:	b672      	cpsid	i
}
 800a42e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a430:	1cbb      	adds	r3, r7, #2
 800a432:	4619      	mov	r1, r3
 800a434:	4812      	ldr	r0, [pc, #72]	; (800a480 <DbgTrace_TxCpltCallback+0x64>)
 800a436:	f000 fe66 	bl	800b106 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a43a:	1cbb      	adds	r3, r7, #2
 800a43c:	4619      	mov	r1, r3
 800a43e:	4810      	ldr	r0, [pc, #64]	; (800a480 <DbgTrace_TxCpltCallback+0x64>)
 800a440:	f000 ff52 	bl	800b2e8 <CircularQueue_Sense>
 800a444:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00c      	beq.n	800a466 <DbgTrace_TxCpltCallback+0x4a>
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f383 8810 	msr	PRIMASK, r3
}
 800a456:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a458:	887b      	ldrh	r3, [r7, #2]
 800a45a:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <DbgTrace_TxCpltCallback+0x68>)
 800a45c:	4619      	mov	r1, r3
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f7f6 f9d9 	bl	8000816 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a464:	e008      	b.n	800a478 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a466:	4b08      	ldr	r3, [pc, #32]	; (800a488 <DbgTrace_TxCpltCallback+0x6c>)
 800a468:	2201      	movs	r2, #1
 800a46a:	701a      	strb	r2, [r3, #0]
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f383 8810 	msr	PRIMASK, r3
}
 800a476:	bf00      	nop
}
 800a478:	bf00      	nop
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	2000059c 	.word	0x2000059c
 800a484:	0800a41d 	.word	0x0800a41d
 800a488:	20000029 	.word	0x20000029

0800a48c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a492:	f7f6 f9ba 	bl	800080a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a496:	2302      	movs	r3, #2
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	2300      	movs	r3, #0
 800a49c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a4a0:	4903      	ldr	r1, [pc, #12]	; (800a4b0 <DbgTraceInit+0x24>)
 800a4a2:	4804      	ldr	r0, [pc, #16]	; (800a4b4 <DbgTraceInit+0x28>)
 800a4a4:	f000 fbd6 	bl	800ac54 <CircularQueue_Init>
#endif 
#endif
  return;
 800a4a8:	bf00      	nop
}
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	200005bc 	.word	0x200005bc
 800a4b4:	2000059c 	.word	0x2000059c

0800a4b8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 f805 	bl	800a4d8 <DbgTraceWrite>
 800a4ce:	4603      	mov	r3, r0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	; 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ec:	61bb      	str	r3, [r7, #24]
  return(result);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a4f0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f8:	d102      	bne.n	800a500 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a4fe:	e037      	b.n	800a570 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d006      	beq.n	800a514 <DbgTraceWrite+0x3c>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d003      	beq.n	800a514 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a510:	627b      	str	r3, [r7, #36]	; 0x24
 800a512:	e02d      	b.n	800a570 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d02a      	beq.n	800a570 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a51e:	b672      	cpsid	i
}
 800a520:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	b29a      	uxth	r2, r3
 800a526:	2301      	movs	r3, #1
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	4814      	ldr	r0, [pc, #80]	; (800a57c <DbgTraceWrite+0xa4>)
 800a52c:	f000 fbc4 	bl	800acb8 <CircularQueue_Add>
 800a530:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d015      	beq.n	800a564 <DbgTraceWrite+0x8c>
 800a538:	4b11      	ldr	r3, [pc, #68]	; (800a580 <DbgTraceWrite+0xa8>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d010      	beq.n	800a564 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800a542:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <DbgTraceWrite+0xa8>)
 800a544:	2200      	movs	r2, #0
 800a546:	701a      	strb	r2, [r3, #0]
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f383 8810 	msr	PRIMASK, r3
}
 800a552:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	b29b      	uxth	r3, r3
 800a558:	4a0a      	ldr	r2, [pc, #40]	; (800a584 <DbgTraceWrite+0xac>)
 800a55a:	4619      	mov	r1, r3
 800a55c:	69f8      	ldr	r0, [r7, #28]
 800a55e:	f7f6 f95a 	bl	8000816 <DbgOutputTraces>
 800a562:	e005      	b.n	800a570 <DbgTraceWrite+0x98>
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f383 8810 	msr	PRIMASK, r3
}
 800a56e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a572:	4618      	mov	r0, r3
 800a574:	3728      	adds	r7, #40	; 0x28
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	2000059c 	.word	0x2000059c
 800a580:	20000029 	.word	0x20000029
 800a584:	0800a41d 	.word	0x0800a41d

0800a588 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a592:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <OTP_Read+0x48>)
 800a594:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a596:	e002      	b.n	800a59e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3b08      	subs	r3, #8
 800a59c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3307      	adds	r3, #7
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	79fa      	ldrb	r2, [r7, #7]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d003      	beq.n	800a5b2 <OTP_Read+0x2a>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4a09      	ldr	r2, [pc, #36]	; (800a5d4 <OTP_Read+0x4c>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d1f2      	bne.n	800a598 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3307      	adds	r3, #7
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	79fa      	ldrb	r2, [r7, #7]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d001      	beq.n	800a5c2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	1fff73f8 	.word	0x1fff73f8
 800a5d4:	1fff7000 	.word	0x1fff7000

0800a5d8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5dc:	4b05      	ldr	r3, [pc, #20]	; (800a5f4 <UTIL_LPM_Init+0x1c>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <UTIL_LPM_Init+0x20>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a5e8:	bf00      	nop
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	200015bc 	.word	0x200015bc
 800a5f8:	200015c0 	.word	0x200015c0

0800a5fc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a608:	f3ef 8310 	mrs	r3, PRIMASK
 800a60c:	613b      	str	r3, [r7, #16]
  return(result);
 800a60e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a610:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a612:	b672      	cpsid	i
}
 800a614:	bf00      	nop
  
  switch(state)
 800a616:	78fb      	ldrb	r3, [r7, #3]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <UTIL_LPM_SetOffMode+0x32>
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10e      	bne.n	800a63e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a620:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <UTIL_LPM_SetOffMode+0x5c>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4313      	orrs	r3, r2
 800a628:	4a0b      	ldr	r2, [pc, #44]	; (800a658 <UTIL_LPM_SetOffMode+0x5c>)
 800a62a:	6013      	str	r3, [r2, #0]
      break;
 800a62c:	e008      	b.n	800a640 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	43da      	mvns	r2, r3
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <UTIL_LPM_SetOffMode+0x5c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4013      	ands	r3, r2
 800a638:	4a07      	ldr	r2, [pc, #28]	; (800a658 <UTIL_LPM_SetOffMode+0x5c>)
 800a63a:	6013      	str	r3, [r2, #0]
      break;
 800a63c:	e000      	b.n	800a640 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a63e:	bf00      	nop
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f383 8810 	msr	PRIMASK, r3
}
 800a64a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a64c:	bf00      	nop
 800a64e:	371c      	adds	r7, #28
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	200015c0 	.word	0x200015c0

0800a65c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b090      	sub	sp, #64	; 0x40
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a664:	4b73      	ldr	r3, [pc, #460]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a66a:	4b72      	ldr	r3, [pc, #456]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4013      	ands	r3, r2
 800a672:	4a70      	ldr	r2, [pc, #448]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a674:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a676:	4b70      	ldr	r3, [pc, #448]	; (800a838 <UTIL_SEQ_Run+0x1dc>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a67c:	4b6f      	ldr	r3, [pc, #444]	; (800a83c <UTIL_SEQ_Run+0x1e0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a682:	4b6f      	ldr	r3, [pc, #444]	; (800a840 <UTIL_SEQ_Run+0x1e4>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a688:	4b6e      	ldr	r3, [pc, #440]	; (800a844 <UTIL_SEQ_Run+0x1e8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a68e:	e08d      	b.n	800a7ac <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a694:	e002      	b.n	800a69c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a698:	3301      	adds	r3, #1
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a69c:	4a6a      	ldr	r2, [pc, #424]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	401a      	ands	r2, r3
 800a6a8:	4b62      	ldr	r3, [pc, #392]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d0f1      	beq.n	800a696 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a6b2:	4a65      	ldr	r2, [pc, #404]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	401a      	ands	r2, r3
 800a6be:	4b5d      	ldr	r3, [pc, #372]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a6c6:	4a60      	ldr	r2, [pc, #384]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a6d8:	4a5b      	ldr	r2, [pc, #364]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	4413      	add	r3, r2
 800a6e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6e4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a6e6:	4a58      	ldr	r2, [pc, #352]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f9b3 	bl	800aa60 <SEQ_BitPosition>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	4b53      	ldr	r3, [pc, #332]	; (800a84c <UTIL_SEQ_Run+0x1f0>)
 800a700:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a702:	4a51      	ldr	r2, [pc, #324]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a706:	00db      	lsls	r3, r3, #3
 800a708:	4413      	add	r3, r2
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	4b4f      	ldr	r3, [pc, #316]	; (800a84c <UTIL_SEQ_Run+0x1f0>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2101      	movs	r1, #1
 800a712:	fa01 f303 	lsl.w	r3, r1, r3
 800a716:	43db      	mvns	r3, r3
 800a718:	401a      	ands	r2, r3
 800a71a:	494b      	ldr	r1, [pc, #300]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	440b      	add	r3, r1
 800a722:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a724:	f3ef 8310 	mrs	r3, PRIMASK
 800a728:	61bb      	str	r3, [r7, #24]
  return(result);
 800a72a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a72c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a72e:	b672      	cpsid	i
}
 800a730:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a732:	4b46      	ldr	r3, [pc, #280]	; (800a84c <UTIL_SEQ_Run+0x1f0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2201      	movs	r2, #1
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	43da      	mvns	r2, r3
 800a73e:	4b3e      	ldr	r3, [pc, #248]	; (800a838 <UTIL_SEQ_Run+0x1dc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4013      	ands	r3, r2
 800a744:	4a3c      	ldr	r2, [pc, #240]	; (800a838 <UTIL_SEQ_Run+0x1dc>)
 800a746:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a748:	2302      	movs	r3, #2
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a74c:	e013      	b.n	800a776 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a750:	3b01      	subs	r3, #1
 800a752:	4a3d      	ldr	r2, [pc, #244]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a754:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a758:	4b3c      	ldr	r3, [pc, #240]	; (800a84c <UTIL_SEQ_Run+0x1f0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2201      	movs	r2, #1
 800a75e:	fa02 f303 	lsl.w	r3, r2, r3
 800a762:	43da      	mvns	r2, r3
 800a764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a766:	3b01      	subs	r3, #1
 800a768:	400a      	ands	r2, r1
 800a76a:	4937      	ldr	r1, [pc, #220]	; (800a848 <UTIL_SEQ_Run+0x1ec>)
 800a76c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a772:	3b01      	subs	r3, #1
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e8      	bne.n	800a74e <UTIL_SEQ_Run+0xf2>
 800a77c:	6a3b      	ldr	r3, [r7, #32]
 800a77e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f383 8810 	msr	PRIMASK, r3
}
 800a786:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a788:	4b30      	ldr	r3, [pc, #192]	; (800a84c <UTIL_SEQ_Run+0x1f0>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a30      	ldr	r2, [pc, #192]	; (800a850 <UTIL_SEQ_Run+0x1f4>)
 800a78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a792:	4798      	blx	r3

    local_taskset = TaskSet;
 800a794:	4b28      	ldr	r3, [pc, #160]	; (800a838 <UTIL_SEQ_Run+0x1dc>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a79a:	4b28      	ldr	r3, [pc, #160]	; (800a83c <UTIL_SEQ_Run+0x1e0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a7a0:	4b27      	ldr	r3, [pc, #156]	; (800a840 <UTIL_SEQ_Run+0x1e4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a7a6:	4b27      	ldr	r3, [pc, #156]	; (800a844 <UTIL_SEQ_Run+0x1e8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a7ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	401a      	ands	r2, r3
 800a7b2:	4b20      	ldr	r3, [pc, #128]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d005      	beq.n	800a7c8 <UTIL_SEQ_Run+0x16c>
 800a7bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f43f af64 	beq.w	800a690 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a7c8:	4b20      	ldr	r3, [pc, #128]	; (800a84c <UTIL_SEQ_Run+0x1f0>)
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a7d0:	f000 f938 	bl	800aa44 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d8:	613b      	str	r3, [r7, #16]
  return(result);
 800a7da:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a7dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7de:	b672      	cpsid	i
}
 800a7e0:	bf00      	nop
  local_taskset = TaskSet;
 800a7e2:	4b15      	ldr	r3, [pc, #84]	; (800a838 <UTIL_SEQ_Run+0x1dc>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a7e8:	4b14      	ldr	r3, [pc, #80]	; (800a83c <UTIL_SEQ_Run+0x1e0>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a7ee:	4b14      	ldr	r3, [pc, #80]	; (800a840 <UTIL_SEQ_Run+0x1e4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	401a      	ands	r2, r3
 800a7fa:	4b0e      	ldr	r3, [pc, #56]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4013      	ands	r3, r2
 800a800:	2b00      	cmp	r3, #0
 800a802:	d107      	bne.n	800a814 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a804:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <UTIL_SEQ_Run+0x1e8>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a810:	f7f6 fbe5 	bl	8000fde <UTIL_SEQ_Idle>
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f383 8810 	msr	PRIMASK, r3
}
 800a81e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a820:	f000 f917 	bl	800aa52 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a824:	4a03      	ldr	r2, [pc, #12]	; (800a834 <UTIL_SEQ_Run+0x1d8>)
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	6013      	str	r3, [r2, #0]

  return;
 800a82a:	bf00      	nop
}
 800a82c:	3740      	adds	r7, #64	; 0x40
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000030 	.word	0x20000030
 800a838:	200015c4 	.word	0x200015c4
 800a83c:	200015c8 	.word	0x200015c8
 800a840:	2000002c 	.word	0x2000002c
 800a844:	200015cc 	.word	0x200015cc
 800a848:	20001654 	.word	0x20001654
 800a84c:	200015d0 	.word	0x200015d0
 800a850:	200015d4 	.word	0x200015d4

0800a854 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a860:	f3ef 8310 	mrs	r3, PRIMASK
 800a864:	617b      	str	r3, [r7, #20]
  return(result);
 800a866:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a86a:	b672      	cpsid	i
}
 800a86c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f8f6 	bl	800aa60 <SEQ_BitPosition>
 800a874:	4603      	mov	r3, r0
 800a876:	4619      	mov	r1, r3
 800a878:	4a06      	ldr	r2, [pc, #24]	; (800a894 <UTIL_SEQ_RegTask+0x40>)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	f383 8810 	msr	PRIMASK, r3
}
 800a88a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a88c:	bf00      	nop
}
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	200015d4 	.word	0x200015d4

0800a898 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a8a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8ac:	b672      	cpsid	i
}
 800a8ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a8b0:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <UTIL_SEQ_SetTask+0x50>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	4a0b      	ldr	r2, [pc, #44]	; (800a8e8 <UTIL_SEQ_SetTask+0x50>)
 800a8ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a8bc:	4a0b      	ldr	r2, [pc, #44]	; (800a8ec <UTIL_SEQ_SetTask+0x54>)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	4908      	ldr	r1, [pc, #32]	; (800a8ec <UTIL_SEQ_SetTask+0x54>)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	f383 8810 	msr	PRIMASK, r3
}
 800a8da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8dc:	bf00      	nop
}
 800a8de:	371c      	adds	r7, #28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	200015c4 	.word	0x200015c4
 800a8ec:	20001654 	.word	0x20001654

0800a8f0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a902:	b672      	cpsid	i
}
 800a904:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	43da      	mvns	r2, r3
 800a90a:	4b08      	ldr	r3, [pc, #32]	; (800a92c <UTIL_SEQ_PauseTask+0x3c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4013      	ands	r3, r2
 800a910:	4a06      	ldr	r2, [pc, #24]	; (800a92c <UTIL_SEQ_PauseTask+0x3c>)
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f383 8810 	msr	PRIMASK, r3
}
 800a91e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a920:	bf00      	nop
}
 800a922:	371c      	adds	r7, #28
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	2000002c 	.word	0x2000002c

0800a930 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a938:	f3ef 8310 	mrs	r3, PRIMASK
 800a93c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a93e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a940:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a942:	b672      	cpsid	i
}
 800a944:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a946:	4b09      	ldr	r3, [pc, #36]	; (800a96c <UTIL_SEQ_ResumeTask+0x3c>)
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	4a07      	ldr	r2, [pc, #28]	; (800a96c <UTIL_SEQ_ResumeTask+0x3c>)
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f383 8810 	msr	PRIMASK, r3
}
 800a95c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a95e:	bf00      	nop
}
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	2000002c 	.word	0x2000002c

0800a970 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a970:	b480      	push	{r7}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a978:	f3ef 8310 	mrs	r3, PRIMASK
 800a97c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a97e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a982:	b672      	cpsid	i
}
 800a984:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <UTIL_SEQ_SetEvt+0x3c>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	4a07      	ldr	r2, [pc, #28]	; (800a9ac <UTIL_SEQ_SetEvt+0x3c>)
 800a990:	6013      	str	r3, [r2, #0]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f383 8810 	msr	PRIMASK, r3
}
 800a99c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a99e:	bf00      	nop
}
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	200015c8 	.word	0x200015c8

0800a9b0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b088      	sub	sp, #32
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a9b8:	4b1f      	ldr	r3, [pc, #124]	; (800aa38 <UTIL_SEQ_WaitEvt+0x88>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a9be:	4b1e      	ldr	r3, [pc, #120]	; (800aa38 <UTIL_SEQ_WaitEvt+0x88>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9c6:	d102      	bne.n	800a9ce <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
 800a9cc:	e005      	b.n	800a9da <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a9ce:	4b1a      	ldr	r3, [pc, #104]	; (800aa38 <UTIL_SEQ_WaitEvt+0x88>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <UTIL_SEQ_WaitEvt+0x8c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a9e0:	4a16      	ldr	r2, [pc, #88]	; (800aa3c <UTIL_SEQ_WaitEvt+0x8c>)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a9e6:	e003      	b.n	800a9f0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	69f8      	ldr	r0, [r7, #28]
 800a9ec:	f7f6 fafe 	bl	8000fec <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a9f0:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <UTIL_SEQ_WaitEvt+0x90>)
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0f5      	beq.n	800a9e8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a9fc:	4a0e      	ldr	r2, [pc, #56]	; (800aa38 <UTIL_SEQ_WaitEvt+0x88>)
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa02:	f3ef 8310 	mrs	r3, PRIMASK
 800aa06:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa08:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa0c:	b672      	cpsid	i
}
 800aa0e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	43da      	mvns	r2, r3
 800aa14:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <UTIL_SEQ_WaitEvt+0x90>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <UTIL_SEQ_WaitEvt+0x90>)
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f383 8810 	msr	PRIMASK, r3
}
 800aa28:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800aa2a:	4a04      	ldr	r2, [pc, #16]	; (800aa3c <UTIL_SEQ_WaitEvt+0x8c>)
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	6013      	str	r3, [r2, #0]
  return;
 800aa30:	bf00      	nop
}
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	200015d0 	.word	0x200015d0
 800aa3c:	200015cc 	.word	0x200015cc
 800aa40:	200015c8 	.word	0x200015c8

0800aa44 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa48:	bf00      	nop
}
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800aa52:	b480      	push	{r7}
 800aa54:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa56:	bf00      	nop
}
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	0c1b      	lsrs	r3, r3, #16
 800aa74:	041b      	lsls	r3, r3, #16
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d104      	bne.n	800aa84 <SEQ_BitPosition+0x24>
 800aa7a:	2310      	movs	r3, #16
 800aa7c:	73fb      	strb	r3, [r7, #15]
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	041b      	lsls	r3, r3, #16
 800aa82:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d105      	bne.n	800aa9a <SEQ_BitPosition+0x3a>
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	3308      	adds	r3, #8
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	021b      	lsls	r3, r3, #8
 800aa98:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d105      	bne.n	800aab0 <SEQ_BitPosition+0x50>
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	73fb      	strb	r3, [r7, #15]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	0f1b      	lsrs	r3, r3, #28
 800aab4:	4a07      	ldr	r2, [pc, #28]	; (800aad4 <SEQ_BitPosition+0x74>)
 800aab6:	5cd2      	ldrb	r2, [r2, r3]
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	4413      	add	r3, r2
 800aabc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
 800aac0:	f1c3 031f 	rsb	r3, r3, #31
 800aac4:	b2db      	uxtb	r3, r3
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	0800d05c 	.word	0x0800d05c

0800aad8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	605a      	str	r2, [r3, #4]
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b087      	sub	sp, #28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab00:	f3ef 8310 	mrs	r3, PRIMASK
 800ab04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab0a:	b672      	cpsid	i
}
 800ab0c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d102      	bne.n	800ab1e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	75fb      	strb	r3, [r7, #23]
 800ab1c:	e001      	b.n	800ab22 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	75fb      	strb	r3, [r7, #23]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f383 8810 	msr	PRIMASK, r3
}
 800ab2c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ab2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	371c      	adds	r7, #28
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab46:	f3ef 8310 	mrs	r3, PRIMASK
 800ab4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab50:	b672      	cpsid	i
}
 800ab52:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	605a      	str	r2, [r3, #4]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f383 8810 	msr	PRIMASK, r3
}
 800ab7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab7c:	bf00      	nop
 800ab7e:	371c      	adds	r7, #28
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab92:	f3ef 8310 	mrs	r3, PRIMASK
 800ab96:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab98:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab9c:	b672      	cpsid	i
}
 800ab9e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f383 8810 	msr	PRIMASK, r3
}
 800abc6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abc8:	bf00      	nop
 800abca:	371c      	adds	r7, #28
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abdc:	f3ef 8310 	mrs	r3, PRIMASK
 800abe0:	60fb      	str	r3, [r7, #12]
  return(result);
 800abe2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abe4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abe6:	b672      	cpsid	i
}
 800abe8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6812      	ldr	r2, [r2, #0]
 800abf2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	6852      	ldr	r2, [r2, #4]
 800abfc:	605a      	str	r2, [r3, #4]
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f383 8810 	msr	PRIMASK, r3
}
 800ac08:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac0a:	bf00      	nop
 800ac0c:	371c      	adds	r7, #28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b086      	sub	sp, #24
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac20:	f3ef 8310 	mrs	r3, PRIMASK
 800ac24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac2a:	b672      	cpsid	i
}
 800ac2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff ffca 	bl	800abd4 <LST_remove_node>
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	f383 8810 	msr	PRIMASK, r3
}
 800ac4a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac4c:	bf00      	nop
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	887a      	ldrh	r2, [r7, #2]
 800ac8a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	7e3a      	ldrb	r2, [r7, #24]
 800ac90:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800ac92:	7e3b      	ldrb	r3, [r7, #24]
 800ac94:	f003 0302 	and.w	r3, r3, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d006      	beq.n	800acaa <CircularQueue_Init+0x56>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	891b      	ldrh	r3, [r3, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800aca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aca8:	e000      	b.n	800acac <CircularQueue_Init+0x58>
  }
  return 0;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08e      	sub	sp, #56	; 0x38
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	603b      	str	r3, [r7, #0]
 800acc4:	4613      	mov	r3, r2
 800acc6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800acc8:	2300      	movs	r3, #0
 800acca:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800accc:	2300      	movs	r3, #0
 800acce:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800acd0:	2300      	movs	r3, #0
 800acd2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800acd4:	2300      	movs	r3, #0
 800acd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800acd8:	2300      	movs	r3, #0
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800acdc:	2300      	movs	r3, #0
 800acde:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ace0:	2300      	movs	r3, #0
 800ace2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	891b      	ldrh	r3, [r3, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <CircularQueue_Add+0x38>
 800acec:	2302      	movs	r3, #2
 800acee:	e000      	b.n	800acf2 <CircularQueue_Add+0x3a>
 800acf0:	2300      	movs	r3, #0
 800acf2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d02a      	beq.n	800ad52 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	891b      	ldrh	r3, [r3, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d123      	bne.n	800ad4c <CircularQueue_Add+0x94>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6819      	ldr	r1, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	1c58      	adds	r0, r3, #1
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	4298      	cmp	r0, r3
 800ad22:	d306      	bcc.n	800ad32 <CircularQueue_Add+0x7a>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6918      	ldr	r0, [r3, #16]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	1ac3      	subs	r3, r0, r3
 800ad2e:	3301      	adds	r3, #1
 800ad30:	e002      	b.n	800ad38 <CircularQueue_Add+0x80>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	3301      	adds	r3, #1
 800ad38:	440b      	add	r3, r1
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	021b      	lsls	r3, r3, #8
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	4413      	add	r3, r2
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	3302      	adds	r3, #2
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	e001      	b.n	800ad50 <CircularQueue_Add+0x98>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	891b      	ldrh	r3, [r3, #8]
 800ad50:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	891b      	ldrh	r3, [r3, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	891b      	ldrh	r3, [r3, #8]
 800ad5e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	691a      	ldr	r2, [r3, #16]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d307      	bcc.n	800ad7c <CircularQueue_Add+0xc4>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6919      	ldr	r1, [r3, #16]
 800ad74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad76:	440b      	add	r3, r1
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	e000      	b.n	800ad7e <CircularQueue_Add+0xc6>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800ad80:	88fa      	ldrh	r2, [r7, #6]
 800ad82:	7ffb      	ldrb	r3, [r7, #31]
 800ad84:	4413      	add	r3, r2
 800ad86:	461a      	mov	r2, r3
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	fb02 f303 	mul.w	r3, r2, r3
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d80b      	bhi.n	800adac <CircularQueue_Add+0xf4>
 800ad94:	88fa      	ldrh	r2, [r7, #6]
 800ad96:	7ffb      	ldrb	r3, [r7, #31]
 800ad98:	4413      	add	r3, r2
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ada2:	fb01 f202 	mul.w	r2, r1, r2
 800ada6:	1a9b      	subs	r3, r3, r2
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	e000      	b.n	800adae <CircularQueue_Add+0xf6>
 800adac:	2300      	movs	r3, #0
 800adae:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800adb0:	7dfa      	ldrb	r2, [r7, #23]
 800adb2:	7ffb      	ldrb	r3, [r7, #31]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	bf8c      	ite	hi
 800adb8:	2301      	movhi	r3, #1
 800adba:	2300      	movls	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800adc0:	7fbb      	ldrb	r3, [r7, #30]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d008      	beq.n	800add8 <CircularQueue_Add+0x120>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	7f1b      	ldrb	r3, [r3, #28]
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <CircularQueue_Add+0x120>
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	b29b      	uxth	r3, r3
 800add6:	e000      	b.n	800adda <CircularQueue_Add+0x122>
 800add8:	8bbb      	ldrh	r3, [r7, #28]
 800adda:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800addc:	7fbb      	ldrb	r3, [r7, #30]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d008      	beq.n	800adf4 <CircularQueue_Add+0x13c>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	7f1b      	ldrb	r3, [r3, #28]
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <CircularQueue_Add+0x13c>
 800adee:	7ffb      	ldrb	r3, [r7, #31]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	e000      	b.n	800adf6 <CircularQueue_Add+0x13e>
 800adf4:	8bbb      	ldrh	r3, [r7, #28]
 800adf6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800adf8:	88fb      	ldrh	r3, [r7, #6]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 817e 	beq.w	800b0fc <CircularQueue_Add+0x444>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	695a      	ldr	r2, [r3, #20]
 800ae04:	88f9      	ldrh	r1, [r7, #6]
 800ae06:	7ffb      	ldrb	r3, [r7, #31]
 800ae08:	440b      	add	r3, r1
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	fb01 f303 	mul.w	r3, r1, r3
 800ae12:	441a      	add	r2, r3
 800ae14:	8bbb      	ldrh	r3, [r7, #28]
 800ae16:	441a      	add	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	f200 816d 	bhi.w	800b0fc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ae22:	2300      	movs	r3, #0
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae26:	e14a      	b.n	800b0be <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	691a      	ldr	r2, [r3, #16]
 800ae2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae2e:	441a      	add	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d307      	bcc.n	800ae48 <CircularQueue_Add+0x190>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	691a      	ldr	r2, [r3, #16]
 800ae3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae3e:	441a      	add	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	e003      	b.n	800ae50 <CircularQueue_Add+0x198>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae4e:	4413      	add	r3, r2
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	891b      	ldrh	r3, [r3, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d130      	bne.n	800aec4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	1c59      	adds	r1, r3, #1
 800ae6a:	6339      	str	r1, [r7, #48]	; 0x30
 800ae6c:	4413      	add	r3, r2
 800ae6e:	88fa      	ldrh	r2, [r7, #6]
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d304      	bcc.n	800ae88 <CircularQueue_Add+0x1d0>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	e000      	b.n	800ae8a <CircularQueue_Add+0x1d2>
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800ae8c:	88fb      	ldrh	r3, [r7, #6]
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	b298      	uxth	r0, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	1c59      	adds	r1, r3, #1
 800ae9a:	6339      	str	r1, [r7, #48]	; 0x30
 800ae9c:	4413      	add	r3, r2
 800ae9e:	b2c2      	uxtb	r2, r0
 800aea0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d304      	bcc.n	800aeb6 <CircularQueue_Add+0x1fe>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	e000      	b.n	800aeb8 <CircularQueue_Add+0x200>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	1c9a      	adds	r2, r3, #2
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800aec4:	88fa      	ldrh	r2, [r7, #6]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6859      	ldr	r1, [r3, #4]
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	1acb      	subs	r3, r1, r3
 800aece:	4293      	cmp	r3, r2
 800aed0:	bf28      	it	cs
 800aed2:	4613      	movcs	r3, r2
 800aed4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800aed6:	88fb      	ldrh	r3, [r7, #6]
 800aed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d007      	beq.n	800aeee <CircularQueue_Add+0x236>
 800aede:	88fb      	ldrh	r3, [r7, #6]
 800aee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d225      	bcs.n	800af32 <CircularQueue_Add+0x27a>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	7f1b      	ldrb	r3, [r3, #28]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d121      	bne.n	800af32 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	18d0      	adds	r0, r2, r3
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aefa:	fb02 f303 	mul.w	r3, r2, r3
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	4413      	add	r3, r2
 800af02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af04:	4619      	mov	r1, r3
 800af06:	f000 fad1 	bl	800b4ac <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	695a      	ldr	r2, [r3, #20]
 800af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af10:	441a      	add	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800af16:	2300      	movs	r3, #0
 800af18:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800af1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800af1e:	88fa      	ldrh	r2, [r7, #6]
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800af26:	7ffb      	ldrb	r3, [r7, #31]
 800af28:	b29a      	uxth	r2, r3
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	4413      	add	r3, r2
 800af2e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800af30:	e0a4      	b.n	800b07c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800af32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 80a1 	beq.w	800b07c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	7f1b      	ldrb	r3, [r3, #28]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d03a      	beq.n	800afbc <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	891b      	ldrh	r3, [r3, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10d      	bne.n	800af6a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	3b02      	subs	r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	22ff      	movs	r2, #255	; 0xff
 800af5a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	3b01      	subs	r3, #1
 800af64:	4413      	add	r3, r2
 800af66:	22ff      	movs	r2, #255	; 0xff
 800af68:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	695a      	ldr	r2, [r3, #20]
 800af6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af70:	441a      	add	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800af76:	2300      	movs	r3, #0
 800af78:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800af7e:	2300      	movs	r3, #0
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	891b      	ldrh	r3, [r3, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d16f      	bne.n	800b06a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	1c59      	adds	r1, r3, #1
 800af92:	6339      	str	r1, [r7, #48]	; 0x30
 800af94:	4413      	add	r3, r2
 800af96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af98:	b2d2      	uxtb	r2, r2
 800af9a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	0a18      	lsrs	r0, r3, #8
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	1c59      	adds	r1, r3, #1
 800afa8:	6339      	str	r1, [r7, #48]	; 0x30
 800afaa:	4413      	add	r3, r2
 800afac:	b2c2      	uxtb	r2, r0
 800afae:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	1c9a      	adds	r2, r3, #2
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	615a      	str	r2, [r3, #20]
 800afba:	e056      	b.n	800b06a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	7f1b      	ldrb	r3, [r3, #28]
 800afc0:	f003 0302 	and.w	r3, r3, #2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d050      	beq.n	800b06a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	891b      	ldrh	r3, [r3, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d14a      	bne.n	800b066 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	3b02      	subs	r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afdc:	b2d2      	uxtb	r2, r2
 800afde:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	0a19      	lsrs	r1, r3, #8
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	3b01      	subs	r3, #1
 800afec:	4413      	add	r3, r2
 800afee:	b2ca      	uxtb	r2, r1
 800aff0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	18d0      	adds	r0, r2, r3
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800affe:	fb02 f303 	mul.w	r3, r2, r3
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	4413      	add	r3, r2
 800b006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b008:	4619      	mov	r1, r3
 800b00a:	f000 fa4f 	bl	800b4ac <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	695a      	ldr	r2, [r3, #20]
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	441a      	add	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b01e:	88fa      	ldrh	r2, [r7, #6]
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b030:	2300      	movs	r3, #0
 800b032:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	1c59      	adds	r1, r3, #1
 800b03c:	6339      	str	r1, [r7, #48]	; 0x30
 800b03e:	4413      	add	r3, r2
 800b040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	0a18      	lsrs	r0, r3, #8
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	1c59      	adds	r1, r3, #1
 800b052:	6339      	str	r1, [r7, #48]	; 0x30
 800b054:	4413      	add	r3, r2
 800b056:	b2c2      	uxtb	r2, r0
 800b058:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	1c9a      	adds	r2, r3, #2
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	615a      	str	r2, [r3, #20]
 800b064:	e001      	b.n	800b06a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	e049      	b.n	800b0fe <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b06a:	7ffb      	ldrb	r3, [r7, #31]
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	b29b      	uxth	r3, r3
 800b072:	4413      	add	r3, r2
 800b074:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d015      	beq.n	800b0ae <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	18d0      	adds	r0, r2, r3
 800b08a:	88fb      	ldrh	r3, [r7, #6]
 800b08c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b08e:	fb03 f202 	mul.w	r2, r3, r2
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	4413      	add	r3, r2
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	4413      	add	r3, r2
 800b09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b09c:	4619      	mov	r1, r3
 800b09e:	f000 fa05 	bl	800b4ac <memcpy>
        q->byteCount += NbBytesToCopy;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	695a      	ldr	r2, [r3, #20]
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	441a      	add	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	f4ff aeb0 	bcc.w	800ae28 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6919      	ldr	r1, [r3, #16]
 800b0d0:	7ffb      	ldrb	r3, [r7, #31]
 800b0d2:	4419      	add	r1, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	4299      	cmp	r1, r3
 800b0da:	d307      	bcc.n	800b0ec <CircularQueue_Add+0x434>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6919      	ldr	r1, [r3, #16]
 800b0e0:	7ffb      	ldrb	r3, [r7, #31]
 800b0e2:	4419      	add	r1, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	1acb      	subs	r3, r1, r3
 800b0ea:	e003      	b.n	800b0f4 <CircularQueue_Add+0x43c>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6919      	ldr	r1, [r3, #16]
 800b0f0:	7ffb      	ldrb	r3, [r7, #31]
 800b0f2:	440b      	add	r3, r1
 800b0f4:	4413      	add	r3, r2
 800b0f6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	e000      	b.n	800b0fe <CircularQueue_Add+0x446>
    return NULL;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3738      	adds	r7, #56	; 0x38
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	891b      	ldrh	r3, [r3, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <CircularQueue_Remove+0x1e>
 800b120:	2302      	movs	r3, #2
 800b122:	e000      	b.n	800b126 <CircularQueue_Remove+0x20>
 800b124:	2300      	movs	r3, #0
 800b126:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 80cc 	beq.w	800b2ce <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	891b      	ldrh	r3, [r3, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d121      	bne.n	800b182 <CircularQueue_Remove+0x7c>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	4413      	add	r3, r2
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6819      	ldr	r1, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	1c58      	adds	r0, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	4298      	cmp	r0, r3
 800b15c:	d306      	bcc.n	800b16c <CircularQueue_Remove+0x66>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68d8      	ldr	r0, [r3, #12]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	1ac3      	subs	r3, r0, r3
 800b168:	3301      	adds	r3, #1
 800b16a:	e002      	b.n	800b172 <CircularQueue_Remove+0x6c>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	3301      	adds	r3, #1
 800b172:	440b      	add	r3, r1
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	b29b      	uxth	r3, r3
 800b178:	021b      	lsls	r3, r3, #8
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	b29b      	uxth	r3, r3
 800b180:	e001      	b.n	800b186 <CircularQueue_Remove+0x80>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	891b      	ldrh	r3, [r3, #8]
 800b186:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	7f1b      	ldrb	r3, [r3, #28]
 800b18c:	f003 0301 	and.w	r3, r3, #1
 800b190:	2b00      	cmp	r3, #0
 800b192:	d057      	beq.n	800b244 <CircularQueue_Remove+0x13e>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7f1b      	ldrb	r3, [r3, #28]
 800b198:	f003 0302 	and.w	r3, r3, #2
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d151      	bne.n	800b244 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b1a0:	897b      	ldrh	r3, [r7, #10]
 800b1a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d103      	bne.n	800b1b2 <CircularQueue_Remove+0xac>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	891b      	ldrh	r3, [r3, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d012      	beq.n	800b1d8 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d942      	bls.n	800b244 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	891b      	ldrh	r3, [r3, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d03e      	beq.n	800b244 <CircularQueue_Remove+0x13e>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	8912      	ldrh	r2, [r2, #8]
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d235      	bcs.n	800b244 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	695a      	ldr	r2, [r3, #20]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68d9      	ldr	r1, [r3, #12]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	1acb      	subs	r3, r1, r3
 800b1e6:	441a      	add	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	891b      	ldrh	r3, [r3, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d121      	bne.n	800b23e <CircularQueue_Remove+0x138>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	4413      	add	r3, r2
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6819      	ldr	r1, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	1c58      	adds	r0, r3, #1
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	4298      	cmp	r0, r3
 800b218:	d306      	bcc.n	800b228 <CircularQueue_Remove+0x122>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68d8      	ldr	r0, [r3, #12]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	1ac3      	subs	r3, r0, r3
 800b224:	3301      	adds	r3, #1
 800b226:	e002      	b.n	800b22e <CircularQueue_Remove+0x128>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	3301      	adds	r3, #1
 800b22e:	440b      	add	r3, r1
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b29b      	uxth	r3, r3
 800b234:	021b      	lsls	r3, r3, #8
 800b236:	b29b      	uxth	r3, r3
 800b238:	4413      	add	r3, r2
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	e001      	b.n	800b242 <CircularQueue_Remove+0x13c>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	891b      	ldrh	r3, [r3, #8]
 800b242:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68d9      	ldr	r1, [r3, #12]
 800b24c:	7a7b      	ldrb	r3, [r7, #9]
 800b24e:	4419      	add	r1, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	4299      	cmp	r1, r3
 800b256:	d307      	bcc.n	800b268 <CircularQueue_Remove+0x162>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68d9      	ldr	r1, [r3, #12]
 800b25c:	7a7b      	ldrb	r3, [r7, #9]
 800b25e:	4419      	add	r1, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	1acb      	subs	r3, r1, r3
 800b266:	e003      	b.n	800b270 <CircularQueue_Remove+0x16a>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68d9      	ldr	r1, [r3, #12]
 800b26c:	7a7b      	ldrb	r3, [r7, #9]
 800b26e:	440b      	add	r3, r1
 800b270:	4413      	add	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	8979      	ldrh	r1, [r7, #10]
 800b27a:	7a7a      	ldrb	r2, [r7, #9]
 800b27c:	440a      	add	r2, r1
 800b27e:	1a9a      	subs	r2, r3, r2
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d01b      	beq.n	800b2c4 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68da      	ldr	r2, [r3, #12]
 800b290:	897b      	ldrh	r3, [r7, #10]
 800b292:	441a      	add	r2, r3
 800b294:	7a7b      	ldrb	r3, [r7, #9]
 800b296:	441a      	add	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d309      	bcc.n	800b2b4 <CircularQueue_Remove+0x1ae>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	897b      	ldrh	r3, [r7, #10]
 800b2a6:	441a      	add	r2, r3
 800b2a8:	7a7b      	ldrb	r3, [r7, #9]
 800b2aa:	441a      	add	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	e005      	b.n	800b2c0 <CircularQueue_Remove+0x1ba>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68da      	ldr	r2, [r3, #12]
 800b2b8:	897b      	ldrh	r3, [r7, #10]
 800b2ba:	441a      	add	r2, r3
 800b2bc:	7a7b      	ldrb	r3, [r7, #9]
 800b2be:	4413      	add	r3, r2
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	1e5a      	subs	r2, r3, #1
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	897a      	ldrh	r2, [r7, #10]
 800b2d8:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b2da:	68fb      	ldr	r3, [r7, #12]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	891b      	ldrh	r3, [r3, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <CircularQueue_Sense+0x1e>
 800b302:	2302      	movs	r3, #2
 800b304:	e000      	b.n	800b308 <CircularQueue_Sense+0x20>
 800b306:	2300      	movs	r3, #0
 800b308:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 8090 	beq.w	800b43c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	891b      	ldrh	r3, [r3, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d121      	bne.n	800b36e <CircularQueue_Sense+0x86>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4413      	add	r3, r2
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	b29a      	uxth	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6819      	ldr	r1, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	1c58      	adds	r0, r3, #1
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	4298      	cmp	r0, r3
 800b348:	d306      	bcc.n	800b358 <CircularQueue_Sense+0x70>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68d8      	ldr	r0, [r3, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	1ac3      	subs	r3, r0, r3
 800b354:	3301      	adds	r3, #1
 800b356:	e002      	b.n	800b35e <CircularQueue_Sense+0x76>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	3301      	adds	r3, #1
 800b35e:	440b      	add	r3, r1
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	b29b      	uxth	r3, r3
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	b29b      	uxth	r3, r3
 800b368:	4413      	add	r3, r2
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	e001      	b.n	800b372 <CircularQueue_Sense+0x8a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	891b      	ldrh	r3, [r3, #8]
 800b372:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	7f1b      	ldrb	r3, [r3, #28]
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d048      	beq.n	800b412 <CircularQueue_Sense+0x12a>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	7f1b      	ldrb	r3, [r3, #28]
 800b384:	f003 0302 	and.w	r3, r3, #2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d142      	bne.n	800b412 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b38c:	8a7b      	ldrh	r3, [r7, #18]
 800b38e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b392:	4293      	cmp	r3, r2
 800b394:	d103      	bne.n	800b39e <CircularQueue_Sense+0xb6>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	891b      	ldrh	r3, [r3, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d012      	beq.n	800b3c4 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d933      	bls.n	800b412 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	891b      	ldrh	r3, [r3, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d02f      	beq.n	800b412 <CircularQueue_Sense+0x12a>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	8912      	ldrh	r2, [r2, #8]
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d226      	bcs.n	800b412 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	891b      	ldrh	r3, [r3, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d11d      	bne.n	800b40c <CircularQueue_Sense+0x124>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6819      	ldr	r1, [r3, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	1c58      	adds	r0, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	4298      	cmp	r0, r3
 800b3ea:	d305      	bcc.n	800b3f8 <CircularQueue_Sense+0x110>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	1ac3      	subs	r3, r0, r3
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	e001      	b.n	800b3fc <CircularQueue_Sense+0x114>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	440b      	add	r3, r1
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	b29b      	uxth	r3, r3
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	b29b      	uxth	r3, r3
 800b406:	4413      	add	r3, r2
 800b408:	b29b      	uxth	r3, r3
 800b40a:	e001      	b.n	800b410 <CircularQueue_Sense+0x128>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	891b      	ldrh	r3, [r3, #8]
 800b410:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	7af9      	ldrb	r1, [r7, #11]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4419      	add	r1, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	4299      	cmp	r1, r3
 800b422:	d306      	bcc.n	800b432 <CircularQueue_Sense+0x14a>
 800b424:	7af9      	ldrb	r1, [r7, #11]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	4419      	add	r1, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	1acb      	subs	r3, r1, r3
 800b430:	e002      	b.n	800b438 <CircularQueue_Sense+0x150>
 800b432:	7af9      	ldrb	r1, [r7, #11]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	440b      	add	r3, r1
 800b438:	4413      	add	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	8a7a      	ldrh	r2, [r7, #18]
 800b446:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b448:	697b      	ldr	r3, [r7, #20]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <__errno>:
 800b458:	4b01      	ldr	r3, [pc, #4]	; (800b460 <__errno+0x8>)
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20000034 	.word	0x20000034

0800b464 <__libc_init_array>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	4d0d      	ldr	r5, [pc, #52]	; (800b49c <__libc_init_array+0x38>)
 800b468:	4c0d      	ldr	r4, [pc, #52]	; (800b4a0 <__libc_init_array+0x3c>)
 800b46a:	1b64      	subs	r4, r4, r5
 800b46c:	10a4      	asrs	r4, r4, #2
 800b46e:	2600      	movs	r6, #0
 800b470:	42a6      	cmp	r6, r4
 800b472:	d109      	bne.n	800b488 <__libc_init_array+0x24>
 800b474:	4d0b      	ldr	r5, [pc, #44]	; (800b4a4 <__libc_init_array+0x40>)
 800b476:	4c0c      	ldr	r4, [pc, #48]	; (800b4a8 <__libc_init_array+0x44>)
 800b478:	f001 f832 	bl	800c4e0 <_init>
 800b47c:	1b64      	subs	r4, r4, r5
 800b47e:	10a4      	asrs	r4, r4, #2
 800b480:	2600      	movs	r6, #0
 800b482:	42a6      	cmp	r6, r4
 800b484:	d105      	bne.n	800b492 <__libc_init_array+0x2e>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	f855 3b04 	ldr.w	r3, [r5], #4
 800b48c:	4798      	blx	r3
 800b48e:	3601      	adds	r6, #1
 800b490:	e7ee      	b.n	800b470 <__libc_init_array+0xc>
 800b492:	f855 3b04 	ldr.w	r3, [r5], #4
 800b496:	4798      	blx	r3
 800b498:	3601      	adds	r6, #1
 800b49a:	e7f2      	b.n	800b482 <__libc_init_array+0x1e>
 800b49c:	0800d10c 	.word	0x0800d10c
 800b4a0:	0800d10c 	.word	0x0800d10c
 800b4a4:	0800d10c 	.word	0x0800d10c
 800b4a8:	0800d110 	.word	0x0800d110

0800b4ac <memcpy>:
 800b4ac:	440a      	add	r2, r1
 800b4ae:	4291      	cmp	r1, r2
 800b4b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b4b4:	d100      	bne.n	800b4b8 <memcpy+0xc>
 800b4b6:	4770      	bx	lr
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c2:	4291      	cmp	r1, r2
 800b4c4:	d1f9      	bne.n	800b4ba <memcpy+0xe>
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <memset>:
 800b4c8:	4402      	add	r2, r0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d100      	bne.n	800b4d2 <memset+0xa>
 800b4d0:	4770      	bx	lr
 800b4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4d6:	e7f9      	b.n	800b4cc <memset+0x4>

0800b4d8 <iprintf>:
 800b4d8:	b40f      	push	{r0, r1, r2, r3}
 800b4da:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <iprintf+0x2c>)
 800b4dc:	b513      	push	{r0, r1, r4, lr}
 800b4de:	681c      	ldr	r4, [r3, #0]
 800b4e0:	b124      	cbz	r4, 800b4ec <iprintf+0x14>
 800b4e2:	69a3      	ldr	r3, [r4, #24]
 800b4e4:	b913      	cbnz	r3, 800b4ec <iprintf+0x14>
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f000 fa5e 	bl	800b9a8 <__sinit>
 800b4ec:	ab05      	add	r3, sp, #20
 800b4ee:	9a04      	ldr	r2, [sp, #16]
 800b4f0:	68a1      	ldr	r1, [r4, #8]
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fc67 	bl	800bdc8 <_vfiprintf_r>
 800b4fa:	b002      	add	sp, #8
 800b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b500:	b004      	add	sp, #16
 800b502:	4770      	bx	lr
 800b504:	20000034 	.word	0x20000034

0800b508 <_puts_r>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	460e      	mov	r6, r1
 800b50c:	4605      	mov	r5, r0
 800b50e:	b118      	cbz	r0, 800b518 <_puts_r+0x10>
 800b510:	6983      	ldr	r3, [r0, #24]
 800b512:	b90b      	cbnz	r3, 800b518 <_puts_r+0x10>
 800b514:	f000 fa48 	bl	800b9a8 <__sinit>
 800b518:	69ab      	ldr	r3, [r5, #24]
 800b51a:	68ac      	ldr	r4, [r5, #8]
 800b51c:	b913      	cbnz	r3, 800b524 <_puts_r+0x1c>
 800b51e:	4628      	mov	r0, r5
 800b520:	f000 fa42 	bl	800b9a8 <__sinit>
 800b524:	4b2c      	ldr	r3, [pc, #176]	; (800b5d8 <_puts_r+0xd0>)
 800b526:	429c      	cmp	r4, r3
 800b528:	d120      	bne.n	800b56c <_puts_r+0x64>
 800b52a:	686c      	ldr	r4, [r5, #4]
 800b52c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b52e:	07db      	lsls	r3, r3, #31
 800b530:	d405      	bmi.n	800b53e <_puts_r+0x36>
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	0598      	lsls	r0, r3, #22
 800b536:	d402      	bmi.n	800b53e <_puts_r+0x36>
 800b538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b53a:	f000 fad3 	bl	800bae4 <__retarget_lock_acquire_recursive>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	0719      	lsls	r1, r3, #28
 800b542:	d51d      	bpl.n	800b580 <_puts_r+0x78>
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	b1db      	cbz	r3, 800b580 <_puts_r+0x78>
 800b548:	3e01      	subs	r6, #1
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b550:	3b01      	subs	r3, #1
 800b552:	60a3      	str	r3, [r4, #8]
 800b554:	bb39      	cbnz	r1, 800b5a6 <_puts_r+0x9e>
 800b556:	2b00      	cmp	r3, #0
 800b558:	da38      	bge.n	800b5cc <_puts_r+0xc4>
 800b55a:	4622      	mov	r2, r4
 800b55c:	210a      	movs	r1, #10
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 f848 	bl	800b5f4 <__swbuf_r>
 800b564:	3001      	adds	r0, #1
 800b566:	d011      	beq.n	800b58c <_puts_r+0x84>
 800b568:	250a      	movs	r5, #10
 800b56a:	e011      	b.n	800b590 <_puts_r+0x88>
 800b56c:	4b1b      	ldr	r3, [pc, #108]	; (800b5dc <_puts_r+0xd4>)
 800b56e:	429c      	cmp	r4, r3
 800b570:	d101      	bne.n	800b576 <_puts_r+0x6e>
 800b572:	68ac      	ldr	r4, [r5, #8]
 800b574:	e7da      	b.n	800b52c <_puts_r+0x24>
 800b576:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <_puts_r+0xd8>)
 800b578:	429c      	cmp	r4, r3
 800b57a:	bf08      	it	eq
 800b57c:	68ec      	ldreq	r4, [r5, #12]
 800b57e:	e7d5      	b.n	800b52c <_puts_r+0x24>
 800b580:	4621      	mov	r1, r4
 800b582:	4628      	mov	r0, r5
 800b584:	f000 f888 	bl	800b698 <__swsetup_r>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d0dd      	beq.n	800b548 <_puts_r+0x40>
 800b58c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b592:	07da      	lsls	r2, r3, #31
 800b594:	d405      	bmi.n	800b5a2 <_puts_r+0x9a>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	059b      	lsls	r3, r3, #22
 800b59a:	d402      	bmi.n	800b5a2 <_puts_r+0x9a>
 800b59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b59e:	f000 faa2 	bl	800bae6 <__retarget_lock_release_recursive>
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	da04      	bge.n	800b5b4 <_puts_r+0xac>
 800b5aa:	69a2      	ldr	r2, [r4, #24]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	dc06      	bgt.n	800b5be <_puts_r+0xb6>
 800b5b0:	290a      	cmp	r1, #10
 800b5b2:	d004      	beq.n	800b5be <_puts_r+0xb6>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	6022      	str	r2, [r4, #0]
 800b5ba:	7019      	strb	r1, [r3, #0]
 800b5bc:	e7c5      	b.n	800b54a <_puts_r+0x42>
 800b5be:	4622      	mov	r2, r4
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f000 f817 	bl	800b5f4 <__swbuf_r>
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	d1bf      	bne.n	800b54a <_puts_r+0x42>
 800b5ca:	e7df      	b.n	800b58c <_puts_r+0x84>
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	250a      	movs	r5, #10
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	6022      	str	r2, [r4, #0]
 800b5d4:	701d      	strb	r5, [r3, #0]
 800b5d6:	e7db      	b.n	800b590 <_puts_r+0x88>
 800b5d8:	0800d090 	.word	0x0800d090
 800b5dc:	0800d0b0 	.word	0x0800d0b0
 800b5e0:	0800d070 	.word	0x0800d070

0800b5e4 <puts>:
 800b5e4:	4b02      	ldr	r3, [pc, #8]	; (800b5f0 <puts+0xc>)
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	f7ff bf8d 	b.w	800b508 <_puts_r>
 800b5ee:	bf00      	nop
 800b5f0:	20000034 	.word	0x20000034

0800b5f4 <__swbuf_r>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	460e      	mov	r6, r1
 800b5f8:	4614      	mov	r4, r2
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	b118      	cbz	r0, 800b606 <__swbuf_r+0x12>
 800b5fe:	6983      	ldr	r3, [r0, #24]
 800b600:	b90b      	cbnz	r3, 800b606 <__swbuf_r+0x12>
 800b602:	f000 f9d1 	bl	800b9a8 <__sinit>
 800b606:	4b21      	ldr	r3, [pc, #132]	; (800b68c <__swbuf_r+0x98>)
 800b608:	429c      	cmp	r4, r3
 800b60a:	d12b      	bne.n	800b664 <__swbuf_r+0x70>
 800b60c:	686c      	ldr	r4, [r5, #4]
 800b60e:	69a3      	ldr	r3, [r4, #24]
 800b610:	60a3      	str	r3, [r4, #8]
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	071a      	lsls	r2, r3, #28
 800b616:	d52f      	bpl.n	800b678 <__swbuf_r+0x84>
 800b618:	6923      	ldr	r3, [r4, #16]
 800b61a:	b36b      	cbz	r3, 800b678 <__swbuf_r+0x84>
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	6820      	ldr	r0, [r4, #0]
 800b620:	1ac0      	subs	r0, r0, r3
 800b622:	6963      	ldr	r3, [r4, #20]
 800b624:	b2f6      	uxtb	r6, r6
 800b626:	4283      	cmp	r3, r0
 800b628:	4637      	mov	r7, r6
 800b62a:	dc04      	bgt.n	800b636 <__swbuf_r+0x42>
 800b62c:	4621      	mov	r1, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 f926 	bl	800b880 <_fflush_r>
 800b634:	bb30      	cbnz	r0, 800b684 <__swbuf_r+0x90>
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	3b01      	subs	r3, #1
 800b63a:	60a3      	str	r3, [r4, #8]
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	6022      	str	r2, [r4, #0]
 800b642:	701e      	strb	r6, [r3, #0]
 800b644:	6963      	ldr	r3, [r4, #20]
 800b646:	3001      	adds	r0, #1
 800b648:	4283      	cmp	r3, r0
 800b64a:	d004      	beq.n	800b656 <__swbuf_r+0x62>
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	07db      	lsls	r3, r3, #31
 800b650:	d506      	bpl.n	800b660 <__swbuf_r+0x6c>
 800b652:	2e0a      	cmp	r6, #10
 800b654:	d104      	bne.n	800b660 <__swbuf_r+0x6c>
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 f911 	bl	800b880 <_fflush_r>
 800b65e:	b988      	cbnz	r0, 800b684 <__swbuf_r+0x90>
 800b660:	4638      	mov	r0, r7
 800b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <__swbuf_r+0x9c>)
 800b666:	429c      	cmp	r4, r3
 800b668:	d101      	bne.n	800b66e <__swbuf_r+0x7a>
 800b66a:	68ac      	ldr	r4, [r5, #8]
 800b66c:	e7cf      	b.n	800b60e <__swbuf_r+0x1a>
 800b66e:	4b09      	ldr	r3, [pc, #36]	; (800b694 <__swbuf_r+0xa0>)
 800b670:	429c      	cmp	r4, r3
 800b672:	bf08      	it	eq
 800b674:	68ec      	ldreq	r4, [r5, #12]
 800b676:	e7ca      	b.n	800b60e <__swbuf_r+0x1a>
 800b678:	4621      	mov	r1, r4
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 f80c 	bl	800b698 <__swsetup_r>
 800b680:	2800      	cmp	r0, #0
 800b682:	d0cb      	beq.n	800b61c <__swbuf_r+0x28>
 800b684:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b688:	e7ea      	b.n	800b660 <__swbuf_r+0x6c>
 800b68a:	bf00      	nop
 800b68c:	0800d090 	.word	0x0800d090
 800b690:	0800d0b0 	.word	0x0800d0b0
 800b694:	0800d070 	.word	0x0800d070

0800b698 <__swsetup_r>:
 800b698:	4b32      	ldr	r3, [pc, #200]	; (800b764 <__swsetup_r+0xcc>)
 800b69a:	b570      	push	{r4, r5, r6, lr}
 800b69c:	681d      	ldr	r5, [r3, #0]
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	b125      	cbz	r5, 800b6ae <__swsetup_r+0x16>
 800b6a4:	69ab      	ldr	r3, [r5, #24]
 800b6a6:	b913      	cbnz	r3, 800b6ae <__swsetup_r+0x16>
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 f97d 	bl	800b9a8 <__sinit>
 800b6ae:	4b2e      	ldr	r3, [pc, #184]	; (800b768 <__swsetup_r+0xd0>)
 800b6b0:	429c      	cmp	r4, r3
 800b6b2:	d10f      	bne.n	800b6d4 <__swsetup_r+0x3c>
 800b6b4:	686c      	ldr	r4, [r5, #4]
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6bc:	0719      	lsls	r1, r3, #28
 800b6be:	d42c      	bmi.n	800b71a <__swsetup_r+0x82>
 800b6c0:	06dd      	lsls	r5, r3, #27
 800b6c2:	d411      	bmi.n	800b6e8 <__swsetup_r+0x50>
 800b6c4:	2309      	movs	r3, #9
 800b6c6:	6033      	str	r3, [r6, #0]
 800b6c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6d2:	e03e      	b.n	800b752 <__swsetup_r+0xba>
 800b6d4:	4b25      	ldr	r3, [pc, #148]	; (800b76c <__swsetup_r+0xd4>)
 800b6d6:	429c      	cmp	r4, r3
 800b6d8:	d101      	bne.n	800b6de <__swsetup_r+0x46>
 800b6da:	68ac      	ldr	r4, [r5, #8]
 800b6dc:	e7eb      	b.n	800b6b6 <__swsetup_r+0x1e>
 800b6de:	4b24      	ldr	r3, [pc, #144]	; (800b770 <__swsetup_r+0xd8>)
 800b6e0:	429c      	cmp	r4, r3
 800b6e2:	bf08      	it	eq
 800b6e4:	68ec      	ldreq	r4, [r5, #12]
 800b6e6:	e7e6      	b.n	800b6b6 <__swsetup_r+0x1e>
 800b6e8:	0758      	lsls	r0, r3, #29
 800b6ea:	d512      	bpl.n	800b712 <__swsetup_r+0x7a>
 800b6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ee:	b141      	cbz	r1, 800b702 <__swsetup_r+0x6a>
 800b6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f4:	4299      	cmp	r1, r3
 800b6f6:	d002      	beq.n	800b6fe <__swsetup_r+0x66>
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 fa5b 	bl	800bbb4 <_free_r>
 800b6fe:	2300      	movs	r3, #0
 800b700:	6363      	str	r3, [r4, #52]	; 0x34
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	2300      	movs	r3, #0
 800b70c:	6063      	str	r3, [r4, #4]
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	f043 0308 	orr.w	r3, r3, #8
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	b94b      	cbnz	r3, 800b732 <__swsetup_r+0x9a>
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b728:	d003      	beq.n	800b732 <__swsetup_r+0x9a>
 800b72a:	4621      	mov	r1, r4
 800b72c:	4630      	mov	r0, r6
 800b72e:	f000 fa01 	bl	800bb34 <__smakebuf_r>
 800b732:	89a0      	ldrh	r0, [r4, #12]
 800b734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b738:	f010 0301 	ands.w	r3, r0, #1
 800b73c:	d00a      	beq.n	800b754 <__swsetup_r+0xbc>
 800b73e:	2300      	movs	r3, #0
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	6963      	ldr	r3, [r4, #20]
 800b744:	425b      	negs	r3, r3
 800b746:	61a3      	str	r3, [r4, #24]
 800b748:	6923      	ldr	r3, [r4, #16]
 800b74a:	b943      	cbnz	r3, 800b75e <__swsetup_r+0xc6>
 800b74c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b750:	d1ba      	bne.n	800b6c8 <__swsetup_r+0x30>
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	0781      	lsls	r1, r0, #30
 800b756:	bf58      	it	pl
 800b758:	6963      	ldrpl	r3, [r4, #20]
 800b75a:	60a3      	str	r3, [r4, #8]
 800b75c:	e7f4      	b.n	800b748 <__swsetup_r+0xb0>
 800b75e:	2000      	movs	r0, #0
 800b760:	e7f7      	b.n	800b752 <__swsetup_r+0xba>
 800b762:	bf00      	nop
 800b764:	20000034 	.word	0x20000034
 800b768:	0800d090 	.word	0x0800d090
 800b76c:	0800d0b0 	.word	0x0800d0b0
 800b770:	0800d070 	.word	0x0800d070

0800b774 <__sflush_r>:
 800b774:	898a      	ldrh	r2, [r1, #12]
 800b776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77a:	4605      	mov	r5, r0
 800b77c:	0710      	lsls	r0, r2, #28
 800b77e:	460c      	mov	r4, r1
 800b780:	d458      	bmi.n	800b834 <__sflush_r+0xc0>
 800b782:	684b      	ldr	r3, [r1, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	dc05      	bgt.n	800b794 <__sflush_r+0x20>
 800b788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dc02      	bgt.n	800b794 <__sflush_r+0x20>
 800b78e:	2000      	movs	r0, #0
 800b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b796:	2e00      	cmp	r6, #0
 800b798:	d0f9      	beq.n	800b78e <__sflush_r+0x1a>
 800b79a:	2300      	movs	r3, #0
 800b79c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7a0:	682f      	ldr	r7, [r5, #0]
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	d032      	beq.n	800b80c <__sflush_r+0x98>
 800b7a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	075a      	lsls	r2, r3, #29
 800b7ac:	d505      	bpl.n	800b7ba <__sflush_r+0x46>
 800b7ae:	6863      	ldr	r3, [r4, #4]
 800b7b0:	1ac0      	subs	r0, r0, r3
 800b7b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7b4:	b10b      	cbz	r3, 800b7ba <__sflush_r+0x46>
 800b7b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7b8:	1ac0      	subs	r0, r0, r3
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4602      	mov	r2, r0
 800b7be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7c0:	6a21      	ldr	r1, [r4, #32]
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b0      	blx	r6
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	d106      	bne.n	800b7da <__sflush_r+0x66>
 800b7cc:	6829      	ldr	r1, [r5, #0]
 800b7ce:	291d      	cmp	r1, #29
 800b7d0:	d82c      	bhi.n	800b82c <__sflush_r+0xb8>
 800b7d2:	4a2a      	ldr	r2, [pc, #168]	; (800b87c <__sflush_r+0x108>)
 800b7d4:	40ca      	lsrs	r2, r1
 800b7d6:	07d6      	lsls	r6, r2, #31
 800b7d8:	d528      	bpl.n	800b82c <__sflush_r+0xb8>
 800b7da:	2200      	movs	r2, #0
 800b7dc:	6062      	str	r2, [r4, #4]
 800b7de:	04d9      	lsls	r1, r3, #19
 800b7e0:	6922      	ldr	r2, [r4, #16]
 800b7e2:	6022      	str	r2, [r4, #0]
 800b7e4:	d504      	bpl.n	800b7f0 <__sflush_r+0x7c>
 800b7e6:	1c42      	adds	r2, r0, #1
 800b7e8:	d101      	bne.n	800b7ee <__sflush_r+0x7a>
 800b7ea:	682b      	ldr	r3, [r5, #0]
 800b7ec:	b903      	cbnz	r3, 800b7f0 <__sflush_r+0x7c>
 800b7ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7f2:	602f      	str	r7, [r5, #0]
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	d0ca      	beq.n	800b78e <__sflush_r+0x1a>
 800b7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	d002      	beq.n	800b806 <__sflush_r+0x92>
 800b800:	4628      	mov	r0, r5
 800b802:	f000 f9d7 	bl	800bbb4 <_free_r>
 800b806:	2000      	movs	r0, #0
 800b808:	6360      	str	r0, [r4, #52]	; 0x34
 800b80a:	e7c1      	b.n	800b790 <__sflush_r+0x1c>
 800b80c:	6a21      	ldr	r1, [r4, #32]
 800b80e:	2301      	movs	r3, #1
 800b810:	4628      	mov	r0, r5
 800b812:	47b0      	blx	r6
 800b814:	1c41      	adds	r1, r0, #1
 800b816:	d1c7      	bne.n	800b7a8 <__sflush_r+0x34>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0c4      	beq.n	800b7a8 <__sflush_r+0x34>
 800b81e:	2b1d      	cmp	r3, #29
 800b820:	d001      	beq.n	800b826 <__sflush_r+0xb2>
 800b822:	2b16      	cmp	r3, #22
 800b824:	d101      	bne.n	800b82a <__sflush_r+0xb6>
 800b826:	602f      	str	r7, [r5, #0]
 800b828:	e7b1      	b.n	800b78e <__sflush_r+0x1a>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	e7ad      	b.n	800b790 <__sflush_r+0x1c>
 800b834:	690f      	ldr	r7, [r1, #16]
 800b836:	2f00      	cmp	r7, #0
 800b838:	d0a9      	beq.n	800b78e <__sflush_r+0x1a>
 800b83a:	0793      	lsls	r3, r2, #30
 800b83c:	680e      	ldr	r6, [r1, #0]
 800b83e:	bf08      	it	eq
 800b840:	694b      	ldreq	r3, [r1, #20]
 800b842:	600f      	str	r7, [r1, #0]
 800b844:	bf18      	it	ne
 800b846:	2300      	movne	r3, #0
 800b848:	eba6 0807 	sub.w	r8, r6, r7
 800b84c:	608b      	str	r3, [r1, #8]
 800b84e:	f1b8 0f00 	cmp.w	r8, #0
 800b852:	dd9c      	ble.n	800b78e <__sflush_r+0x1a>
 800b854:	6a21      	ldr	r1, [r4, #32]
 800b856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b858:	4643      	mov	r3, r8
 800b85a:	463a      	mov	r2, r7
 800b85c:	4628      	mov	r0, r5
 800b85e:	47b0      	blx	r6
 800b860:	2800      	cmp	r0, #0
 800b862:	dc06      	bgt.n	800b872 <__sflush_r+0xfe>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b870:	e78e      	b.n	800b790 <__sflush_r+0x1c>
 800b872:	4407      	add	r7, r0
 800b874:	eba8 0800 	sub.w	r8, r8, r0
 800b878:	e7e9      	b.n	800b84e <__sflush_r+0xda>
 800b87a:	bf00      	nop
 800b87c:	20400001 	.word	0x20400001

0800b880 <_fflush_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	690b      	ldr	r3, [r1, #16]
 800b884:	4605      	mov	r5, r0
 800b886:	460c      	mov	r4, r1
 800b888:	b913      	cbnz	r3, 800b890 <_fflush_r+0x10>
 800b88a:	2500      	movs	r5, #0
 800b88c:	4628      	mov	r0, r5
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	b118      	cbz	r0, 800b89a <_fflush_r+0x1a>
 800b892:	6983      	ldr	r3, [r0, #24]
 800b894:	b90b      	cbnz	r3, 800b89a <_fflush_r+0x1a>
 800b896:	f000 f887 	bl	800b9a8 <__sinit>
 800b89a:	4b14      	ldr	r3, [pc, #80]	; (800b8ec <_fflush_r+0x6c>)
 800b89c:	429c      	cmp	r4, r3
 800b89e:	d11b      	bne.n	800b8d8 <_fflush_r+0x58>
 800b8a0:	686c      	ldr	r4, [r5, #4]
 800b8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0ef      	beq.n	800b88a <_fflush_r+0xa>
 800b8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8ac:	07d0      	lsls	r0, r2, #31
 800b8ae:	d404      	bmi.n	800b8ba <_fflush_r+0x3a>
 800b8b0:	0599      	lsls	r1, r3, #22
 800b8b2:	d402      	bmi.n	800b8ba <_fflush_r+0x3a>
 800b8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8b6:	f000 f915 	bl	800bae4 <__retarget_lock_acquire_recursive>
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	4621      	mov	r1, r4
 800b8be:	f7ff ff59 	bl	800b774 <__sflush_r>
 800b8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8c4:	07da      	lsls	r2, r3, #31
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	d4e0      	bmi.n	800b88c <_fflush_r+0xc>
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	059b      	lsls	r3, r3, #22
 800b8ce:	d4dd      	bmi.n	800b88c <_fflush_r+0xc>
 800b8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8d2:	f000 f908 	bl	800bae6 <__retarget_lock_release_recursive>
 800b8d6:	e7d9      	b.n	800b88c <_fflush_r+0xc>
 800b8d8:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <_fflush_r+0x70>)
 800b8da:	429c      	cmp	r4, r3
 800b8dc:	d101      	bne.n	800b8e2 <_fflush_r+0x62>
 800b8de:	68ac      	ldr	r4, [r5, #8]
 800b8e0:	e7df      	b.n	800b8a2 <_fflush_r+0x22>
 800b8e2:	4b04      	ldr	r3, [pc, #16]	; (800b8f4 <_fflush_r+0x74>)
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	bf08      	it	eq
 800b8e8:	68ec      	ldreq	r4, [r5, #12]
 800b8ea:	e7da      	b.n	800b8a2 <_fflush_r+0x22>
 800b8ec:	0800d090 	.word	0x0800d090
 800b8f0:	0800d0b0 	.word	0x0800d0b0
 800b8f4:	0800d070 	.word	0x0800d070

0800b8f8 <std>:
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b906:	6083      	str	r3, [r0, #8]
 800b908:	8181      	strh	r1, [r0, #12]
 800b90a:	6643      	str	r3, [r0, #100]	; 0x64
 800b90c:	81c2      	strh	r2, [r0, #14]
 800b90e:	6183      	str	r3, [r0, #24]
 800b910:	4619      	mov	r1, r3
 800b912:	2208      	movs	r2, #8
 800b914:	305c      	adds	r0, #92	; 0x5c
 800b916:	f7ff fdd7 	bl	800b4c8 <memset>
 800b91a:	4b05      	ldr	r3, [pc, #20]	; (800b930 <std+0x38>)
 800b91c:	6263      	str	r3, [r4, #36]	; 0x24
 800b91e:	4b05      	ldr	r3, [pc, #20]	; (800b934 <std+0x3c>)
 800b920:	62a3      	str	r3, [r4, #40]	; 0x28
 800b922:	4b05      	ldr	r3, [pc, #20]	; (800b938 <std+0x40>)
 800b924:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b926:	4b05      	ldr	r3, [pc, #20]	; (800b93c <std+0x44>)
 800b928:	6224      	str	r4, [r4, #32]
 800b92a:	6323      	str	r3, [r4, #48]	; 0x30
 800b92c:	bd10      	pop	{r4, pc}
 800b92e:	bf00      	nop
 800b930:	0800c371 	.word	0x0800c371
 800b934:	0800c393 	.word	0x0800c393
 800b938:	0800c3cb 	.word	0x0800c3cb
 800b93c:	0800c3ef 	.word	0x0800c3ef

0800b940 <_cleanup_r>:
 800b940:	4901      	ldr	r1, [pc, #4]	; (800b948 <_cleanup_r+0x8>)
 800b942:	f000 b8af 	b.w	800baa4 <_fwalk_reent>
 800b946:	bf00      	nop
 800b948:	0800b881 	.word	0x0800b881

0800b94c <__sfmoreglue>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	2268      	movs	r2, #104	; 0x68
 800b950:	1e4d      	subs	r5, r1, #1
 800b952:	4355      	muls	r5, r2
 800b954:	460e      	mov	r6, r1
 800b956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b95a:	f000 f997 	bl	800bc8c <_malloc_r>
 800b95e:	4604      	mov	r4, r0
 800b960:	b140      	cbz	r0, 800b974 <__sfmoreglue+0x28>
 800b962:	2100      	movs	r1, #0
 800b964:	e9c0 1600 	strd	r1, r6, [r0]
 800b968:	300c      	adds	r0, #12
 800b96a:	60a0      	str	r0, [r4, #8]
 800b96c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b970:	f7ff fdaa 	bl	800b4c8 <memset>
 800b974:	4620      	mov	r0, r4
 800b976:	bd70      	pop	{r4, r5, r6, pc}

0800b978 <__sfp_lock_acquire>:
 800b978:	4801      	ldr	r0, [pc, #4]	; (800b980 <__sfp_lock_acquire+0x8>)
 800b97a:	f000 b8b3 	b.w	800bae4 <__retarget_lock_acquire_recursive>
 800b97e:	bf00      	nop
 800b980:	20001665 	.word	0x20001665

0800b984 <__sfp_lock_release>:
 800b984:	4801      	ldr	r0, [pc, #4]	; (800b98c <__sfp_lock_release+0x8>)
 800b986:	f000 b8ae 	b.w	800bae6 <__retarget_lock_release_recursive>
 800b98a:	bf00      	nop
 800b98c:	20001665 	.word	0x20001665

0800b990 <__sinit_lock_acquire>:
 800b990:	4801      	ldr	r0, [pc, #4]	; (800b998 <__sinit_lock_acquire+0x8>)
 800b992:	f000 b8a7 	b.w	800bae4 <__retarget_lock_acquire_recursive>
 800b996:	bf00      	nop
 800b998:	20001666 	.word	0x20001666

0800b99c <__sinit_lock_release>:
 800b99c:	4801      	ldr	r0, [pc, #4]	; (800b9a4 <__sinit_lock_release+0x8>)
 800b99e:	f000 b8a2 	b.w	800bae6 <__retarget_lock_release_recursive>
 800b9a2:	bf00      	nop
 800b9a4:	20001666 	.word	0x20001666

0800b9a8 <__sinit>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	f7ff fff0 	bl	800b990 <__sinit_lock_acquire>
 800b9b0:	69a3      	ldr	r3, [r4, #24]
 800b9b2:	b11b      	cbz	r3, 800b9bc <__sinit+0x14>
 800b9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b8:	f7ff bff0 	b.w	800b99c <__sinit_lock_release>
 800b9bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b9c2:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <__sinit+0x68>)
 800b9c4:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <__sinit+0x6c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	bf04      	itt	eq
 800b9ce:	2301      	moveq	r3, #1
 800b9d0:	61a3      	streq	r3, [r4, #24]
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 f820 	bl	800ba18 <__sfp>
 800b9d8:	6060      	str	r0, [r4, #4]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 f81c 	bl	800ba18 <__sfp>
 800b9e0:	60a0      	str	r0, [r4, #8]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 f818 	bl	800ba18 <__sfp>
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	60e0      	str	r0, [r4, #12]
 800b9ec:	2104      	movs	r1, #4
 800b9ee:	6860      	ldr	r0, [r4, #4]
 800b9f0:	f7ff ff82 	bl	800b8f8 <std>
 800b9f4:	68a0      	ldr	r0, [r4, #8]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	2109      	movs	r1, #9
 800b9fa:	f7ff ff7d 	bl	800b8f8 <std>
 800b9fe:	68e0      	ldr	r0, [r4, #12]
 800ba00:	2202      	movs	r2, #2
 800ba02:	2112      	movs	r1, #18
 800ba04:	f7ff ff78 	bl	800b8f8 <std>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	61a3      	str	r3, [r4, #24]
 800ba0c:	e7d2      	b.n	800b9b4 <__sinit+0xc>
 800ba0e:	bf00      	nop
 800ba10:	0800d06c 	.word	0x0800d06c
 800ba14:	0800b941 	.word	0x0800b941

0800ba18 <__sfp>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	4607      	mov	r7, r0
 800ba1c:	f7ff ffac 	bl	800b978 <__sfp_lock_acquire>
 800ba20:	4b1e      	ldr	r3, [pc, #120]	; (800ba9c <__sfp+0x84>)
 800ba22:	681e      	ldr	r6, [r3, #0]
 800ba24:	69b3      	ldr	r3, [r6, #24]
 800ba26:	b913      	cbnz	r3, 800ba2e <__sfp+0x16>
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff ffbd 	bl	800b9a8 <__sinit>
 800ba2e:	3648      	adds	r6, #72	; 0x48
 800ba30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	d503      	bpl.n	800ba40 <__sfp+0x28>
 800ba38:	6833      	ldr	r3, [r6, #0]
 800ba3a:	b30b      	cbz	r3, 800ba80 <__sfp+0x68>
 800ba3c:	6836      	ldr	r6, [r6, #0]
 800ba3e:	e7f7      	b.n	800ba30 <__sfp+0x18>
 800ba40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba44:	b9d5      	cbnz	r5, 800ba7c <__sfp+0x64>
 800ba46:	4b16      	ldr	r3, [pc, #88]	; (800baa0 <__sfp+0x88>)
 800ba48:	60e3      	str	r3, [r4, #12]
 800ba4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ba50:	f000 f847 	bl	800bae2 <__retarget_lock_init_recursive>
 800ba54:	f7ff ff96 	bl	800b984 <__sfp_lock_release>
 800ba58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba60:	6025      	str	r5, [r4, #0]
 800ba62:	61a5      	str	r5, [r4, #24]
 800ba64:	2208      	movs	r2, #8
 800ba66:	4629      	mov	r1, r5
 800ba68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba6c:	f7ff fd2c 	bl	800b4c8 <memset>
 800ba70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba78:	4620      	mov	r0, r4
 800ba7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba7c:	3468      	adds	r4, #104	; 0x68
 800ba7e:	e7d9      	b.n	800ba34 <__sfp+0x1c>
 800ba80:	2104      	movs	r1, #4
 800ba82:	4638      	mov	r0, r7
 800ba84:	f7ff ff62 	bl	800b94c <__sfmoreglue>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	6030      	str	r0, [r6, #0]
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d1d5      	bne.n	800ba3c <__sfp+0x24>
 800ba90:	f7ff ff78 	bl	800b984 <__sfp_lock_release>
 800ba94:	230c      	movs	r3, #12
 800ba96:	603b      	str	r3, [r7, #0]
 800ba98:	e7ee      	b.n	800ba78 <__sfp+0x60>
 800ba9a:	bf00      	nop
 800ba9c:	0800d06c 	.word	0x0800d06c
 800baa0:	ffff0001 	.word	0xffff0001

0800baa4 <_fwalk_reent>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	4606      	mov	r6, r0
 800baaa:	4688      	mov	r8, r1
 800baac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bab0:	2700      	movs	r7, #0
 800bab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bab6:	f1b9 0901 	subs.w	r9, r9, #1
 800baba:	d505      	bpl.n	800bac8 <_fwalk_reent+0x24>
 800babc:	6824      	ldr	r4, [r4, #0]
 800babe:	2c00      	cmp	r4, #0
 800bac0:	d1f7      	bne.n	800bab2 <_fwalk_reent+0xe>
 800bac2:	4638      	mov	r0, r7
 800bac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac8:	89ab      	ldrh	r3, [r5, #12]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d907      	bls.n	800bade <_fwalk_reent+0x3a>
 800bace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bad2:	3301      	adds	r3, #1
 800bad4:	d003      	beq.n	800bade <_fwalk_reent+0x3a>
 800bad6:	4629      	mov	r1, r5
 800bad8:	4630      	mov	r0, r6
 800bada:	47c0      	blx	r8
 800badc:	4307      	orrs	r7, r0
 800bade:	3568      	adds	r5, #104	; 0x68
 800bae0:	e7e9      	b.n	800bab6 <_fwalk_reent+0x12>

0800bae2 <__retarget_lock_init_recursive>:
 800bae2:	4770      	bx	lr

0800bae4 <__retarget_lock_acquire_recursive>:
 800bae4:	4770      	bx	lr

0800bae6 <__retarget_lock_release_recursive>:
 800bae6:	4770      	bx	lr

0800bae8 <__swhatbuf_r>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	460e      	mov	r6, r1
 800baec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf0:	2900      	cmp	r1, #0
 800baf2:	b096      	sub	sp, #88	; 0x58
 800baf4:	4614      	mov	r4, r2
 800baf6:	461d      	mov	r5, r3
 800baf8:	da08      	bge.n	800bb0c <__swhatbuf_r+0x24>
 800bafa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	602a      	str	r2, [r5, #0]
 800bb02:	061a      	lsls	r2, r3, #24
 800bb04:	d410      	bmi.n	800bb28 <__swhatbuf_r+0x40>
 800bb06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb0a:	e00e      	b.n	800bb2a <__swhatbuf_r+0x42>
 800bb0c:	466a      	mov	r2, sp
 800bb0e:	f000 fc95 	bl	800c43c <_fstat_r>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	dbf1      	blt.n	800bafa <__swhatbuf_r+0x12>
 800bb16:	9a01      	ldr	r2, [sp, #4]
 800bb18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb20:	425a      	negs	r2, r3
 800bb22:	415a      	adcs	r2, r3
 800bb24:	602a      	str	r2, [r5, #0]
 800bb26:	e7ee      	b.n	800bb06 <__swhatbuf_r+0x1e>
 800bb28:	2340      	movs	r3, #64	; 0x40
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	b016      	add	sp, #88	; 0x58
 800bb30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb34 <__smakebuf_r>:
 800bb34:	898b      	ldrh	r3, [r1, #12]
 800bb36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb38:	079d      	lsls	r5, r3, #30
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	d507      	bpl.n	800bb50 <__smakebuf_r+0x1c>
 800bb40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	6123      	str	r3, [r4, #16]
 800bb48:	2301      	movs	r3, #1
 800bb4a:	6163      	str	r3, [r4, #20]
 800bb4c:	b002      	add	sp, #8
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	ab01      	add	r3, sp, #4
 800bb52:	466a      	mov	r2, sp
 800bb54:	f7ff ffc8 	bl	800bae8 <__swhatbuf_r>
 800bb58:	9900      	ldr	r1, [sp, #0]
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f000 f895 	bl	800bc8c <_malloc_r>
 800bb62:	b948      	cbnz	r0, 800bb78 <__smakebuf_r+0x44>
 800bb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb68:	059a      	lsls	r2, r3, #22
 800bb6a:	d4ef      	bmi.n	800bb4c <__smakebuf_r+0x18>
 800bb6c:	f023 0303 	bic.w	r3, r3, #3
 800bb70:	f043 0302 	orr.w	r3, r3, #2
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	e7e3      	b.n	800bb40 <__smakebuf_r+0xc>
 800bb78:	4b0d      	ldr	r3, [pc, #52]	; (800bbb0 <__smakebuf_r+0x7c>)
 800bb7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	6020      	str	r0, [r4, #0]
 800bb80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	9b00      	ldr	r3, [sp, #0]
 800bb88:	6163      	str	r3, [r4, #20]
 800bb8a:	9b01      	ldr	r3, [sp, #4]
 800bb8c:	6120      	str	r0, [r4, #16]
 800bb8e:	b15b      	cbz	r3, 800bba8 <__smakebuf_r+0x74>
 800bb90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb94:	4630      	mov	r0, r6
 800bb96:	f000 fc63 	bl	800c460 <_isatty_r>
 800bb9a:	b128      	cbz	r0, 800bba8 <__smakebuf_r+0x74>
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	f023 0303 	bic.w	r3, r3, #3
 800bba2:	f043 0301 	orr.w	r3, r3, #1
 800bba6:	81a3      	strh	r3, [r4, #12]
 800bba8:	89a0      	ldrh	r0, [r4, #12]
 800bbaa:	4305      	orrs	r5, r0
 800bbac:	81a5      	strh	r5, [r4, #12]
 800bbae:	e7cd      	b.n	800bb4c <__smakebuf_r+0x18>
 800bbb0:	0800b941 	.word	0x0800b941

0800bbb4 <_free_r>:
 800bbb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbb6:	2900      	cmp	r1, #0
 800bbb8:	d044      	beq.n	800bc44 <_free_r+0x90>
 800bbba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbbe:	9001      	str	r0, [sp, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f1a1 0404 	sub.w	r4, r1, #4
 800bbc6:	bfb8      	it	lt
 800bbc8:	18e4      	addlt	r4, r4, r3
 800bbca:	f000 fc6b 	bl	800c4a4 <__malloc_lock>
 800bbce:	4a1e      	ldr	r2, [pc, #120]	; (800bc48 <_free_r+0x94>)
 800bbd0:	9801      	ldr	r0, [sp, #4]
 800bbd2:	6813      	ldr	r3, [r2, #0]
 800bbd4:	b933      	cbnz	r3, 800bbe4 <_free_r+0x30>
 800bbd6:	6063      	str	r3, [r4, #4]
 800bbd8:	6014      	str	r4, [r2, #0]
 800bbda:	b003      	add	sp, #12
 800bbdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbe0:	f000 bc66 	b.w	800c4b0 <__malloc_unlock>
 800bbe4:	42a3      	cmp	r3, r4
 800bbe6:	d908      	bls.n	800bbfa <_free_r+0x46>
 800bbe8:	6825      	ldr	r5, [r4, #0]
 800bbea:	1961      	adds	r1, r4, r5
 800bbec:	428b      	cmp	r3, r1
 800bbee:	bf01      	itttt	eq
 800bbf0:	6819      	ldreq	r1, [r3, #0]
 800bbf2:	685b      	ldreq	r3, [r3, #4]
 800bbf4:	1949      	addeq	r1, r1, r5
 800bbf6:	6021      	streq	r1, [r4, #0]
 800bbf8:	e7ed      	b.n	800bbd6 <_free_r+0x22>
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	b10b      	cbz	r3, 800bc04 <_free_r+0x50>
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	d9fa      	bls.n	800bbfa <_free_r+0x46>
 800bc04:	6811      	ldr	r1, [r2, #0]
 800bc06:	1855      	adds	r5, r2, r1
 800bc08:	42a5      	cmp	r5, r4
 800bc0a:	d10b      	bne.n	800bc24 <_free_r+0x70>
 800bc0c:	6824      	ldr	r4, [r4, #0]
 800bc0e:	4421      	add	r1, r4
 800bc10:	1854      	adds	r4, r2, r1
 800bc12:	42a3      	cmp	r3, r4
 800bc14:	6011      	str	r1, [r2, #0]
 800bc16:	d1e0      	bne.n	800bbda <_free_r+0x26>
 800bc18:	681c      	ldr	r4, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	6053      	str	r3, [r2, #4]
 800bc1e:	4421      	add	r1, r4
 800bc20:	6011      	str	r1, [r2, #0]
 800bc22:	e7da      	b.n	800bbda <_free_r+0x26>
 800bc24:	d902      	bls.n	800bc2c <_free_r+0x78>
 800bc26:	230c      	movs	r3, #12
 800bc28:	6003      	str	r3, [r0, #0]
 800bc2a:	e7d6      	b.n	800bbda <_free_r+0x26>
 800bc2c:	6825      	ldr	r5, [r4, #0]
 800bc2e:	1961      	adds	r1, r4, r5
 800bc30:	428b      	cmp	r3, r1
 800bc32:	bf04      	itt	eq
 800bc34:	6819      	ldreq	r1, [r3, #0]
 800bc36:	685b      	ldreq	r3, [r3, #4]
 800bc38:	6063      	str	r3, [r4, #4]
 800bc3a:	bf04      	itt	eq
 800bc3c:	1949      	addeq	r1, r1, r5
 800bc3e:	6021      	streq	r1, [r4, #0]
 800bc40:	6054      	str	r4, [r2, #4]
 800bc42:	e7ca      	b.n	800bbda <_free_r+0x26>
 800bc44:	b003      	add	sp, #12
 800bc46:	bd30      	pop	{r4, r5, pc}
 800bc48:	20001668 	.word	0x20001668

0800bc4c <sbrk_aligned>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	4e0e      	ldr	r6, [pc, #56]	; (800bc88 <sbrk_aligned+0x3c>)
 800bc50:	460c      	mov	r4, r1
 800bc52:	6831      	ldr	r1, [r6, #0]
 800bc54:	4605      	mov	r5, r0
 800bc56:	b911      	cbnz	r1, 800bc5e <sbrk_aligned+0x12>
 800bc58:	f000 fb7a 	bl	800c350 <_sbrk_r>
 800bc5c:	6030      	str	r0, [r6, #0]
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4628      	mov	r0, r5
 800bc62:	f000 fb75 	bl	800c350 <_sbrk_r>
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	d00a      	beq.n	800bc80 <sbrk_aligned+0x34>
 800bc6a:	1cc4      	adds	r4, r0, #3
 800bc6c:	f024 0403 	bic.w	r4, r4, #3
 800bc70:	42a0      	cmp	r0, r4
 800bc72:	d007      	beq.n	800bc84 <sbrk_aligned+0x38>
 800bc74:	1a21      	subs	r1, r4, r0
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 fb6a 	bl	800c350 <_sbrk_r>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d101      	bne.n	800bc84 <sbrk_aligned+0x38>
 800bc80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bc84:	4620      	mov	r0, r4
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	2000166c 	.word	0x2000166c

0800bc8c <_malloc_r>:
 800bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc90:	1ccd      	adds	r5, r1, #3
 800bc92:	f025 0503 	bic.w	r5, r5, #3
 800bc96:	3508      	adds	r5, #8
 800bc98:	2d0c      	cmp	r5, #12
 800bc9a:	bf38      	it	cc
 800bc9c:	250c      	movcc	r5, #12
 800bc9e:	2d00      	cmp	r5, #0
 800bca0:	4607      	mov	r7, r0
 800bca2:	db01      	blt.n	800bca8 <_malloc_r+0x1c>
 800bca4:	42a9      	cmp	r1, r5
 800bca6:	d905      	bls.n	800bcb4 <_malloc_r+0x28>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	2600      	movs	r6, #0
 800bcae:	4630      	mov	r0, r6
 800bcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb4:	4e2e      	ldr	r6, [pc, #184]	; (800bd70 <_malloc_r+0xe4>)
 800bcb6:	f000 fbf5 	bl	800c4a4 <__malloc_lock>
 800bcba:	6833      	ldr	r3, [r6, #0]
 800bcbc:	461c      	mov	r4, r3
 800bcbe:	bb34      	cbnz	r4, 800bd0e <_malloc_r+0x82>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7ff ffc2 	bl	800bc4c <sbrk_aligned>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	4604      	mov	r4, r0
 800bccc:	d14d      	bne.n	800bd6a <_malloc_r+0xde>
 800bcce:	6834      	ldr	r4, [r6, #0]
 800bcd0:	4626      	mov	r6, r4
 800bcd2:	2e00      	cmp	r6, #0
 800bcd4:	d140      	bne.n	800bd58 <_malloc_r+0xcc>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4638      	mov	r0, r7
 800bcdc:	eb04 0803 	add.w	r8, r4, r3
 800bce0:	f000 fb36 	bl	800c350 <_sbrk_r>
 800bce4:	4580      	cmp	r8, r0
 800bce6:	d13a      	bne.n	800bd5e <_malloc_r+0xd2>
 800bce8:	6821      	ldr	r1, [r4, #0]
 800bcea:	3503      	adds	r5, #3
 800bcec:	1a6d      	subs	r5, r5, r1
 800bcee:	f025 0503 	bic.w	r5, r5, #3
 800bcf2:	3508      	adds	r5, #8
 800bcf4:	2d0c      	cmp	r5, #12
 800bcf6:	bf38      	it	cc
 800bcf8:	250c      	movcc	r5, #12
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f7ff ffa5 	bl	800bc4c <sbrk_aligned>
 800bd02:	3001      	adds	r0, #1
 800bd04:	d02b      	beq.n	800bd5e <_malloc_r+0xd2>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	442b      	add	r3, r5
 800bd0a:	6023      	str	r3, [r4, #0]
 800bd0c:	e00e      	b.n	800bd2c <_malloc_r+0xa0>
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	1b52      	subs	r2, r2, r5
 800bd12:	d41e      	bmi.n	800bd52 <_malloc_r+0xc6>
 800bd14:	2a0b      	cmp	r2, #11
 800bd16:	d916      	bls.n	800bd46 <_malloc_r+0xba>
 800bd18:	1961      	adds	r1, r4, r5
 800bd1a:	42a3      	cmp	r3, r4
 800bd1c:	6025      	str	r5, [r4, #0]
 800bd1e:	bf18      	it	ne
 800bd20:	6059      	strne	r1, [r3, #4]
 800bd22:	6863      	ldr	r3, [r4, #4]
 800bd24:	bf08      	it	eq
 800bd26:	6031      	streq	r1, [r6, #0]
 800bd28:	5162      	str	r2, [r4, r5]
 800bd2a:	604b      	str	r3, [r1, #4]
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f104 060b 	add.w	r6, r4, #11
 800bd32:	f000 fbbd 	bl	800c4b0 <__malloc_unlock>
 800bd36:	f026 0607 	bic.w	r6, r6, #7
 800bd3a:	1d23      	adds	r3, r4, #4
 800bd3c:	1af2      	subs	r2, r6, r3
 800bd3e:	d0b6      	beq.n	800bcae <_malloc_r+0x22>
 800bd40:	1b9b      	subs	r3, r3, r6
 800bd42:	50a3      	str	r3, [r4, r2]
 800bd44:	e7b3      	b.n	800bcae <_malloc_r+0x22>
 800bd46:	6862      	ldr	r2, [r4, #4]
 800bd48:	42a3      	cmp	r3, r4
 800bd4a:	bf0c      	ite	eq
 800bd4c:	6032      	streq	r2, [r6, #0]
 800bd4e:	605a      	strne	r2, [r3, #4]
 800bd50:	e7ec      	b.n	800bd2c <_malloc_r+0xa0>
 800bd52:	4623      	mov	r3, r4
 800bd54:	6864      	ldr	r4, [r4, #4]
 800bd56:	e7b2      	b.n	800bcbe <_malloc_r+0x32>
 800bd58:	4634      	mov	r4, r6
 800bd5a:	6876      	ldr	r6, [r6, #4]
 800bd5c:	e7b9      	b.n	800bcd2 <_malloc_r+0x46>
 800bd5e:	230c      	movs	r3, #12
 800bd60:	603b      	str	r3, [r7, #0]
 800bd62:	4638      	mov	r0, r7
 800bd64:	f000 fba4 	bl	800c4b0 <__malloc_unlock>
 800bd68:	e7a1      	b.n	800bcae <_malloc_r+0x22>
 800bd6a:	6025      	str	r5, [r4, #0]
 800bd6c:	e7de      	b.n	800bd2c <_malloc_r+0xa0>
 800bd6e:	bf00      	nop
 800bd70:	20001668 	.word	0x20001668

0800bd74 <__sfputc_r>:
 800bd74:	6893      	ldr	r3, [r2, #8]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	b410      	push	{r4}
 800bd7c:	6093      	str	r3, [r2, #8]
 800bd7e:	da08      	bge.n	800bd92 <__sfputc_r+0x1e>
 800bd80:	6994      	ldr	r4, [r2, #24]
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	db01      	blt.n	800bd8a <__sfputc_r+0x16>
 800bd86:	290a      	cmp	r1, #10
 800bd88:	d103      	bne.n	800bd92 <__sfputc_r+0x1e>
 800bd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd8e:	f7ff bc31 	b.w	800b5f4 <__swbuf_r>
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	1c58      	adds	r0, r3, #1
 800bd96:	6010      	str	r0, [r2, #0]
 800bd98:	7019      	strb	r1, [r3, #0]
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <__sfputs_r>:
 800bda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	4614      	mov	r4, r2
 800bdaa:	18d5      	adds	r5, r2, r3
 800bdac:	42ac      	cmp	r4, r5
 800bdae:	d101      	bne.n	800bdb4 <__sfputs_r+0x12>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e007      	b.n	800bdc4 <__sfputs_r+0x22>
 800bdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb8:	463a      	mov	r2, r7
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff ffda 	bl	800bd74 <__sfputc_r>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d1f3      	bne.n	800bdac <__sfputs_r+0xa>
 800bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc8 <_vfiprintf_r>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	460d      	mov	r5, r1
 800bdce:	b09d      	sub	sp, #116	; 0x74
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	4698      	mov	r8, r3
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	b118      	cbz	r0, 800bde0 <_vfiprintf_r+0x18>
 800bdd8:	6983      	ldr	r3, [r0, #24]
 800bdda:	b90b      	cbnz	r3, 800bde0 <_vfiprintf_r+0x18>
 800bddc:	f7ff fde4 	bl	800b9a8 <__sinit>
 800bde0:	4b89      	ldr	r3, [pc, #548]	; (800c008 <_vfiprintf_r+0x240>)
 800bde2:	429d      	cmp	r5, r3
 800bde4:	d11b      	bne.n	800be1e <_vfiprintf_r+0x56>
 800bde6:	6875      	ldr	r5, [r6, #4]
 800bde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_vfiprintf_r+0x32>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	059a      	lsls	r2, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_vfiprintf_r+0x32>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf6:	f7ff fe75 	bl	800bae4 <__retarget_lock_acquire_recursive>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	071b      	lsls	r3, r3, #28
 800bdfe:	d501      	bpl.n	800be04 <_vfiprintf_r+0x3c>
 800be00:	692b      	ldr	r3, [r5, #16]
 800be02:	b9eb      	cbnz	r3, 800be40 <_vfiprintf_r+0x78>
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f7ff fc46 	bl	800b698 <__swsetup_r>
 800be0c:	b1c0      	cbz	r0, 800be40 <_vfiprintf_r+0x78>
 800be0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be10:	07dc      	lsls	r4, r3, #31
 800be12:	d50e      	bpl.n	800be32 <_vfiprintf_r+0x6a>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be18:	b01d      	add	sp, #116	; 0x74
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	4b7b      	ldr	r3, [pc, #492]	; (800c00c <_vfiprintf_r+0x244>)
 800be20:	429d      	cmp	r5, r3
 800be22:	d101      	bne.n	800be28 <_vfiprintf_r+0x60>
 800be24:	68b5      	ldr	r5, [r6, #8]
 800be26:	e7df      	b.n	800bde8 <_vfiprintf_r+0x20>
 800be28:	4b79      	ldr	r3, [pc, #484]	; (800c010 <_vfiprintf_r+0x248>)
 800be2a:	429d      	cmp	r5, r3
 800be2c:	bf08      	it	eq
 800be2e:	68f5      	ldreq	r5, [r6, #12]
 800be30:	e7da      	b.n	800bde8 <_vfiprintf_r+0x20>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	0598      	lsls	r0, r3, #22
 800be36:	d4ed      	bmi.n	800be14 <_vfiprintf_r+0x4c>
 800be38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be3a:	f7ff fe54 	bl	800bae6 <__retarget_lock_release_recursive>
 800be3e:	e7e9      	b.n	800be14 <_vfiprintf_r+0x4c>
 800be40:	2300      	movs	r3, #0
 800be42:	9309      	str	r3, [sp, #36]	; 0x24
 800be44:	2320      	movs	r3, #32
 800be46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be4e:	2330      	movs	r3, #48	; 0x30
 800be50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c014 <_vfiprintf_r+0x24c>
 800be54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be58:	f04f 0901 	mov.w	r9, #1
 800be5c:	4623      	mov	r3, r4
 800be5e:	469a      	mov	sl, r3
 800be60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be64:	b10a      	cbz	r2, 800be6a <_vfiprintf_r+0xa2>
 800be66:	2a25      	cmp	r2, #37	; 0x25
 800be68:	d1f9      	bne.n	800be5e <_vfiprintf_r+0x96>
 800be6a:	ebba 0b04 	subs.w	fp, sl, r4
 800be6e:	d00b      	beq.n	800be88 <_vfiprintf_r+0xc0>
 800be70:	465b      	mov	r3, fp
 800be72:	4622      	mov	r2, r4
 800be74:	4629      	mov	r1, r5
 800be76:	4630      	mov	r0, r6
 800be78:	f7ff ff93 	bl	800bda2 <__sfputs_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	f000 80aa 	beq.w	800bfd6 <_vfiprintf_r+0x20e>
 800be82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be84:	445a      	add	r2, fp
 800be86:	9209      	str	r2, [sp, #36]	; 0x24
 800be88:	f89a 3000 	ldrb.w	r3, [sl]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 80a2 	beq.w	800bfd6 <_vfiprintf_r+0x20e>
 800be92:	2300      	movs	r3, #0
 800be94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be9c:	f10a 0a01 	add.w	sl, sl, #1
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	9307      	str	r3, [sp, #28]
 800bea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bea8:	931a      	str	r3, [sp, #104]	; 0x68
 800beaa:	4654      	mov	r4, sl
 800beac:	2205      	movs	r2, #5
 800beae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb2:	4858      	ldr	r0, [pc, #352]	; (800c014 <_vfiprintf_r+0x24c>)
 800beb4:	f7f4 f97c 	bl	80001b0 <memchr>
 800beb8:	9a04      	ldr	r2, [sp, #16]
 800beba:	b9d8      	cbnz	r0, 800bef4 <_vfiprintf_r+0x12c>
 800bebc:	06d1      	lsls	r1, r2, #27
 800bebe:	bf44      	itt	mi
 800bec0:	2320      	movmi	r3, #32
 800bec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec6:	0713      	lsls	r3, r2, #28
 800bec8:	bf44      	itt	mi
 800beca:	232b      	movmi	r3, #43	; 0x2b
 800becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bed0:	f89a 3000 	ldrb.w	r3, [sl]
 800bed4:	2b2a      	cmp	r3, #42	; 0x2a
 800bed6:	d015      	beq.n	800bf04 <_vfiprintf_r+0x13c>
 800bed8:	9a07      	ldr	r2, [sp, #28]
 800beda:	4654      	mov	r4, sl
 800bedc:	2000      	movs	r0, #0
 800bede:	f04f 0c0a 	mov.w	ip, #10
 800bee2:	4621      	mov	r1, r4
 800bee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee8:	3b30      	subs	r3, #48	; 0x30
 800beea:	2b09      	cmp	r3, #9
 800beec:	d94e      	bls.n	800bf8c <_vfiprintf_r+0x1c4>
 800beee:	b1b0      	cbz	r0, 800bf1e <_vfiprintf_r+0x156>
 800bef0:	9207      	str	r2, [sp, #28]
 800bef2:	e014      	b.n	800bf1e <_vfiprintf_r+0x156>
 800bef4:	eba0 0308 	sub.w	r3, r0, r8
 800bef8:	fa09 f303 	lsl.w	r3, r9, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	9304      	str	r3, [sp, #16]
 800bf00:	46a2      	mov	sl, r4
 800bf02:	e7d2      	b.n	800beaa <_vfiprintf_r+0xe2>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	1d19      	adds	r1, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	9103      	str	r1, [sp, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bfbb      	ittet	lt
 800bf10:	425b      	neglt	r3, r3
 800bf12:	f042 0202 	orrlt.w	r2, r2, #2
 800bf16:	9307      	strge	r3, [sp, #28]
 800bf18:	9307      	strlt	r3, [sp, #28]
 800bf1a:	bfb8      	it	lt
 800bf1c:	9204      	strlt	r2, [sp, #16]
 800bf1e:	7823      	ldrb	r3, [r4, #0]
 800bf20:	2b2e      	cmp	r3, #46	; 0x2e
 800bf22:	d10c      	bne.n	800bf3e <_vfiprintf_r+0x176>
 800bf24:	7863      	ldrb	r3, [r4, #1]
 800bf26:	2b2a      	cmp	r3, #42	; 0x2a
 800bf28:	d135      	bne.n	800bf96 <_vfiprintf_r+0x1ce>
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	1d1a      	adds	r2, r3, #4
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	9203      	str	r2, [sp, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	bfb8      	it	lt
 800bf36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf3a:	3402      	adds	r4, #2
 800bf3c:	9305      	str	r3, [sp, #20]
 800bf3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c024 <_vfiprintf_r+0x25c>
 800bf42:	7821      	ldrb	r1, [r4, #0]
 800bf44:	2203      	movs	r2, #3
 800bf46:	4650      	mov	r0, sl
 800bf48:	f7f4 f932 	bl	80001b0 <memchr>
 800bf4c:	b140      	cbz	r0, 800bf60 <_vfiprintf_r+0x198>
 800bf4e:	2340      	movs	r3, #64	; 0x40
 800bf50:	eba0 000a 	sub.w	r0, r0, sl
 800bf54:	fa03 f000 	lsl.w	r0, r3, r0
 800bf58:	9b04      	ldr	r3, [sp, #16]
 800bf5a:	4303      	orrs	r3, r0
 800bf5c:	3401      	adds	r4, #1
 800bf5e:	9304      	str	r3, [sp, #16]
 800bf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf64:	482c      	ldr	r0, [pc, #176]	; (800c018 <_vfiprintf_r+0x250>)
 800bf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf6a:	2206      	movs	r2, #6
 800bf6c:	f7f4 f920 	bl	80001b0 <memchr>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d03f      	beq.n	800bff4 <_vfiprintf_r+0x22c>
 800bf74:	4b29      	ldr	r3, [pc, #164]	; (800c01c <_vfiprintf_r+0x254>)
 800bf76:	bb1b      	cbnz	r3, 800bfc0 <_vfiprintf_r+0x1f8>
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	3307      	adds	r3, #7
 800bf7c:	f023 0307 	bic.w	r3, r3, #7
 800bf80:	3308      	adds	r3, #8
 800bf82:	9303      	str	r3, [sp, #12]
 800bf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf86:	443b      	add	r3, r7
 800bf88:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8a:	e767      	b.n	800be5c <_vfiprintf_r+0x94>
 800bf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf90:	460c      	mov	r4, r1
 800bf92:	2001      	movs	r0, #1
 800bf94:	e7a5      	b.n	800bee2 <_vfiprintf_r+0x11a>
 800bf96:	2300      	movs	r3, #0
 800bf98:	3401      	adds	r4, #1
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f04f 0c0a 	mov.w	ip, #10
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa8:	3a30      	subs	r2, #48	; 0x30
 800bfaa:	2a09      	cmp	r2, #9
 800bfac:	d903      	bls.n	800bfb6 <_vfiprintf_r+0x1ee>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0c5      	beq.n	800bf3e <_vfiprintf_r+0x176>
 800bfb2:	9105      	str	r1, [sp, #20]
 800bfb4:	e7c3      	b.n	800bf3e <_vfiprintf_r+0x176>
 800bfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfba:	4604      	mov	r4, r0
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e7f0      	b.n	800bfa2 <_vfiprintf_r+0x1da>
 800bfc0:	ab03      	add	r3, sp, #12
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	4b16      	ldr	r3, [pc, #88]	; (800c020 <_vfiprintf_r+0x258>)
 800bfc8:	a904      	add	r1, sp, #16
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f3af 8000 	nop.w
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	1c78      	adds	r0, r7, #1
 800bfd4:	d1d6      	bne.n	800bf84 <_vfiprintf_r+0x1bc>
 800bfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd8:	07d9      	lsls	r1, r3, #31
 800bfda:	d405      	bmi.n	800bfe8 <_vfiprintf_r+0x220>
 800bfdc:	89ab      	ldrh	r3, [r5, #12]
 800bfde:	059a      	lsls	r2, r3, #22
 800bfe0:	d402      	bmi.n	800bfe8 <_vfiprintf_r+0x220>
 800bfe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe4:	f7ff fd7f 	bl	800bae6 <__retarget_lock_release_recursive>
 800bfe8:	89ab      	ldrh	r3, [r5, #12]
 800bfea:	065b      	lsls	r3, r3, #25
 800bfec:	f53f af12 	bmi.w	800be14 <_vfiprintf_r+0x4c>
 800bff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bff2:	e711      	b.n	800be18 <_vfiprintf_r+0x50>
 800bff4:	ab03      	add	r3, sp, #12
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	462a      	mov	r2, r5
 800bffa:	4b09      	ldr	r3, [pc, #36]	; (800c020 <_vfiprintf_r+0x258>)
 800bffc:	a904      	add	r1, sp, #16
 800bffe:	4630      	mov	r0, r6
 800c000:	f000 f880 	bl	800c104 <_printf_i>
 800c004:	e7e4      	b.n	800bfd0 <_vfiprintf_r+0x208>
 800c006:	bf00      	nop
 800c008:	0800d090 	.word	0x0800d090
 800c00c:	0800d0b0 	.word	0x0800d0b0
 800c010:	0800d070 	.word	0x0800d070
 800c014:	0800d0d0 	.word	0x0800d0d0
 800c018:	0800d0da 	.word	0x0800d0da
 800c01c:	00000000 	.word	0x00000000
 800c020:	0800bda3 	.word	0x0800bda3
 800c024:	0800d0d6 	.word	0x0800d0d6

0800c028 <_printf_common>:
 800c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02c:	4616      	mov	r6, r2
 800c02e:	4699      	mov	r9, r3
 800c030:	688a      	ldr	r2, [r1, #8]
 800c032:	690b      	ldr	r3, [r1, #16]
 800c034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c038:	4293      	cmp	r3, r2
 800c03a:	bfb8      	it	lt
 800c03c:	4613      	movlt	r3, r2
 800c03e:	6033      	str	r3, [r6, #0]
 800c040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c044:	4607      	mov	r7, r0
 800c046:	460c      	mov	r4, r1
 800c048:	b10a      	cbz	r2, 800c04e <_printf_common+0x26>
 800c04a:	3301      	adds	r3, #1
 800c04c:	6033      	str	r3, [r6, #0]
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	0699      	lsls	r1, r3, #26
 800c052:	bf42      	ittt	mi
 800c054:	6833      	ldrmi	r3, [r6, #0]
 800c056:	3302      	addmi	r3, #2
 800c058:	6033      	strmi	r3, [r6, #0]
 800c05a:	6825      	ldr	r5, [r4, #0]
 800c05c:	f015 0506 	ands.w	r5, r5, #6
 800c060:	d106      	bne.n	800c070 <_printf_common+0x48>
 800c062:	f104 0a19 	add.w	sl, r4, #25
 800c066:	68e3      	ldr	r3, [r4, #12]
 800c068:	6832      	ldr	r2, [r6, #0]
 800c06a:	1a9b      	subs	r3, r3, r2
 800c06c:	42ab      	cmp	r3, r5
 800c06e:	dc26      	bgt.n	800c0be <_printf_common+0x96>
 800c070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c074:	1e13      	subs	r3, r2, #0
 800c076:	6822      	ldr	r2, [r4, #0]
 800c078:	bf18      	it	ne
 800c07a:	2301      	movne	r3, #1
 800c07c:	0692      	lsls	r2, r2, #26
 800c07e:	d42b      	bmi.n	800c0d8 <_printf_common+0xb0>
 800c080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c084:	4649      	mov	r1, r9
 800c086:	4638      	mov	r0, r7
 800c088:	47c0      	blx	r8
 800c08a:	3001      	adds	r0, #1
 800c08c:	d01e      	beq.n	800c0cc <_printf_common+0xa4>
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	68e5      	ldr	r5, [r4, #12]
 800c092:	6832      	ldr	r2, [r6, #0]
 800c094:	f003 0306 	and.w	r3, r3, #6
 800c098:	2b04      	cmp	r3, #4
 800c09a:	bf08      	it	eq
 800c09c:	1aad      	subeq	r5, r5, r2
 800c09e:	68a3      	ldr	r3, [r4, #8]
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	bf0c      	ite	eq
 800c0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0a8:	2500      	movne	r5, #0
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	bfc4      	itt	gt
 800c0ae:	1a9b      	subgt	r3, r3, r2
 800c0b0:	18ed      	addgt	r5, r5, r3
 800c0b2:	2600      	movs	r6, #0
 800c0b4:	341a      	adds	r4, #26
 800c0b6:	42b5      	cmp	r5, r6
 800c0b8:	d11a      	bne.n	800c0f0 <_printf_common+0xc8>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e008      	b.n	800c0d0 <_printf_common+0xa8>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	4652      	mov	r2, sl
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	47c0      	blx	r8
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d103      	bne.n	800c0d4 <_printf_common+0xac>
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	e7c6      	b.n	800c066 <_printf_common+0x3e>
 800c0d8:	18e1      	adds	r1, r4, r3
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	2030      	movs	r0, #48	; 0x30
 800c0de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0e2:	4422      	add	r2, r4
 800c0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0ec:	3302      	adds	r3, #2
 800c0ee:	e7c7      	b.n	800c080 <_printf_common+0x58>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	47c0      	blx	r8
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	d0e6      	beq.n	800c0cc <_printf_common+0xa4>
 800c0fe:	3601      	adds	r6, #1
 800c100:	e7d9      	b.n	800c0b6 <_printf_common+0x8e>
	...

0800c104 <_printf_i>:
 800c104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c108:	7e0f      	ldrb	r7, [r1, #24]
 800c10a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c10c:	2f78      	cmp	r7, #120	; 0x78
 800c10e:	4691      	mov	r9, r2
 800c110:	4680      	mov	r8, r0
 800c112:	460c      	mov	r4, r1
 800c114:	469a      	mov	sl, r3
 800c116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c11a:	d807      	bhi.n	800c12c <_printf_i+0x28>
 800c11c:	2f62      	cmp	r7, #98	; 0x62
 800c11e:	d80a      	bhi.n	800c136 <_printf_i+0x32>
 800c120:	2f00      	cmp	r7, #0
 800c122:	f000 80d8 	beq.w	800c2d6 <_printf_i+0x1d2>
 800c126:	2f58      	cmp	r7, #88	; 0x58
 800c128:	f000 80a3 	beq.w	800c272 <_printf_i+0x16e>
 800c12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c134:	e03a      	b.n	800c1ac <_printf_i+0xa8>
 800c136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c13a:	2b15      	cmp	r3, #21
 800c13c:	d8f6      	bhi.n	800c12c <_printf_i+0x28>
 800c13e:	a101      	add	r1, pc, #4	; (adr r1, 800c144 <_printf_i+0x40>)
 800c140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c144:	0800c19d 	.word	0x0800c19d
 800c148:	0800c1b1 	.word	0x0800c1b1
 800c14c:	0800c12d 	.word	0x0800c12d
 800c150:	0800c12d 	.word	0x0800c12d
 800c154:	0800c12d 	.word	0x0800c12d
 800c158:	0800c12d 	.word	0x0800c12d
 800c15c:	0800c1b1 	.word	0x0800c1b1
 800c160:	0800c12d 	.word	0x0800c12d
 800c164:	0800c12d 	.word	0x0800c12d
 800c168:	0800c12d 	.word	0x0800c12d
 800c16c:	0800c12d 	.word	0x0800c12d
 800c170:	0800c2bd 	.word	0x0800c2bd
 800c174:	0800c1e1 	.word	0x0800c1e1
 800c178:	0800c29f 	.word	0x0800c29f
 800c17c:	0800c12d 	.word	0x0800c12d
 800c180:	0800c12d 	.word	0x0800c12d
 800c184:	0800c2df 	.word	0x0800c2df
 800c188:	0800c12d 	.word	0x0800c12d
 800c18c:	0800c1e1 	.word	0x0800c1e1
 800c190:	0800c12d 	.word	0x0800c12d
 800c194:	0800c12d 	.word	0x0800c12d
 800c198:	0800c2a7 	.word	0x0800c2a7
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	1d1a      	adds	r2, r3, #4
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	602a      	str	r2, [r5, #0]
 800c1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e0a3      	b.n	800c2f8 <_printf_i+0x1f4>
 800c1b0:	6820      	ldr	r0, [r4, #0]
 800c1b2:	6829      	ldr	r1, [r5, #0]
 800c1b4:	0606      	lsls	r6, r0, #24
 800c1b6:	f101 0304 	add.w	r3, r1, #4
 800c1ba:	d50a      	bpl.n	800c1d2 <_printf_i+0xce>
 800c1bc:	680e      	ldr	r6, [r1, #0]
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	da03      	bge.n	800c1cc <_printf_i+0xc8>
 800c1c4:	232d      	movs	r3, #45	; 0x2d
 800c1c6:	4276      	negs	r6, r6
 800c1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1cc:	485e      	ldr	r0, [pc, #376]	; (800c348 <_printf_i+0x244>)
 800c1ce:	230a      	movs	r3, #10
 800c1d0:	e019      	b.n	800c206 <_printf_i+0x102>
 800c1d2:	680e      	ldr	r6, [r1, #0]
 800c1d4:	602b      	str	r3, [r5, #0]
 800c1d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1da:	bf18      	it	ne
 800c1dc:	b236      	sxthne	r6, r6
 800c1de:	e7ef      	b.n	800c1c0 <_printf_i+0xbc>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	6820      	ldr	r0, [r4, #0]
 800c1e4:	1d19      	adds	r1, r3, #4
 800c1e6:	6029      	str	r1, [r5, #0]
 800c1e8:	0601      	lsls	r1, r0, #24
 800c1ea:	d501      	bpl.n	800c1f0 <_printf_i+0xec>
 800c1ec:	681e      	ldr	r6, [r3, #0]
 800c1ee:	e002      	b.n	800c1f6 <_printf_i+0xf2>
 800c1f0:	0646      	lsls	r6, r0, #25
 800c1f2:	d5fb      	bpl.n	800c1ec <_printf_i+0xe8>
 800c1f4:	881e      	ldrh	r6, [r3, #0]
 800c1f6:	4854      	ldr	r0, [pc, #336]	; (800c348 <_printf_i+0x244>)
 800c1f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c1fa:	bf0c      	ite	eq
 800c1fc:	2308      	moveq	r3, #8
 800c1fe:	230a      	movne	r3, #10
 800c200:	2100      	movs	r1, #0
 800c202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c206:	6865      	ldr	r5, [r4, #4]
 800c208:	60a5      	str	r5, [r4, #8]
 800c20a:	2d00      	cmp	r5, #0
 800c20c:	bfa2      	ittt	ge
 800c20e:	6821      	ldrge	r1, [r4, #0]
 800c210:	f021 0104 	bicge.w	r1, r1, #4
 800c214:	6021      	strge	r1, [r4, #0]
 800c216:	b90e      	cbnz	r6, 800c21c <_printf_i+0x118>
 800c218:	2d00      	cmp	r5, #0
 800c21a:	d04d      	beq.n	800c2b8 <_printf_i+0x1b4>
 800c21c:	4615      	mov	r5, r2
 800c21e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c222:	fb03 6711 	mls	r7, r3, r1, r6
 800c226:	5dc7      	ldrb	r7, [r0, r7]
 800c228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c22c:	4637      	mov	r7, r6
 800c22e:	42bb      	cmp	r3, r7
 800c230:	460e      	mov	r6, r1
 800c232:	d9f4      	bls.n	800c21e <_printf_i+0x11a>
 800c234:	2b08      	cmp	r3, #8
 800c236:	d10b      	bne.n	800c250 <_printf_i+0x14c>
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	07de      	lsls	r6, r3, #31
 800c23c:	d508      	bpl.n	800c250 <_printf_i+0x14c>
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	6861      	ldr	r1, [r4, #4]
 800c242:	4299      	cmp	r1, r3
 800c244:	bfde      	ittt	le
 800c246:	2330      	movle	r3, #48	; 0x30
 800c248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c24c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c250:	1b52      	subs	r2, r2, r5
 800c252:	6122      	str	r2, [r4, #16]
 800c254:	f8cd a000 	str.w	sl, [sp]
 800c258:	464b      	mov	r3, r9
 800c25a:	aa03      	add	r2, sp, #12
 800c25c:	4621      	mov	r1, r4
 800c25e:	4640      	mov	r0, r8
 800c260:	f7ff fee2 	bl	800c028 <_printf_common>
 800c264:	3001      	adds	r0, #1
 800c266:	d14c      	bne.n	800c302 <_printf_i+0x1fe>
 800c268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c26c:	b004      	add	sp, #16
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	4835      	ldr	r0, [pc, #212]	; (800c348 <_printf_i+0x244>)
 800c274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c278:	6829      	ldr	r1, [r5, #0]
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c280:	6029      	str	r1, [r5, #0]
 800c282:	061d      	lsls	r5, r3, #24
 800c284:	d514      	bpl.n	800c2b0 <_printf_i+0x1ac>
 800c286:	07df      	lsls	r7, r3, #31
 800c288:	bf44      	itt	mi
 800c28a:	f043 0320 	orrmi.w	r3, r3, #32
 800c28e:	6023      	strmi	r3, [r4, #0]
 800c290:	b91e      	cbnz	r6, 800c29a <_printf_i+0x196>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	f023 0320 	bic.w	r3, r3, #32
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	2310      	movs	r3, #16
 800c29c:	e7b0      	b.n	800c200 <_printf_i+0xfc>
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	f043 0320 	orr.w	r3, r3, #32
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	2378      	movs	r3, #120	; 0x78
 800c2a8:	4828      	ldr	r0, [pc, #160]	; (800c34c <_printf_i+0x248>)
 800c2aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2ae:	e7e3      	b.n	800c278 <_printf_i+0x174>
 800c2b0:	0659      	lsls	r1, r3, #25
 800c2b2:	bf48      	it	mi
 800c2b4:	b2b6      	uxthmi	r6, r6
 800c2b6:	e7e6      	b.n	800c286 <_printf_i+0x182>
 800c2b8:	4615      	mov	r5, r2
 800c2ba:	e7bb      	b.n	800c234 <_printf_i+0x130>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	6826      	ldr	r6, [r4, #0]
 800c2c0:	6961      	ldr	r1, [r4, #20]
 800c2c2:	1d18      	adds	r0, r3, #4
 800c2c4:	6028      	str	r0, [r5, #0]
 800c2c6:	0635      	lsls	r5, r6, #24
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	d501      	bpl.n	800c2d0 <_printf_i+0x1cc>
 800c2cc:	6019      	str	r1, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <_printf_i+0x1d2>
 800c2d0:	0670      	lsls	r0, r6, #25
 800c2d2:	d5fb      	bpl.n	800c2cc <_printf_i+0x1c8>
 800c2d4:	8019      	strh	r1, [r3, #0]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	6123      	str	r3, [r4, #16]
 800c2da:	4615      	mov	r5, r2
 800c2dc:	e7ba      	b.n	800c254 <_printf_i+0x150>
 800c2de:	682b      	ldr	r3, [r5, #0]
 800c2e0:	1d1a      	adds	r2, r3, #4
 800c2e2:	602a      	str	r2, [r5, #0]
 800c2e4:	681d      	ldr	r5, [r3, #0]
 800c2e6:	6862      	ldr	r2, [r4, #4]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f7f3 ff60 	bl	80001b0 <memchr>
 800c2f0:	b108      	cbz	r0, 800c2f6 <_printf_i+0x1f2>
 800c2f2:	1b40      	subs	r0, r0, r5
 800c2f4:	6060      	str	r0, [r4, #4]
 800c2f6:	6863      	ldr	r3, [r4, #4]
 800c2f8:	6123      	str	r3, [r4, #16]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c300:	e7a8      	b.n	800c254 <_printf_i+0x150>
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	462a      	mov	r2, r5
 800c306:	4649      	mov	r1, r9
 800c308:	4640      	mov	r0, r8
 800c30a:	47d0      	blx	sl
 800c30c:	3001      	adds	r0, #1
 800c30e:	d0ab      	beq.n	800c268 <_printf_i+0x164>
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	079b      	lsls	r3, r3, #30
 800c314:	d413      	bmi.n	800c33e <_printf_i+0x23a>
 800c316:	68e0      	ldr	r0, [r4, #12]
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	4298      	cmp	r0, r3
 800c31c:	bfb8      	it	lt
 800c31e:	4618      	movlt	r0, r3
 800c320:	e7a4      	b.n	800c26c <_printf_i+0x168>
 800c322:	2301      	movs	r3, #1
 800c324:	4632      	mov	r2, r6
 800c326:	4649      	mov	r1, r9
 800c328:	4640      	mov	r0, r8
 800c32a:	47d0      	blx	sl
 800c32c:	3001      	adds	r0, #1
 800c32e:	d09b      	beq.n	800c268 <_printf_i+0x164>
 800c330:	3501      	adds	r5, #1
 800c332:	68e3      	ldr	r3, [r4, #12]
 800c334:	9903      	ldr	r1, [sp, #12]
 800c336:	1a5b      	subs	r3, r3, r1
 800c338:	42ab      	cmp	r3, r5
 800c33a:	dcf2      	bgt.n	800c322 <_printf_i+0x21e>
 800c33c:	e7eb      	b.n	800c316 <_printf_i+0x212>
 800c33e:	2500      	movs	r5, #0
 800c340:	f104 0619 	add.w	r6, r4, #25
 800c344:	e7f5      	b.n	800c332 <_printf_i+0x22e>
 800c346:	bf00      	nop
 800c348:	0800d0e1 	.word	0x0800d0e1
 800c34c:	0800d0f2 	.word	0x0800d0f2

0800c350 <_sbrk_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d06      	ldr	r5, [pc, #24]	; (800c36c <_sbrk_r+0x1c>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	f7f6 fa46 	bl	80027ec <_sbrk>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_sbrk_r+0x1a>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_sbrk_r+0x1a>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	20001670 	.word	0x20001670

0800c370 <__sread>:
 800c370:	b510      	push	{r4, lr}
 800c372:	460c      	mov	r4, r1
 800c374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c378:	f000 f8a0 	bl	800c4bc <_read_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	bfab      	itete	ge
 800c380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c382:	89a3      	ldrhlt	r3, [r4, #12]
 800c384:	181b      	addge	r3, r3, r0
 800c386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c38a:	bfac      	ite	ge
 800c38c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c38e:	81a3      	strhlt	r3, [r4, #12]
 800c390:	bd10      	pop	{r4, pc}

0800c392 <__swrite>:
 800c392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c396:	461f      	mov	r7, r3
 800c398:	898b      	ldrh	r3, [r1, #12]
 800c39a:	05db      	lsls	r3, r3, #23
 800c39c:	4605      	mov	r5, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	d505      	bpl.n	800c3b0 <__swrite+0x1e>
 800c3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f000 f868 	bl	800c480 <_lseek_r>
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	4632      	mov	r2, r6
 800c3be:	463b      	mov	r3, r7
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c6:	f000 b817 	b.w	800c3f8 <_write_r>

0800c3ca <__sseek>:
 800c3ca:	b510      	push	{r4, lr}
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d2:	f000 f855 	bl	800c480 <_lseek_r>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	bf15      	itete	ne
 800c3dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3e6:	81a3      	strheq	r3, [r4, #12]
 800c3e8:	bf18      	it	ne
 800c3ea:	81a3      	strhne	r3, [r4, #12]
 800c3ec:	bd10      	pop	{r4, pc}

0800c3ee <__sclose>:
 800c3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f2:	f000 b813 	b.w	800c41c <_close_r>
	...

0800c3f8 <_write_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4d07      	ldr	r5, [pc, #28]	; (800c418 <_write_r+0x20>)
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	4608      	mov	r0, r1
 800c400:	4611      	mov	r1, r2
 800c402:	2200      	movs	r2, #0
 800c404:	602a      	str	r2, [r5, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	f7fe f856 	bl	800a4b8 <_write>
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	d102      	bne.n	800c416 <_write_r+0x1e>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	b103      	cbz	r3, 800c416 <_write_r+0x1e>
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	20001670 	.word	0x20001670

0800c41c <_close_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d06      	ldr	r5, [pc, #24]	; (800c438 <_close_r+0x1c>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	602b      	str	r3, [r5, #0]
 800c428:	f7f6 f9ac 	bl	8002784 <_close>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_close_r+0x1a>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b103      	cbz	r3, 800c436 <_close_r+0x1a>
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	20001670 	.word	0x20001670

0800c43c <_fstat_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d07      	ldr	r5, [pc, #28]	; (800c45c <_fstat_r+0x20>)
 800c440:	2300      	movs	r3, #0
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	4611      	mov	r1, r2
 800c448:	602b      	str	r3, [r5, #0]
 800c44a:	f7f6 f9a7 	bl	800279c <_fstat>
 800c44e:	1c43      	adds	r3, r0, #1
 800c450:	d102      	bne.n	800c458 <_fstat_r+0x1c>
 800c452:	682b      	ldr	r3, [r5, #0]
 800c454:	b103      	cbz	r3, 800c458 <_fstat_r+0x1c>
 800c456:	6023      	str	r3, [r4, #0]
 800c458:	bd38      	pop	{r3, r4, r5, pc}
 800c45a:	bf00      	nop
 800c45c:	20001670 	.word	0x20001670

0800c460 <_isatty_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d06      	ldr	r5, [pc, #24]	; (800c47c <_isatty_r+0x1c>)
 800c464:	2300      	movs	r3, #0
 800c466:	4604      	mov	r4, r0
 800c468:	4608      	mov	r0, r1
 800c46a:	602b      	str	r3, [r5, #0]
 800c46c:	f7f6 f9a6 	bl	80027bc <_isatty>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d102      	bne.n	800c47a <_isatty_r+0x1a>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	b103      	cbz	r3, 800c47a <_isatty_r+0x1a>
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	20001670 	.word	0x20001670

0800c480 <_lseek_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d07      	ldr	r5, [pc, #28]	; (800c4a0 <_lseek_r+0x20>)
 800c484:	4604      	mov	r4, r0
 800c486:	4608      	mov	r0, r1
 800c488:	4611      	mov	r1, r2
 800c48a:	2200      	movs	r2, #0
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	f7f6 f99f 	bl	80027d2 <_lseek>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_lseek_r+0x1e>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_lseek_r+0x1e>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	20001670 	.word	0x20001670

0800c4a4 <__malloc_lock>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	; (800c4ac <__malloc_lock+0x8>)
 800c4a6:	f7ff bb1d 	b.w	800bae4 <__retarget_lock_acquire_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	20001664 	.word	0x20001664

0800c4b0 <__malloc_unlock>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__malloc_unlock+0x8>)
 800c4b2:	f7ff bb18 	b.w	800bae6 <__retarget_lock_release_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	20001664 	.word	0x20001664

0800c4bc <_read_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4d07      	ldr	r5, [pc, #28]	; (800c4dc <_read_r+0x20>)
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	4608      	mov	r0, r1
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	602a      	str	r2, [r5, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f7f6 f93d 	bl	800274a <_read>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_read_r+0x1e>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_read_r+0x1e>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	20001670 	.word	0x20001670

0800c4e0 <_init>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	bf00      	nop
 800c4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4e6:	bc08      	pop	{r3}
 800c4e8:	469e      	mov	lr, r3
 800c4ea:	4770      	bx	lr

0800c4ec <_fini>:
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	bf00      	nop
 800c4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4f2:	bc08      	pop	{r3}
 800c4f4:	469e      	mov	lr, r3
 800c4f6:	4770      	bx	lr
